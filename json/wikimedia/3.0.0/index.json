{
  "id": "wikimedia",
  "title": "Wikimedia",
  "description": "This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats.\n### Global Rules\n- Limit your clients to no more than 200 requests/s to this API.\n  Each API endpoint's documentation may detail more specific usage limits.\n- Set a unique `User-Agent` or `Api-User-Agent` header that\n  allows us to contact you quickly. Email addresses or URLs\n  of contact pages work well.\n\nBy using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details.\n### Endpoint documentation\nPlease consult each endpoint's documentation for details on:\n- Licensing information for the specific type of content\n  and data served via the endpoint.\n- Stability markers to inform you about development status and\n  change policy, according to\n  [our API version policy](https://www.mediawiki.org/wiki/API_versioning).\n- Endpoint specific usage limits.\n",
  "security": {
    "wikimedia": {
      "integration": "wikimedia",
      "fields": {
        "mediawiki_auth": "Checks permissions using MW api"
      }
    }
  },
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/wikimedia.png"
  },
  "actionCount": 28,
  "definitions": {
    "absolute-bytes-difference": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "abs_bytes_diff": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "absolute-bytes-difference"
    },
    "cx_dict": {
      "properties": {
        "source": {
          "description": "the original word to look up",
          "type": "string"
        },
        "translations": {
          "description": "the translations found",
          "items": {
            "properties": {
              "info": {
                "description": "extra information about the phrase",
                "type": "string"
              },
              "phrase": {
                "description": "the translated phrase",
                "type": "string"
              },
              "sources": {
                "description": "the source dictionary used for the translation",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "cx_dict"
    },
    "cx_languagepairs": {
      "properties": {
        "source": {
          "description": "the list of available source languages",
          "items": {
            "description": "one source language",
            "type": "string"
          },
          "type": "array"
        },
        "target": {
          "description": "the list of available destination languages",
          "items": {
            "description": "one destination language",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "cx_languagepairs"
    },
    "cx_list_pairs_for_tool": {
      "type": "object",
      "title": "cx_list_pairs_for_tool"
    },
    "cx_list_tools": {
      "properties": {
        "tools": {
          "description": "the list of tools available for the given language pair",
          "items": {
            "description": "the tool available",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "cx_list_tools"
    },
    "cx_mt": {
      "properties": {
        "contents": {
          "description": "the translated content",
          "type": "string"
        }
      },
      "type": "object",
      "title": "cx_mt"
    },
    "edited-pages": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "activity-level": {
                "type": "string"
              },
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "edited_pages": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "edited-pages"
    },
    "editors": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "activity-level": {
                "type": "string"
              },
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "editors": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "editors"
    },
    "edits": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "edits": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "edits"
    },
    "listing": {
      "description": "The result format for listings",
      "properties": {
        "items": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "title": "listing"
    },
    "net-bytes-difference": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "net_bytes_diff": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "net-bytes-difference"
    },
    "new-pages": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "new_pages": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "new-pages"
    },
    "new-registered-users": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "granularity": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "new_registered_users": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "new-registered-users"
    },
    "originalimage": {
      "properties": {
        "height": {
          "description": "Original image height",
          "type": "integer"
        },
        "source": {
          "description": "Original image URI",
          "type": "string"
        },
        "width": {
          "description": "Original image width",
          "type": "integer"
        }
      },
      "required": [
        "source",
        "width",
        "height"
      ],
      "type": "object",
      "title": "originalimage"
    },
    "pagecounts-project": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "access-site": {
                "type": "string"
              },
              "count": {
                "format": "int64",
                "type": "integer"
              },
              "granularity": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "timestamp": {
                "type": "string"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "pagecounts-project"
    },
    "pageview-article": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "access": {
                "type": "string"
              },
              "agent": {
                "type": "string"
              },
              "article": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "timestamp": {
                "type": "string"
              },
              "views": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "pageview-article"
    },
    "pageview-project": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "access": {
                "type": "string"
              },
              "agent": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "timestamp": {
                "type": "string"
              },
              "views": {
                "format": "int64",
                "type": "integer"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "pageview-project"
    },
    "pageview-tops": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "access": {
                "type": "string"
              },
              "articles": {
                "type": "string"
              },
              "day": {
                "type": "string"
              },
              "month": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "year": {
                "type": "string"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "pageview-tops"
    },
    "problem": {
      "properties": {
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "problem"
    },
    "summary": {
      "properties": {
        "coordinates": {
          "description": "The coordinates of the item",
          "properties": {
            "lat": {
              "description": "The latitude",
              "type": "number"
            },
            "lon": {
              "description": "The longitude",
              "type": "number"
            }
          },
          "required": [
            "lat",
            "lon"
          ],
          "type": "object"
        },
        "description": {
          "description": "Wikidata description for the page",
          "example": "American poet",
          "type": "string"
        },
        "dir": {
          "description": "The page language direction code",
          "example": "ltr",
          "type": "string"
        },
        "displaytitle": {
          "description": "The page title how it should be shown to the user",
          "type": "string"
        },
        "extract": {
          "description": "First several sentences of an article in plain text",
          "type": "string"
        },
        "extract_html": {
          "description": "First several sentences of an article in simple HTML format",
          "type": "string"
        },
        "lang": {
          "description": "The page language code",
          "example": "en",
          "type": "string"
        },
        "originalimage": {
          "$ref": "#/definitions/originalimage"
        },
        "pageid": {
          "description": "The page ID",
          "type": "integer"
        },
        "thumbnail": {
          "$ref": "#/definitions/thumbnail"
        },
        "timestamp": {
          "description": "The time when the page was last editted in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format",
          "example": "1970-01-01T00:00:00.000Z",
          "type": "string"
        },
        "title": {
          "description": "The page title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "extract",
        "lang",
        "dir"
      ],
      "type": "object",
      "title": "summary"
    },
    "thumbnail": {
      "properties": {
        "height": {
          "description": "Thumnail height",
          "type": "integer"
        },
        "source": {
          "description": "Thumbnail image URI",
          "type": "string"
        },
        "width": {
          "description": "Thumbnail width",
          "type": "integer"
        }
      },
      "required": [
        "source",
        "width",
        "height"
      ],
      "type": "object",
      "title": "thumbnail"
    },
    "top-edited-pages-by-abs-bytes-diff": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "abs_bytes_diff": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "page_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-edited-pages-by-abs-bytes-diff"
    },
    "top-edited-pages-by-edits": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "edits": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "page_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-edited-pages-by-edits"
    },
    "top-edited-pages-by-net-bytes-diff": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "net_bytes_diff": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "page_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-edited-pages-by-net-bytes-diff"
    },
    "top-editors-by-abs-bytes-diff": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "abs_bytes_diff": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "user_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-editors-by-abs-bytes-diff"
    },
    "top-editors-by-edits": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "edits": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "user_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-editors-by-edits"
    },
    "top-editors-by-net-bytes-diff": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "editor-type": {
                "type": "string"
              },
              "granularity": {
                "type": "string"
              },
              "page-type": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "results": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "type": "string"
                    },
                    "top": {
                      "items": {
                        "properties": {
                          "net_bytes_diff": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "user_id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    }
                  }
                },
                "type": "array"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "top-editors-by-net-bytes-diff"
    },
    "unique-devices": {
      "properties": {
        "items": {
          "items": {
            "properties": {
              "access-site": {
                "type": "string"
              },
              "devices": {
                "format": "int64",
                "type": "integer"
              },
              "granularity": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "timestamp": {
                "type": "string"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "unique-devices"
    }
  },
  "actions": [
    {
      "id": "media.math.check.type.post",
      "title": "media.math.check.type.post",
      "description": "Checks the supplied TeX formula for correctness and returns the\nnormalised formula representation as well as information about\nidentifiers. Available types are tex and inline-tex. The response\ncontains the `x-resource-location` header which can be used to retrieve\nthe render of the checked formula in one of the supported rendering\nformats. Just append the value of the header to `/media/math/{format}/`\nand perform a GET request against that URL.\n\nStability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The input type of the given formula; can be tex or inline-tex",
            "enum": [
              "tex",
              "inline-tex",
              "chem"
            ]
          },
          "q": {
            "type": "string",
            "description": "The formula to check"
          }
        },
        "additionalProperties": false,
        "required": [
          "type",
          "q"
        ]
      },
      "outputSchema": {},
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "media.math.formula.hash.get",
      "title": "media.math.formula.hash.get",
      "description": "Returns the previously-stored formula via `/media/math/check/{type}` for\nthe given hash.\n\nStability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash string of the previous POST data",
            "minLength": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "hash"
        ]
      },
      "outputSchema": {},
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "media.math.render.format.hash.get",
      "title": "media.math.render.format.hash.get",
      "description": "Given a request hash, renders a TeX formula into its mathematic\nrepresentation in the given format. When a request is issued to the\n`/media/math/check/{format}` POST endpoint, the response contains the\n`x-resource-location` header denoting the hash ID of the POST data. Once\nobtained, this endpoint has to be used to obtain the actual render.\n\nStability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "The output format; can be svg or mml",
            "enum": [
              "svg",
              "mml",
              "png"
            ]
          },
          "hash": {
            "type": "string",
            "description": "The hash string of the previous POST data",
            "minLength": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "format",
          "hash"
        ]
      },
      "outputSchema": {},
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.bytes_difference.absolute.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.bytes_difference.absolute.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of absolute bytes\ndifference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot,\nname-bot, user) and page-type (all-page-types, content, non-content). You can choose\nbetween daily and monthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org. If you're interested in the aggregation of all projects, use\nall-projects.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/absolute-bytes-difference"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.bytes_difference.net.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.bytes_difference.net.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of bytes difference net\nsums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot,\nuser) and page-type (all-page-types, content or non-content). You can choose between\ndaily and monthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org. If you're interested in the aggregation of all projects, use\nall-projects.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/net-bytes-difference"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edited_pages.aggregate.project.editor_type.page_type.activity_level.granularity.start.end.get",
      "title": "metrics.edited_pages.aggregate.project.editor_type.page_type.activity_level.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts.\nYou can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user),\npage-type (all-page-types, content or non-content) or activity-level (1..4-edits,\n5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly\ngranularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff.  For projects like commons without language codes, use commons.wikimedia.\nFor projects like www.mediawiki.org, you can use that full string, or just use\nmediawiki or mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edited-pages in content\nnamespaces) or non-content (edited-pages in non-content namespaces). If you are\ninterested in edited-pages regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "activity-level": {
            "type": "string",
            "description": "If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,\n25..99-edits or 100..-edits. If you are interested in edited-pages regardless\nof their activity level, use all-activity-levels.\n",
            "enum": [
              "all-activity-levels",
              "1..4-edits",
              "5..24-edits",
              "25..99-edits",
              "100..-edits"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, supported values are\ndaily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "activity-level",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/edited-pages"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edited_pages.new.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.edited_pages.new.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of its new pages counts.\nYou can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user)\nor page-type (all-page-types, content or non-content). You can choose between daily and\nmonthly granularity as well.\nThe new pages value is computed as follow:\n  [number of created pages] - [number of deleted pages] + [number of restored pages]\nfor the chosen filters.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff.  For projects like commons without language codes, use commons.wikimedia.\nFor projects like www.mediawiki.org, you can use that full string, or just use\nmediawiki or mediawiki.org. If you're interested in the aggregation of all\nprojects, use all-projects.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless of\ntheir editor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (new pages in content\nnamespaces) or non-content (new pages in non-content namespaces). If you are\ninterested in new-articles regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, supported values are\ndaily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/new-pages"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edited_pages.top_by_absolute_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.edited_pages.top_by_absolute_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 edited-pages\nby absolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous,\ngroup-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can\nchoose between daily and monthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-edited-pages-by-abs-bytes-diff"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edited_pages.top_by_edits.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.edited_pages.top_by_edits.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 edited-pages\nby edits count. You can filter by editor-type (all-editor-types, anonymous, group-bot,\nname-bot, user) or page-type (all-page-types, content or non-content). You can choose\nbetween daily and monthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-edited-pages-by-edits"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edited_pages.top_by_net_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.edited_pages.top_by_net_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 edited-pages\nby net bytes-difference. You can filter by editor-type (all-editor-types, anonymous,\ngroup-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can\nchoose between daily and monthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-edited-pages-by-net-bytes-diff"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.editors.aggregate.project.editor_type.page_type.activity_level.granularity.start.end.get",
      "title": "metrics.editors.aggregate.project.editor_type.page_type.activity_level.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of its editors counts.\nYou can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user),\npage-type (all-page-types, content or non-content) or activity-level (1..4-edits,\n5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly\ngranularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff.  For projects like commons without language codes, use commons.wikimedia.\nFor projects like www.mediawiki.org, you can use that full string, or just use\nmediawiki or mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless\nof their editor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits made in content\nnamespaces) or non-content (edits made in non-content namespaces). If you are\ninterested in editors regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "activity-level": {
            "type": "string",
            "description": "If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,\n25..99-edits or 100..-edits. If you are interested in editors regardless\nof their activity-level, use all-activity-levels.\n",
            "enum": [
              "all-activity-levels",
              "1..4-edits",
              "5..24-edits",
              "25..99-edits",
              "100..-edits"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, supported values are\ndaily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "activity-level",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/editors"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.editors.top_by_absolute_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.editors.top_by_absolute_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 editors by\nabsolute bytes-difference. You can filter by editor-type (all-editor-types, anonymous,\ngroup-bot, name-bot, user) or page-type (all-page-types, content or non-content). You can\nchoose between daily and monthly granularity as well. The user_id returned is either the\nmediawiki user_id if user is registered, or his/her IP if the user is anonymous.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-editors-by-abs-bytes-diff"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.editors.top_by_edits.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.editors.top_by_edits.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 editors by\nedits count. You can filter by editor-type (all-editor-types, anonymous, group-bot,\nname-bot, user) or page-type (all-page-types, content or non-content). You can choose\nbetween daily and monthly granularity as well. The user_id returned is either the\nmediawiki user_id if user is registered, or his/her IP if the user is anonymous.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-editors-by-edits"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.editors.top_by_net_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.editors.top_by_net_bytes_difference.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of the top 100 editors by\nnet bytes-difference. You can filter by editor-type (all-editor-types, anonymous, group-bot,\nname-bot, user) or page-type (all-page-types, content or non-content). You can choose\nbetween daily and monthly granularity as well. The user_id returned is either the mediawiki\nuser_id if user is registered, or his/her IP if the user is anonymous.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia. For\nprojects like www.mediawiki.org, you can use that full string, or just use mediawiki\nor mediawiki.org.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging to\nthe bot group but having bot-like names) or user (registered account not in bot group\nnor having bot-like name). If you are interested in edits regardless of their\neditor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "Time unit for the response data. As of today, supported values are daily and monthly\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/top-editors-by-net-bytes-diff"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.edits.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "title": "metrics.edits.aggregate.project.editor_type.page_type.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of edits counts.\nYou can filter by editors-type (all-editor-types, anonymous, bot, registered) and\npage-type (all-page-types, content or non-content). You can choose between daily and\nmonthly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff.  For projects like commons without language codes, use commons.wikimedia.\nFor projects like www.mediawiki.org, you can use that full string, or just use\nmediawiki or mediawiki.org. If you're interested in the aggregation of\nall projects, use all-projects.\n"
          },
          "editor-type": {
            "type": "string",
            "description": "If you want to filter by editor-type, use one of anonymous, group-bot (registered\naccounts belonging to the bot group), name-bot (registered accounts not belonging\nto the bot group but having bot-like names) or user (registered account not in bot\ngroup nor having bot-like name). If you are interested in edits regardless\nof their editor-type, use all-editor-types.\n",
            "enum": [
              "all-editor-types",
              "anonymous",
              "group-bot",
              "name-bot",
              "user"
            ]
          },
          "page-type": {
            "type": "string",
            "description": "If you want to filter by page-type, use one of content (edits on pages in content\nnamespaces) or non-content (edits on pages in non-content namespaces). If you are\ninterested in edits regardless of their page-type, use all-page-types.\n",
            "enum": [
              "all-page-types",
              "content",
              "non-content"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, supported values are\ndaily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "editor-type",
          "page-type",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/edits"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.legacy.pagecounts.aggregate.project.access_site.granularity.start.end.get",
      "title": "metrics.legacy.pagecounts.aggregate.project.access_site.granularity.start.end.get",
      "description": "Given a project and a date range, returns a timeseries of pagecounts.\nYou can filter by access site (mobile or desktop) and you can choose between monthly,\ndaily and hourly granularity as well.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff. For projects like commons without language codes, use commons.wikimedia.\n"
          },
          "access-site": {
            "type": "string",
            "description": "If you want to filter by access site, use one of desktop-site or mobile-site. If you are interested in pagecounts regardless of access site use all-sites.",
            "enum": [
              "all-sites",
              "desktop-site",
              "mobile-site"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, the supported granularities for\nthis endpoint are hourly, daily and monthly.\n",
            "enum": [
              "hourly",
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The timestamp of the first hour/day/month to include, in YYYYMMDDHH format."
          },
          "end": {
            "type": "string",
            "description": "The timestamp of the last hour/day/month to include, in YYYYMMDDHH format.\nIn hourly and daily granularities this value is inclusive, in the monthly granularity\nthis value is exclusive.\n"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "access-site",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/pagecounts-project"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.pageviews.aggregate.project.access.agent.granularity.start.end.get",
      "title": "metrics.pageviews.aggregate.project.access.agent.granularity.start.end.get",
      "description": "Given a date range, returns a timeseries of pageview counts. You can filter by project,\naccess method and/or agent type. You can choose between daily and hourly granularity\nas well.\n\n- Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "If you want to filter by project, use the domain of any Wikimedia project,\nfor example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\nIf you are interested in all pageviews regardless of project, use all-projects.\n"
          },
          "access": {
            "type": "string",
            "description": "If you want to filter by access method, use one of desktop, mobile-app or mobile-web.\nIf you are interested in pageviews regardless of access method, use all-access.\n",
            "enum": [
              "all-access",
              "desktop",
              "mobile-app",
              "mobile-web"
            ]
          },
          "agent": {
            "type": "string",
            "description": "If you want to filter by agent type, use one of user or spider. If you are interested\nin pageviews regardless of agent type, use all-agents.\n",
            "enum": [
              "all-agents",
              "user",
              "spider"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, the supported granularities for this\nendpoint are hourly, daily, and monthly.\n",
            "enum": [
              "hourly",
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The timestamp of the first hour/day/month to include, in YYYYMMDDHH format"
          },
          "end": {
            "type": "string",
            "description": "The timestamp of the last hour/day/month to include, in YYYYMMDDHH format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "access",
          "agent",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/pageview-project"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.pageviews.per_article.project.access.agent.article.granularity.start.end.get",
      "title": "metrics.pageviews.per_article.project.access.agent.article.granularity.start.end.get",
      "description": "Given a Mediawiki article and a date range, returns a daily timeseries of its pageview\ncounts. You can also filter by access method and/or agent type.\n\n- Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "If you want to filter by project, use the domain of any Wikimedia project,\nfor example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n"
          },
          "access": {
            "type": "string",
            "description": "If you want to filter by access method, use one of desktop, mobile-app\nor mobile-web. If you are interested in pageviews regardless of access method,\nuse all-access.\n",
            "enum": [
              "all-access",
              "desktop",
              "mobile-app",
              "mobile-web"
            ]
          },
          "agent": {
            "type": "string",
            "description": "If you want to filter by agent type, use one of user, bot or spider. If you are\ninterested in pageviews regardless of agent type, use all-agents.\n",
            "enum": [
              "all-agents",
              "user",
              "spider",
              "bot"
            ]
          },
          "article": {
            "type": "string",
            "description": "'The title of any article in the specified project. Any spaces should be replaced\nwith underscores. It also should be URI-encoded, so that non-URI-safe characters like\n%, / or ? are accepted. Example: Are_You_the_One%3F'.\n"
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, the only supported granularity for\nthis endpoint is daily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "access",
          "agent",
          "article",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/pageview-article"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.pageviews.top.project.access.year.month.day.get",
      "title": "metrics.pageviews.top.project.access.year.month.day.get",
      "description": "Lists the 1000 most viewed articles for a given project and timespan (month or day).\nYou can filter by access method.\n\n- Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "If you want to filter by project, use the domain of any Wikimedia project,\nfor example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n"
          },
          "access": {
            "type": "string",
            "description": "If you want to filter by access method, use one of desktop, mobile-app or mobile-web.\nIf you are interested in pageviews regardless of access method, use all-access.\n",
            "enum": [
              "all-access",
              "desktop",
              "mobile-app",
              "mobile-web"
            ]
          },
          "year": {
            "type": "string",
            "description": "The year of the date for which to retrieve top articles, in YYYY format."
          },
          "month": {
            "type": "string",
            "description": "The month of the date for which to retrieve top articles, in MM format. If you want\nto get the top articles of a whole month, the day parameter should be all-days.\n"
          },
          "day": {
            "type": "string",
            "description": "The day of the date for which to retrieve top articles, in DD format."
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "access",
          "year",
          "month",
          "day"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/pageview-tops"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.registered_users.new.project.granularity.start.end.get",
      "title": "metrics.registered_users.new.project.granularity.start.end.get",
      "description": "Given a Mediawiki project and a date range, returns a timeseries of its newly registered\nusers counts. You can choose between daily and monthly granularity. The newly registered\nusers value is computed with self-created users only, not auto-login created ones.\n\n- Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "The name of any Wikimedia project formatted like {language code}.{project name},\nfor example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped\noff.  For projects like commons without language codes, use commons.wikimedia.\nFor projects like www.mediawiki.org, you can use that full string, or just use\nmediawiki or mediawiki.org. If you're interested in the aggregation of\nall projects, use all.\n"
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, supported values are\ndaily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The date of the first day to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The date of the last day to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/new-registered-users"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "metrics.unique_devices.project.access_site.granularity.start.end.get",
      "title": "metrics.unique_devices.project.access_site.granularity.start.end.get",
      "description": "Given a project and a date range, returns a timeseries of unique devices counts.\nYou need to specify a project, and can filter by accessed site (mobile or desktop).\nYou can choose between daily and hourly granularity as well.\n\n- Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)\n- Rate limit: 100 req/s\n- License: Data accessible via this endpoint is available under the\n  [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "description": "If you want to filter by project, use the domain of any Wikimedia project,\nfor example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.\n"
          },
          "access-site": {
            "type": "string",
            "description": "If you want to filter by accessed site, use one of desktop-site or mobile-site.\nIf you are interested in unique devices regardless of accessed site, use or all-sites.\n",
            "enum": [
              "all-sites",
              "desktop-site",
              "mobile-site"
            ]
          },
          "granularity": {
            "type": "string",
            "description": "The time unit for the response data. As of today, the supported granularities\nfor this endpoint are daily and monthly.\n",
            "enum": [
              "daily",
              "monthly"
            ]
          },
          "start": {
            "type": "string",
            "description": "The timestamp of the first day/month to include, in YYYYMMDD format"
          },
          "end": {
            "type": "string",
            "description": "The timestamp of the last day/month to include, in YYYYMMDD format"
          }
        },
        "additionalProperties": false,
        "required": [
          "project",
          "access-site",
          "granularity",
          "start",
          "end"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/unique-devices"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.html.from.from_lang.to.to_lang.post",
      "title": "transform.html.from.from_lang.to.to_lang.post",
      "description": "Fetches the machine translation for the posted content from the source\nto the destination language.\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "from_lang": {
            "type": "string",
            "description": "The source language code"
          },
          "to_lang": {
            "type": "string",
            "description": "The target language code"
          },
          "html": {
            "type": "string",
            "description": "The HTML content to translate"
          }
        },
        "additionalProperties": false,
        "required": [
          "from_lang",
          "to_lang",
          "html"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_mt"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.html.from.from_lang.to.to_lang.provider.post",
      "title": "transform.html.from.from_lang.to.to_lang.provider.post",
      "description": "Fetches the machine translation for the posted content from the source\nto the destination language.\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "from_lang": {
            "type": "string",
            "description": "The source language code"
          },
          "to_lang": {
            "type": "string",
            "description": "The target language code"
          },
          "provider": {
            "type": "string",
            "description": "The machine translation provider id",
            "enum": [
              "Apertium",
              "Yandex",
              "Youdao"
            ]
          },
          "html": {
            "type": "string",
            "description": "The HTML content to translate"
          }
        },
        "additionalProperties": false,
        "required": [
          "from_lang",
          "to_lang",
          "provider",
          "html"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_mt"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.list.languagepairs.get",
      "title": "transform.list.languagepairs.get",
      "description": "Fetches the list of language pairs the back-end service can translate\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/cx_languagepairs"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.list.pair.from.to.get",
      "title": "transform.list.pair.from.to.get",
      "description": "Fetches the list of tools that are available for the given pair of languages.\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The source language code"
          },
          "to": {
            "type": "string",
            "description": "The target language code"
          }
        },
        "additionalProperties": false,
        "required": [
          "from",
          "to"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_list_tools"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.list.tool.tool.get",
      "title": "transform.list.tool.tool.get",
      "description": "Fetches the list of tools and all of the language pairs it can translate\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tool": {
            "type": "string",
            "description": "The tool category to list tools and language pairs for",
            "enum": [
              "mt",
              "dictionary"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "tool"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_list_pairs_for_tool"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.word.from.from_lang.to.to_lang.word.get",
      "title": "transform.word.from.from_lang.to.to_lang.word.get",
      "description": "Fetches the dictionary meaning of a word from a language and displays\nit in the target language.\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "from_lang": {
            "type": "string",
            "description": "The source language code"
          },
          "to_lang": {
            "type": "string",
            "description": "The target language code"
          },
          "word": {
            "type": "string",
            "description": "The word to lookup"
          }
        },
        "additionalProperties": false,
        "required": [
          "from_lang",
          "to_lang",
          "word"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_dict"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    },
    {
      "id": "transform.word.from.from_lang.to.to_lang.word.provider.get",
      "title": "transform.word.from.from_lang.to.to_lang.word.provider.get",
      "description": "Fetches the dictionary meaning of a word from a language and displays\nit in the target language.\n\nStability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "from_lang": {
            "type": "string",
            "description": "The source language code"
          },
          "to_lang": {
            "type": "string",
            "description": "The target language code"
          },
          "word": {
            "type": "string",
            "description": "The word to lookup"
          },
          "provider": {
            "type": "string",
            "description": "The dictionary provider id",
            "enum": [
              "JsonDict",
              "Dictd"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "from_lang",
          "to_lang",
          "word",
          "provider"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/cx_dict"
      },
      "security": {
        "wikimedia": {
          "integration": "wikimedia"
        }
      }
    }
  ],
  "tags": [
    "media"
  ]
}