{
  "id": "myspace",
  "title": "MySpace",
  "description": "Create apps and games within the MySpace platform. Monetize through advertising and virtual goods.",
  "security": {},
  "logo": {
    "url": "http://datafire-logos.s3-website-us-west-2.amazonaws.com/myspace.png"
  },
  "tags": [],
  "actions": [
    {
      "id": "1.0.statusmoodcomments.personId._self.statusId.post",
      "title": "1.0.statusmoodcomments.personId._self.statusId.post",
      "description": "Posts a comment to a status.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "statusId": {
            "type": "string",
            "description": "Specifies which status or mood to post a comment for."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "statusId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId.selector.friendId.history.get",
      "title": "1.0.statusmood.personId.selector.friendId.history.get",
      "description": "Returns History Friend.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "friendId": {
            "type": "string",
            "description": "Is the same as {personId}, but for the person's friend."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "friendId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId.selector.friendId.get",
      "title": "1.0.statusmood.personId.selector.friendId.get",
      "description": "Returns a status for Friend.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "friendId": {
            "type": "string",
            "description": "Is the same as {personId}, but for the person's friend."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "friendId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId.selector.history.get",
      "title": "1.0.statusmood.personId.selector.history.get",
      "description": "Returns History User.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId.selector.put",
      "title": "1.0.statusmood.personId.selector.put",
      "description": "Updates a status for User.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId.selector.get",
      "title": "1.0.statusmood.personId.selector.get",
      "description": "Returns a status for User.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId._supportedMood.moodId.put",
      "title": "1.0.statusmood.personId._supportedMood.moodId.put",
      "description": "Updates a mood.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "moodId": {
            "type": "integer",
            "description": "The integer value of the specific mood that you want to retrieve data for."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "moodId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId._supportedMood.moodId.get",
      "title": "1.0.statusmood.personId._supportedMood.moodId.get",
      "description": "Retrieves a mood.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "moodId": {
            "type": "integer",
            "description": "The integer value of the specific mood that you want to retrieve data for."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "moodId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId._supportedMood.post",
      "title": "1.0.statusmood.personId._supportedMood.post",
      "description": "Adds a mood.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.statusmood.personId._supportedMood.get",
      "title": "1.0.statusmood.personId._supportedMood.get",
      "description": "Retrieves all supported moods.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported."
          },
          "filterBy": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterOp": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "filterValue": {
            "type": "string",
            "description": "See: http://wiki.developer.myspace.com/index.php?title=Status_and_Mood_API#Filtering_Results"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaitemcomments.personId._self.albumId.mediaItemId.get",
      "title": "1.0.mediaitemcomments.personId._self.albumId.mediaItemId.get",
      "description": "Retrieves item comments from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album from the group identified by {selector} should be returned."
          },
          "mediaItemId": {
            "type": "string",
            "description": "Indicates which single media item from the album identified by {albumId} should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "albumId",
          "mediaItemId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._videos._supportedcategories.categoryId.get",
      "title": "1.0.mediaItems.personId._videos._supportedcategories.categoryId.get",
      "description": "Retrieves videos for Category.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "categoryId": {
            "type": "string",
            "description": "Indicates the video category about which you want to retrieve data."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "categoryId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._videos._supportedcategories.get",
      "title": "1.0.mediaItems.personId._videos._supportedcategories.get",
      "description": "Retrieves supported categories.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self._videos.mediaItemId.put",
      "title": "1.0.mediaItems.personId._self._videos.mediaItemId.put",
      "description": "Updates an video.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "mediaItemId": {
            "type": "string",
            "description": "Indicates which single media item should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "mediaItemId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self._videos.mediaItemId.get",
      "title": "1.0.mediaItems.personId._self._videos.mediaItemId.get",
      "description": "Retrieves a video.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "mediaItemId": {
            "type": "string",
            "description": "Indicates which single media item should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "mediaItemId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self._videos.post",
      "title": "1.0.mediaItems.personId._self._videos.post",
      "description": "Adds videos from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self._videos.get",
      "title": "1.0.mediaItems.personId._self._videos.get",
      "description": "Retrieves all the videos.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self.albumId.mediaItemId.put",
      "title": "1.0.mediaItems.personId._self.albumId.mediaItemId.put",
      "description": "Updates an item from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album from the group identified by {selector} should be returned."
          },
          "mediaItemId": {
            "type": "string",
            "description": "Indicates which single media item from the album identified by {albumId} should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "albumId",
          "mediaItemId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self.albumId.mediaItemId.get",
      "title": "1.0.mediaItems.personId._self.albumId.mediaItemId.get",
      "description": "Retrieves an item from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album from the group identified by {selector} should be returned."
          },
          "mediaItemId": {
            "type": "string",
            "description": "Indicates which single media item from the album identified by {albumId} should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "albumId",
          "mediaItemId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self.albumId.post",
      "title": "1.0.mediaItems.personId._self.albumId.post",
      "description": "Adds items from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album from the group identified by {selector} should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "albumId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems.personId._self.albumId.get",
      "title": "1.0.mediaItems.personId._self.albumId.get",
      "description": "Retrieves items from a specified album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album from the group identified by {selector} should be returned."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "albumId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.mediaItems._supportedFields.get",
      "title": "1.0.mediaItems._supportedFields.get",
      "description": "Retrieves all supported fields.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold fields are always returned.\nalbumId, created, description, duration, id, language, mimeType, msMediaItemUri, msPrivacyLevel, \nnumComments, numViews, numVotes, rating, tags, thumbnailUrl, title, type, url \n@all (a special value that tells the REST endpoint to send back all fields for the MediaItem.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Media item is private.\nfriendsonly - Media item is visible to friends.\neveryone - Media item is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription._all.delete",
      "title": "stream.subscription._all.delete",
      "description": "Deletes all subscriptions.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription._all.get",
      "title": "stream.subscription._all.get",
      "description": "Retrieves all subscriptions.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription.subscriptionId.delete",
      "title": "stream.subscription.subscriptionId.delete",
      "description": "Deletes a subscription.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "The subscription's identifier."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "subscriptionId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription.subscriptionId.put",
      "title": "stream.subscription.subscriptionId.put",
      "description": "Updates a subscription.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "subscriptionId": {
            "type": "integer",
            "description": "The subscription's identifier."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "subscriptionId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription.subscriptionId.get",
      "title": "stream.subscription.subscriptionId.get",
      "description": "Retrieves a subscription.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "integer",
            "description": "The subscription's identifier."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "subscriptionId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "stream.subscription.post",
      "title": "stream.subscription.post",
      "description": "Creates a subscription.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "opensearch.videos.get",
      "title": "opensearch.videos.get",
      "description": "Returns search results for videos.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "searchTerms": {
            "type": "string",
            "description": "Free form search terms or query words"
          },
          "count": {
            "type": "integer",
            "description": "Number of items to return."
          },
          "culture": {
            "type": "string",
            "description": "The culture context of the search. Default is en-us."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json"
            ]
          },
          "startPage": {
            "type": "integer",
            "description": "Which page to start at for the results."
          },
          "tag": {
            "type": "integer",
            "description": "Determine if searching on tags, as opposed to contents. To enable tag search, set to 1."
          },
          "videoMode": {
            "type": "integer",
            "description": "Search for specific video types. Two allowed values are videoMode=1 (music videos) or videoMode=2 (official).",
            "enum": [
              "1",
              "2"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "searchTerms"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "opensearch.images.get",
      "title": "opensearch.images.get",
      "description": "Returns search results for images.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "searchTerms": {
            "type": "string",
            "description": "Free form search terms or query words"
          },
          "count": {
            "type": "integer",
            "description": "Number of items to return."
          },
          "culture": {
            "type": "string",
            "description": "The culture context of the search. Default is en-us."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "sortBy": {
            "type": "string",
            "description": "How to sort the images. Default is all."
          },
          "sortOrder": {
            "type": "string",
            "description": "Indicates whether to sort ascending or descending. Default is descending."
          },
          "startPage": {
            "type": "integer",
            "description": "Which page to start at for the results."
          }
        },
        "additionalProperties": false,
        "required": [
          "searchTerms"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "opensearch.people.get",
      "title": "opensearch.people.get",
      "description": "Returns search results for people.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "searchTerms": {
            "type": "string",
            "description": "Free form search terms or query words"
          },
          "count": {
            "type": "integer",
            "description": "Number of items to return."
          },
          "countryCode": {
            "type": "string",
            "description": "Country code to search with. Can be used instead of culture."
          },
          "culture": {
            "type": "string",
            "description": "The culture context of the search. Default is en-us."
          },
          "distance": {
            "type": "integer",
            "description": "Distance away from location to return results. Default is in miles, but depending on culture specified, it can be in kilometers."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "gender": {
            "type": "string",
            "description": "The gender to filter on. Default is both."
          },
          "hasPhoto": {
            "type": "string",
            "description": "Filter for only those who have a photo. Default those with or without a photo."
          },
          "latitude": {
            "type": "integer",
            "description": "Geographic latitude. Required to be combined with longitude and not combined with location field."
          },
          "location": {
            "type": "string",
            "description": "The location field, such as city, state and/or country."
          },
          "longitude": {
            "type": "integer",
            "description": "Geographic longitude. Required to be combined with latitude and not combined with location field."
          },
          "minAge": {
            "type": "integer",
            "description": "Minimum age for returned people. Same functionality as the MySpace website search."
          },
          "maxAge": {
            "type": "integer",
            "description": "Maximum age for returned people. Same functionality as the MySpace website search."
          },
          "searchBy": {
            "type": "string",
            "description": "Which field the search should go through. Default is all of the fields. (yomi is only available to ja-jp culture)."
          },
          "startPage": {
            "type": "integer",
            "description": "Which page to start at for the results."
          }
        },
        "additionalProperties": false,
        "required": [
          "searchTerms"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.profilecomments.personId._self.get",
      "title": "1.0.profilecomments.personId._self.get",
      "description": "Retrieves profile comments.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.people.personId.selector.friendId.get",
      "title": "1.0.people.personId.selector.friendId.get",
      "description": "Retrieves friend data.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends",
              "groupId"
            ]
          },
          "friendId": {
            "type": "string",
            "description": "Is the same as {personId}, but for the person's friend."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold are default values.\naboutMe, age, birthday, bodyType, children, currentLocation, dateofbirth, displayname,drinker, ethnicity, gender, hasapp, heroes, id, interests, jobinterests, jobs, lookingFor,movies, mslargeImage, msmediumimage, msstatusmood, msusertype, mszodiacsign, music, name, nickname, networkPresence, organizations, photos, profilesong,profileurl, relationshipStatus, religion, sexualOrientation, smoker, status, thumbnailUrl, tvshows, urls, userappdata (See documentation on App_Data endpoints), utcOffset, \n@all (a special value that tells the REST endpoint to send back all fields for the person.)"
          },
          "filterBy": {
            "type": "string",
            "description": "@friends, hasapp, @topfriends, @toponlinefriends,\tnetworkpresence.\nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "filterOp": {
            "type": "string",
            "description": "contains, equals\nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "filterValue": {
            "type": "string",
            "description": "<userId>, online, true|false \nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector",
          "friendId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.people.personId.selector.get",
      "title": "1.0.people.personId.selector.get",
      "description": "Retrieves user data.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends",
              "groupId"
            ]
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold are default values.\naboutMe, age, birthday, bodyType, children, currentLocation, dateofbirth, displayname,drinker, ethnicity, gender, hasapp, heroes, id, interests, jobinterests, jobs, lookingFor,movies, mslargeImage, msmediumimage, msstatusmood, msusertype, mszodiacsign, music, name, nickname, networkPresence, organizations, photos, profilesong,profileurl, relationshipStatus, religion, sexualOrientation, smoker, status, thumbnailUrl, tvshows, urls, userappdata (See documentation on App_Data endpoints), utcOffset, \n@all (a special value that tells the REST endpoint to send back all fields for the person.)"
          },
          "filterBy": {
            "type": "string",
            "description": "@friends, hasapp, @topfriends, @toponlinefriends,\tnetworkpresence.\nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "filterOp": {
            "type": "string",
            "description": "contains, equals\nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "filterValue": {
            "type": "string",
            "description": "<userId>, online, true|false \nSee: http://wiki.developer.myspace.com/index.php?title=People_API#Filters_Supported_by_People_Endpoints"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.people._supportedFields.get",
      "title": "1.0.people._supportedFields.get",
      "description": "Retrieves all supported fields.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold are default values.\naboutMe, age, birthday, bodyType, children, currentLocation, dateofbirth, displayname,drinker, ethnicity, gender, hasapp, heroes, id, interests, jobinterests, jobs, lookingFor,movies, mslargeImage, msmediumimage, msstatusmood, msusertype, mszodiacsign, music, name, nickname, networkPresence, organizations, photos, profilesong,profileurl, relationshipStatus, religion, sexualOrientation, smoker, status, thumbnailUrl, tvshows, urls, userappdata (See documentation on App_Data endpoints), utcOffset, \n@all (a special value that tells the REST endpoint to send back all fields for the person.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.appdata.personId.selector.appId.delete",
      "title": "1.0.appdata.personId.selector.appId.delete",
      "description": "Deletes a specified user's application data.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends",
              "groupId"
            ]
          },
          "appId": {
            "type": "string",
            "description": "The application's ID associated with the OAuth ConsumerKey/ConsumerSecret pair."
          },
          "fields": {
            "type": "string",
            "description": "The fields correspond to keys in the application data. One uses fields to only retrieve specific keys. If the request omits fields, all application data per user will be returned."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector",
          "appId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.appdata.personId.selector.appId.post",
      "title": "1.0.appdata.personId.selector.appId.post",
      "description": "Adds or updates a specified user's application data.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends",
              "groupId"
            ]
          },
          "appId": {
            "type": "string",
            "description": "The application's ID associated with the OAuth ConsumerKey/ConsumerSecret pair."
          },
          "fields": {
            "type": "string",
            "description": "The fields correspond to keys in the application data. One uses fields to only retrieve specific keys. If the request omits fields, all application data per user will be returned."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "selector",
          "appId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.appdata.personId.selector.appId.get",
      "title": "1.0.appdata.personId.selector.appId.get",
      "description": "Retrieves all application data for a specified user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends",
              "groupId"
            ]
          },
          "appId": {
            "type": "string",
            "description": "The application's ID associated with the OAuth ConsumerKey/ConsumerSecret pair."
          },
          "fields": {
            "type": "string",
            "description": "The fields correspond to keys in the application data. One uses fields to only retrieve specific keys. If the request omits fields, all application data per user will be returned."
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector",
          "appId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.notifications.personId._self.post",
      "title": "1.0.notifications.personId._self.post",
      "description": "Sends notification.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.groups.personId.get",
      "title": "1.0.groups.personId.get",
      "description": "Retrieves the current user's groups.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported: id and title."
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Album is private.\nfriendsonly - Album is visible to friends.\neveryone - Album is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.groups._supportedFields.get",
      "title": "1.0.groups._supportedFields.get",
      "description": "Retrieves all supported fields.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported: id and title."
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Album is private.\nfriendsonly - Album is visible to friends.\neveryone - Album is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.albums.personId._self.albumId.put",
      "title": "1.0.albums.personId._self.albumId.put",
      "description": "Update an Album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album should be returned."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId",
          "albumId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.albums.personId._self.albumId.get",
      "title": "1.0.albums.personId._self.albumId.get",
      "description": "Retrieves an album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "albumId": {
            "type": "string",
            "description": "Indicates which single album should be returned."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "albumId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.albums.personId._self.post",
      "title": "1.0.albums.personId._self.post",
      "description": "Adding an Album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.albums.personId._self.get",
      "title": "1.0.albums.personId._self.get",
      "description": "Retrieves the current user's albums.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold are default values.\n caption, id, location, mediaItemCount, mediaType, ownerId, thumbnailUrl \n @all (a special value that tells the REST endpoint to send back all fields for the album.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Album is private.\nfriendsonly - Album is visible to friends.\neveryone - Album is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.albums._supportedFields.get",
      "title": "1.0.albums._supportedFields.get",
      "description": "Retrieves all supported fields.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported. Bold are default values.\n caption, id, location, mediaItemCount, mediaType, ownerId, thumbnailUrl \n @all (a special value that tells the REST endpoint to send back all fields for the album.)"
          },
          "msPrivacyLevel": {
            "type": "string",
            "description": "MySpace specific field. May be one of the following values:\nme - Album is private.\nfriendsonly - Album is visible to friends.\neveryone - Album is visible to everyone.",
            "enum": [
              "me",
              "friendsonly",
              "everyone"
            ]
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities.personId.selector.appId.get",
      "title": "1.0.activities.personId.selector.appId.get",
      "description": "Retrieves activities created by an application.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          },
          "appId": {
            "type": "string",
            "description": "The application's ID associated with the OAuth ConsumerKey/ConsumerSecret pair."
          },
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported.\nappid, body, externalid, id, mediaitems, postedtime, streamfaviconurl, title, titleid, userid, \n@all (a special value that tells the REST endpoint to send back all fields for the activity.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "updatedSince": {
            "type": "string",
            "description": "Indicates the date before which no activities should be returned."
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector",
          "appId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities._supportedObjectTypes.get",
      "title": "1.0.activities._supportedObjectTypes.get",
      "description": "Retrieves all supported object types.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported.\nappid, body, externalid, id, mediaitems, postedtime, streamfaviconurl, title, titleid, userid, \n@all (a special value that tells the REST endpoint to send back all fields for the activity.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "updatedSince": {
            "type": "string",
            "description": "Indicates the date before which no activities should be returned."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities._supportedVerbs.get",
      "title": "1.0.activities._supportedVerbs.get",
      "description": "Retrieves all supported verbs.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported.\nappid, body, externalid, id, mediaitems, postedtime, streamfaviconurl, title, titleid, userid, \n@all (a special value that tells the REST endpoint to send back all fields for the activity.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "updatedSince": {
            "type": "string",
            "description": "Indicates the date before which no activities should be returned."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities._supportedFields.get",
      "title": "1.0.activities._supportedFields.get",
      "description": "Retrieves all supported fields.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported.\nappid, body, externalid, id, mediaitems, postedtime, streamfaviconurl, title, titleid, userid, \n@all (a special value that tells the REST endpoint to send back all fields for the activity.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "updatedSince": {
            "type": "string",
            "description": "Indicates the date before which no activities should be returned."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities.personId._self.post",
      "title": "1.0.activities.personId._self.post",
      "description": "Creates an activity for the user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Content-Type": {
            "type": "string",
            "description": "Specifies Content Type."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          }
        },
        "additionalProperties": false,
        "required": [
          "Content-Type",
          "personId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "1.0.activities.personId.selector.get",
      "title": "1.0.activities.personId.selector.get",
      "description": "Retrieves all activities for the user or for the friends of the viewer.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "string",
            "description": "Only returns the nearest multiple of 3 compared to the original value."
          },
          "fields": {
            "type": "string",
            "description": "The following field names are supported.\nappid, body, externalid, id, mediaitems, postedtime, streamfaviconurl, title, titleid, userid, \n@all (a special value that tells the REST endpoint to send back all fields for the activity.)"
          },
          "format": {
            "type": "string",
            "description": "Determines the format of the response.",
            "enum": [
              "json",
              "xml"
            ]
          },
          "startIndex": {
            "type": "string",
            "description": "Indicates the index of the first item to retrieve from the query set."
          },
          "updatedSince": {
            "type": "string",
            "description": "Indicates the date before which no activities should be returned."
          },
          "personId": {
            "type": "string",
            "description": "The person's identifier."
          },
          "selector": {
            "type": "string",
            "description": "Indicates which set of individuals to query for activities. @friends and @all currently can be used interchangeably.",
            "enum": [
              "@self",
              "@all",
              "@friends"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "personId",
          "selector"
        ]
      },
      "outputSchema": {}
    }
  ]
}