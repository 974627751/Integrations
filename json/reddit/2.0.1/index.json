{
  "id": "reddit",
  "title": "Reddit",
  "description": "Reddit API",
  "security": {
    "reddit": {
      "integration": "reddit",
      "fields": {
        "access_token": "An OAuth access token",
        "refresh_token": "An OAuth refresh token (optional)",
        "client_id": "An OAuth client ID (optional)",
        "client_secret": "An OAuth client secret (optional)",
        "redirect_uri": "The callback URL for your application"
      },
      "oauth": {
        "scopes": {
          "flair": "Select my subreddit flair. Change link flair on my submissions.",
          "history": "Access my voting history and comments or submissions I've saved or hidden.",
          "modself": "Accept invitations to moderate a subreddit. Remove myself as a moderator or contributor of subreddits I moderate or contribute to.",
          "modwiki": "Change editors and visibility of wiki pages in subreddits I moderate.",
          "edit": "Edit and delete my comments and submissions.",
          "modtraffic": "Access traffic stats in subreddits I moderate.",
          "account": "Update preferences and related account information. Will not have access to your email or password.",
          "livemanage": "Manage settings and contributors of live threads I contribute to.",
          "identity": "Access my reddit username and signup date.",
          "report": "Report content for rules violations. Hide &amp; show individual submissions.",
          "privatemessages": "Access my inbox and send private messages to other users.",
          "read": "Access posts and comments through my account.",
          "modothers": "Invite or remove other moderators from subreddits I moderate.",
          "save": "Save and unsave comments and submissions.",
          "modflair": "Manage and assign flair in subreddits I moderate.",
          "modposts": "Approve, remove, mark nsfw, and distinguish content in subreddits I moderate.",
          "modlog": "Access the moderation log in subreddits I moderate.",
          "submit": "Submit links and comments from my account.",
          "mysubreddits": "Access the list of subreddits I moderate, contribute to, and subscribe to.",
          "vote": "Submit and change my votes on comments and submissions.",
          "wikiedit": "Edit wiki pages on my behalf",
          "wikiread": "Read wiki pages through my account",
          "subscribe": "Manage my subreddit subscriptions. Manage \"friends\" - users whose content I follow.",
          "modconfig": "Manage the configuration, sidebar, and CSS of subreddits I moderate.",
          "modcontributors": "Add/remove users to approved submitter lists and ban/unban or mute/unmute users from subreddits I moderate.",
          "creddits": "Spend my reddit gold creddits on giving gold to other users."
        },
        "flow": "application",
        "type": "oauth2"
      }
    }
  },
  "logo": {
    "url": "http://datafire-logos.s3-website-us-west-2.amazonaws.com/reddit.svg"
  },
  "tags": [],
  "actions": [
    {
      "id": "oauthCallback",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "code": {
            "title": "code",
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "outputSchema": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "oauthRefresh",
      "title": "",
      "description": "",
      "inputSchema": {},
      "outputSchema": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "sort.get",
      "title": "sort.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "t": {
            "type": "string",
            "description": "one of (hour, day, week, month, year, all)"
          },
          "sort": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.page.get",
      "title": "wiki.page.get",
      "description": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "v": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "v2": {
            "type": "string",
            "description": "a wiki revision ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.settings.page.post",
      "title": "wiki.settings.page.post",
      "description": "Update the permissions and visibility of wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "listed": {
            "type": "string",
            "description": "boolean value"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "permlevel": {
            "type": "string",
            "description": "an integer"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.settings.page.get",
      "title": "wiki.settings.page.get",
      "description": "Retrieve the current permission settings for page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.revisions.page.get",
      "title": "wiki.revisions.page.get",
      "description": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.revisions.get",
      "title": "wiki.revisions.get",
      "description": "Retrieve a list of recently changed wiki pages in this subreddit",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.pages.get",
      "title": "wiki.pages.get",
      "description": "Retrieve a list of wiki pages in this subreddit",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "wiki.discussions.page.get",
      "title": "wiki.discussions.page.get",
      "description": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "user.username.where.get",
      "title": "user.username.where.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "one of (given)"
          },
          "sort": {
            "type": "string",
            "description": "one of (hot, new, top, controversial)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "t": {
            "type": "string",
            "description": "one of (hour, day, week, month, year, all)"
          },
          "username": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "user.username.about.get",
      "title": "user.username.about.get",
      "description": "Return information about the user, including karma and gold status.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "the name of an existing user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "subreddits.where.get",
      "title": "subreddits.where.get",
      "description": "Get all subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed.  popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the subreddits\nbased on their creation date, newest first.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "subreddits.search.get",
      "title": "subreddits.search.get",
      "description": "Search subreddits by title and description.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "q": {
            "type": "string",
            "description": "a search query"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sort": {
            "type": "string",
            "description": "one of (relevance, activity)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "subreddits.mine.where.get",
      "title": "subreddits.mine.where.get",
      "description": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "stylesheet.get",
      "title": "stylesheet.get",
      "description": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "sticky.get",
      "title": "sticky.get",
      "description": "Redirect to one of the posts stickied in the current subreddit\n\nThe \"num\" argument can be used to select a specific sticky, and will\ndefault to 1 (the top sticky) if not specified.\nWill 404 if there is not currently a sticky post in this subreddit.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "num": {
            "type": "string",
            "description": "an integer between 1 and 2 (default: 1)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "sidebar.get",
      "title": "sidebar.get",
      "description": "Get the sidebar for the current subreddit",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "search.get",
      "title": "search.get",
      "description": "Search links page.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "include_facets": {
            "type": "string",
            "description": "boolean value"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "q": {
            "type": "string",
            "description": "a string no longer than 512 characters"
          },
          "restrict_sr": {
            "type": "string",
            "description": "boolean value"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sort": {
            "type": "string",
            "description": "one of (relevance, hot, top, new, comments)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "syntax": {
            "type": "string",
            "description": "one of (cloudsearch, lucene, plain)"
          },
          "t": {
            "type": "string",
            "description": "one of (hour, day, week, month, year, all)"
          },
          "type": {
            "type": "string",
            "description": "(optional) comma-delimited list of result types (sr, link)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "rules.get",
      "title": "rules.get",
      "description": "Get the rules for the current subreddit",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "related.article.get",
      "title": "related.article.get",
      "description": "Related page: performs a search using title of article as\nthe search query.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "article": {
            "type": "string",
            "description": "The base 36 ID of a Link"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "random.get",
      "title": "random.get",
      "description": "The Serendipity button",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.sort.get",
      "title": "r.subreddit.sort.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "t": {
            "type": "string",
            "description": "one of (hour, day, week, month, year, all)"
          },
          "subreddit": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.page.get",
      "title": "r.subreddit.wiki.page.get",
      "description": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "v": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "v2": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.settings.page.post",
      "title": "r.subreddit.wiki.settings.page.post",
      "description": "Update the permissions and visibility of wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "listed": {
            "type": "string",
            "description": "boolean value"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "permlevel": {
            "type": "string",
            "description": "an integer"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.settings.page.get",
      "title": "r.subreddit.wiki.settings.page.get",
      "description": "Retrieve the current permission settings for page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.revisions.page.get",
      "title": "r.subreddit.wiki.revisions.page.get",
      "description": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.revisions.get",
      "title": "r.subreddit.wiki.revisions.get",
      "description": "Retrieve a list of recently changed wiki pages in this subreddit",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.pages.get",
      "title": "r.subreddit.wiki.pages.get",
      "description": "Retrieve a list of wiki pages in this subreddit",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.wiki.discussions.page.get",
      "title": "r.subreddit.wiki.discussions.page.get",
      "description": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.stylesheet.get",
      "title": "r.subreddit.stylesheet.get",
      "description": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.sticky.get",
      "title": "r.subreddit.sticky.get",
      "description": "Redirect to one of the posts stickied in the current subreddit\n\nThe \"num\" argument can be used to select a specific sticky, and will\ndefault to 1 (the top sticky) if not specified.\nWill 404 if there is not currently a sticky post in this subreddit.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "num": {
            "type": "string",
            "description": "an integer between 1 and 2 (default: 1)"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.sidebar.get",
      "title": "r.subreddit.sidebar.get",
      "description": "Get the sidebar for the current subreddit",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.search.get",
      "title": "r.subreddit.search.get",
      "description": "Search links page.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "include_facets": {
            "type": "string",
            "description": "boolean value"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "q": {
            "type": "string",
            "description": "a string no longer than 512 characters"
          },
          "restrict_sr": {
            "type": "string",
            "description": "boolean value"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sort": {
            "type": "string",
            "description": "one of (relevance, hot, top, new, comments)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "syntax": {
            "type": "string",
            "description": "one of (cloudsearch, lucene, plain)"
          },
          "t": {
            "type": "string",
            "description": "one of (hour, day, week, month, year, all)"
          },
          "type": {
            "type": "string",
            "description": "(optional) comma-delimited list of result types (sr, link)"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.rules.get",
      "title": "r.subreddit.rules.get",
      "description": "Get the rules for the current subreddit",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.random.get",
      "title": "r.subreddit.random.get",
      "description": "The Serendipity button",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.new.get",
      "title": "r.subreddit.new.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.hot.get",
      "title": "r.subreddit.hot.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.comments.article.get",
      "title": "r.subreddit.comments.article.get",
      "description": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "article": {
            "type": "string",
            "description": "ID36 of a link"
          },
          "comment": {
            "type": "string",
            "description": "(optional) ID36 of a comment"
          },
          "context": {
            "type": "string",
            "description": "an integer between 0 and 8"
          },
          "depth": {
            "type": "string",
            "description": "(optional) an integer"
          },
          "limit": {
            "type": "string",
            "description": "(optional) an integer"
          },
          "showedits": {
            "type": "string",
            "description": "boolean value"
          },
          "showmore": {
            "type": "string",
            "description": "boolean value"
          },
          "sort": {
            "type": "string",
            "description": "one of (confidence, top, new, hot, controversial, old, random, qa)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.wiki.revert.post",
      "title": "r.subreddit.api.wiki.revert.post",
      "description": "Revert a wiki page to revision",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "revision": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.wiki.hide.post",
      "title": "r.subreddit.api.wiki.hide.post",
      "description": "Toggle the public visibility of a wiki page revision",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "revision": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.wiki.edit.post",
      "title": "r.subreddit.api.wiki.edit.post",
      "description": "Edit a wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing page or a new page to create"
          },
          "previous": {
            "type": "string",
            "description": "the starting point revision for this edit"
          },
          "reason": {
            "type": "string",
            "description": "a string up to 256 characters long, consisting of printable characters."
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.wiki.alloweditor.act.post",
      "title": "r.subreddit.api.wiki.alloweditor.act.post",
      "description": "Allow/deny username to edit this wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "act": {
            "type": "string",
            "description": "one of (del, add)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "username": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.upload_sr_img.post",
      "title": "r.subreddit.api.upload_sr_img.post",
      "description": "Add or replace a subreddit image, custom header logo, custom mobile\nicon, or custom mobile banner.\n\n\nIf the upload_type value is img, an image for use in the\nsubreddit stylesheet is uploaded with the name specified in name.\nIf the upload_type value is header then the image uploaded will\nbe the subreddit's new logo and name will be ignored.\nIf the upload_type value is icon then the image uploaded will be\nthe subreddit's new mobile icon and name will be ignored.\nIf the upload_type value is banner then the image uploaded will\nbe the subreddit's new mobile banner and name will be ignored.\n\n\nFor backwards compatibility, if upload_type is not specified, the\nheader field will be used instead:\n\n\nIf the header field has value 0, then upload_type is img.\nIf the header field has value 1, then upload_type is header.\n\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img,\n/api/delete_sr_header,\n/api/delete_sr_icon, and\n/api/delete_sr_banner.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "file upload with maximum size of 500 KiB"
          },
          "formid": {
            "type": "string",
            "description": "(optional) can be ignored"
          },
          "header": {
            "type": "string",
            "description": "an integer between 0 and 1"
          },
          "img_type": {
            "type": "string",
            "description": "one of png or jpg (default: png)"
          },
          "name": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "upload_type": {
            "type": "string",
            "description": "one of (img, header, icon, banner)"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.unfriend.post",
      "title": "r.subreddit.api.unfriend.post",
      "description": "Remove a relationship between a user and another user or subreddit\n\nThe user can either be passed in by name (nuser)\nor by fullname (iuser).  If type is friend or enemy,\n'container' MUST be the current user's fullname;\nfor other types, the subreddit must be set\nvia URL (e.g., /r/funny/api/unfriend)\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: modothers\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: privatemessages\n\n\nComplement to POST_friend",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "container": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "type": {
            "type": "string",
            "description": "one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.subreddit_stylesheet.post",
      "title": "r.subreddit.api.subreddit_stylesheet.post",
      "description": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "op": {
            "type": "string",
            "description": "one of (save, preview)"
          },
          "reason": {
            "type": "string",
            "description": "a string up to 256 characters long, consisting of printable characters."
          },
          "stylesheet_contents": {
            "type": "string",
            "description": "the new stylesheet content"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.submit_text.get",
      "title": "r.subreddit.api.submit_text.get",
      "description": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.setpermissions.post",
      "title": "r.subreddit.api.setpermissions.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "permissions": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.setflairenabled.post",
      "title": "r.subreddit.api.setflairenabled.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.selectflair.post",
      "title": "r.subreddit.api.selectflair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_template_id": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.info.get",
      "title": "r.subreddit.api.info.get",
      "description": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "url": {
            "type": "string",
            "description": "a valid URL"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.friend.post",
      "title": "r.subreddit.api.friend.post",
      "description": "Create a relationship between a user and another user or subreddit\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: Use \"moderator_invite\"\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: Use /api/block\n\n\nComplement to POST_unfriend",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "ban_message": {
            "type": "string",
            "description": "raw markdown text"
          },
          "ban_reason": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "container": {
            "type": "string"
          },
          "duration": {
            "type": "string",
            "description": "an integer between 1 and 999"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "note": {
            "type": "string",
            "description": "a string no longer than 300 characters"
          },
          "permissions": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flairtemplate.post",
      "title": "r.subreddit.api.flairtemplate.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "css_class": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "flair_template_id": {
            "type": "string"
          },
          "flair_type": {
            "type": "string",
            "description": "one of (USER_FLAIR, LINK_FLAIR)"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "text_editable": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flairselector.post",
      "title": "r.subreddit.api.flairselector.post",
      "description": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe logged in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flairlist.get",
      "title": "r.subreddit.api.flairlist.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 1000)"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flaircsv.post",
      "title": "r.subreddit.api.flaircsv.post",
      "description": "Change the flair of multiple users in the same subreddit with a\nsingle API call.\n\nRequires a string 'flair_csv' which has up to 100 lines of the form\n'user,flairtext,cssclass' (Lines beyond the 100th are ignored).\n\nIf both cssclass and flairtext are the empty string for a given\nuser, instead clears that user's flair.\n\nReturns an array of objects indicating if each flair setting was \napplied, or a reason for the failure.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "flair_csv": {
            "type": "string",
            "description": "comma-seperated flair information"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flairconfig.post",
      "title": "r.subreddit.api.flairconfig.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "flair_position": {
            "type": "string",
            "description": "one of (left, right)"
          },
          "flair_self_assign_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "link_flair_position": {
            "type": "string",
            "description": "one of (`,left,right`)"
          },
          "link_flair_self_assign_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.flair.post",
      "title": "r.subreddit.api.flair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "css_class": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.deleteflairtemplate.post",
      "title": "r.subreddit.api.deleteflairtemplate.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_template_id": {
            "type": "string"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.deleteflair.post",
      "title": "r.subreddit.api.deleteflair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.delete_sr_img.post",
      "title": "r.subreddit.api.delete_sr_img.post",
      "description": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "img_name": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.delete_sr_icon.post",
      "title": "r.subreddit.api.delete_sr_icon.post",
      "description": "Remove the subreddit's custom mobile icon.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.delete_sr_header.post",
      "title": "r.subreddit.api.delete_sr_header.post",
      "description": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.delete_sr_banner.post",
      "title": "r.subreddit.api.delete_sr_banner.post",
      "description": "Remove the subreddit's custom mobile banner.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.clearflairtemplates.post",
      "title": "r.subreddit.api.clearflairtemplates.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_type": {
            "type": "string",
            "description": "one of (USER_FLAIR, LINK_FLAIR)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.api.accept_moderator_invite.post",
      "title": "r.subreddit.api.accept_moderator_invite.post",
      "description": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.about.where.get",
      "title": "r.subreddit.about.where.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "user": {
            "type": "string",
            "description": "A valid, existing reddit username"
          },
          "subreddit": {
            "type": "string"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.about.location.get",
      "title": "r.subreddit.about.location.get",
      "description": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "location": {
            "type": "string"
          },
          "only": {
            "type": "string",
            "description": "one of (links, comments)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.about.log.get",
      "title": "r.subreddit.about.log.get",
      "description": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 500)"
          },
          "mod": {
            "type": "string",
            "description": "(optional) a moderator filter"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "type": {
            "type": "string",
            "description": "one of (banuser, unbanuser, removelink, approvelink, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, muteuser, unmuteuser, createrule, editrule, deleterule)"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.about.edit.get",
      "title": "r.subreddit.about.edit.get",
      "description": "Get the current settings of a subreddit.\n\nIn the API, this returns the current settings of the subreddit as used\nby /api/site_admin.  On the HTML site, it will\ndisplay a form for editing the subreddit.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "created": {
            "type": "string",
            "description": "one of (true, false)"
          },
          "location": {
            "type": "string"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "r.subreddit.about.get",
      "title": "r.subreddit.about.get",
      "description": "Return information about the subreddit.\n\nData includes the subscriber count, description, and header image.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "prefs.where.get",
      "title": "prefs.where.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "new.get",
      "title": "new.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "message.where.get",
      "title": "message.where.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "mark": {
            "type": "string",
            "description": "one of (true, false)"
          },
          "mid": {
            "type": "string"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "live.thread.discussions.get",
      "title": "live.thread.discussions.get",
      "description": "Get a list of reddit submissions linking to this thread.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "live.thread.contributors.get",
      "title": "live.thread.contributors.get",
      "description": "Get a list of users that contribute to this thread.\n\nSee also: /api/live/thread/invite_contributor, and\n/api/live/thread/rm_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "live.thread.about.get",
      "title": "live.thread.about.get",
      "description": "Get some basic information about the live thread.\n\nSee also: /api/live/thread/edit.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "live.thread.get",
      "title": "live.thread.get",
      "description": "Get a list of updates posted in this thread.\n\nSee also: /api/live/thread/update.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
          },
          "before": {
            "type": "string",
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "is_embed": {
            "type": "string",
            "description": "(internal use only)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "stylesr": {
            "type": "string",
            "description": "subreddit name"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "hot.get",
      "title": "hot.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "duplicates.article.get",
      "title": "duplicates.article.get",
      "description": "Return a list of other submissions of the same URL\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "article": {
            "type": "string",
            "description": "The base 36 ID of a Link"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "comments.article.get",
      "title": "comments.article.get",
      "description": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "article": {
            "type": "string",
            "description": "ID36 of a link"
          },
          "comment": {
            "type": "string",
            "description": "(optional) ID36 of a comment"
          },
          "context": {
            "type": "string",
            "description": "an integer between 0 and 8"
          },
          "depth": {
            "type": "string",
            "description": "(optional) an integer"
          },
          "limit": {
            "type": "string",
            "description": "(optional) an integer"
          },
          "showedits": {
            "type": "string",
            "description": "boolean value"
          },
          "showmore": {
            "type": "string",
            "description": "boolean value"
          },
          "sort": {
            "type": "string",
            "description": "one of (confidence, top, new, hot, controversial, old, random, qa)"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "captcha.iden.get",
      "title": "captcha.iden.get",
      "description": "Request a CAPTCHA image given an iden.\n\nAn iden is given as the captcha field with a BAD_CAPTCHA\nerror, you should use this endpoint if you get a\nBAD_CAPTCHA error response.\n\nResponds with a 120x50 image/png which should be displayed\nto the user.\n\nThe user's response to the CAPTCHA should be sent as captcha\nalong with your request.\n\nTo request a new CAPTCHA,\nuse /api/new_captcha.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "iden": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "by_id.names.get",
      "title": "by_id.names.get",
      "description": "Get a listing of links by fullname.\n\nnames is a list of fullnames for links separated by commas or spaces.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "names": {
            "type": "string",
            "description": "A comma-separated list of link fullnames"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.subreddit_stylesheet.post",
      "title": "api.subreddit_stylesheet.post",
      "description": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "op": {
            "type": "string",
            "description": "one of (save, preview)"
          },
          "reason": {
            "type": "string",
            "description": "a string up to 256 characters long, consisting of printable characters."
          },
          "stylesheet_contents": {
            "type": "string",
            "description": "the new stylesheet content"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "subreddit": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.wiki.revert.post",
      "title": "api.wiki.revert.post",
      "description": "Revert a wiki page to revision",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "revision": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.wiki.hide.post",
      "title": "api.wiki.hide.post",
      "description": "Toggle the public visibility of a wiki page revision",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "revision": {
            "type": "string",
            "description": "a wiki revision ID"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.wiki.edit.post",
      "title": "api.wiki.edit.post",
      "description": "Edit a wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing page or a new page to create"
          },
          "previous": {
            "type": "string",
            "description": "the starting point revision for this edit"
          },
          "reason": {
            "type": "string",
            "description": "a string up to 256 characters long, consisting of printable characters."
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.wiki.alloweditor.act.post",
      "title": "api.wiki.alloweditor.act.post",
      "description": "Allow/deny username to edit this wiki page",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "act": {
            "type": "string",
            "description": "one of (del, add)"
          },
          "page": {
            "type": "string",
            "description": "the name of an existing wiki page"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "username": {
            "type": "string",
            "description": "the name of an existing user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.vote.post",
      "title": "api.vote.post",
      "description": "Cast a vote on a thing.\n\nid should be the fullname of the Link or Comment to vote on.\n\ndir indicates the direction of the vote. Voting 1 is an upvote,\n-1 is a downvote, and 0 is equivalent to \"un-voting\" by clicking\nagain on a highlighted arrow.\n\nNote: votes must be cast by humans. That is, API clients proxying a\nhuman's action one-for-one are OK, but bots deciding how to vote on\ncontent or amplifying a human's vote are not. See the reddit\nrules for more details on what constitutes vote cheating.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "dir": {
            "type": "string",
            "description": "vote direction. one of (1, 0, -1)"
          },
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.user.username.trophies.get",
      "title": "api.v1.user.username.trophies.get",
      "description": "Return a list of trophies for the a given user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A valid, existing reddit username"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.scopes.get",
      "title": "api.v1.scopes.get",
      "description": "Retrieve descriptions of reddit's OAuth2 scopes.\n\nIf no scopes are given, information on all scopes are returned.\n\nInvalid scope(s) will result in a 400 error with body that indicates\nthe invalid scope(s).",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "scopes": {
            "type": "string",
            "description": "(optional) An OAuth2 scope string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.trophies.get",
      "title": "api.v1.me.trophies.get",
      "description": "Return a list of trophies for the current user.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.prefs.patch",
      "title": "api.v1.me.prefs.patch",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "This": {
            "type": "string",
            "description": "{\n  \"beta\": boolean value,\n  \"clickgadget\": boolean value,\n  \"collapse_read_messages\": boolean value,\n  \"compress\": boolean value,\n  \"creddit_autorenew\": boolean value,\n  \"default_comment_sort\": one of (`confidence`, `old`, `top`, `qa`, `controversial`, `new`),\n  \"domain_details\": boolean value,\n  \"email_messages\": boolean value,\n  \"enable_default_themes\": boolean value,\n  \"hide_ads\": boolean value,\n  \"hide_downs\": boolean value,\n  \"hide_from_robots\": boolean value,\n  \"hide_locationbar\": boolean value,\n  \"hide_ups\": boolean value,\n  \"highlight_controversial\": boolean value,\n  \"highlight_new_comments\": boolean value,\n  \"ignore_suggested_sort\": boolean value,\n  \"label_nsfw\": boolean value,\n  \"lang\": a valid IETF language tag (underscore separated),\n  \"legacy_search\": boolean value,\n  \"mark_messages_read\": boolean value,\n  \"media\": one of (`on`, `off`, `subreddit`),\n  \"min_comment_score\": an integer between -100 and 100,\n  \"min_link_score\": an integer between -100 and 100,\n  \"monitor_mentions\": boolean value,\n  \"newwindow\": boolean value,\n  \"no_profanity\": boolean value,\n  \"num_comments\": an integer between 1 and 500,\n  \"numsites\": an integer between 1 and 100,\n  \"organic\": boolean value,\n  \"other_theme\": subreddit name,\n  \"over_18\": boolean value,\n  \"private_feeds\": boolean value,\n  \"public_votes\": boolean value,\n  \"research\": boolean value,\n  \"show_flair\": boolean value,\n  \"show_gold_expiration\": boolean value,\n  \"show_link_flair\": boolean value,\n  \"show_promote\": boolean value,\n  \"show_stylesheets\": boolean value,\n  \"show_trending\": boolean value,\n  \"store_visits\": boolean value,\n  \"theme_selector\": subreddit name,\n  \"threaded_messages\": boolean value,\n  \"threaded_modmail\": boolean value,\n  \"use_global_defaults\": boolean value,\n}"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.prefs.get",
      "title": "api.v1.me.prefs.get",
      "description": "Return the preference settings of the logged in user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "fields": {
            "type": "string",
            "description": "A comma-separated list of items from this set:\n\nthreaded_messages\nhide_downs\nemail_messages\nshow_link_flair\ncreddit_autorenew\nshow_trending\nprivate_feeds\nmonitor_mentions\nresearch\nignore_suggested_sort\nmedia\nclickgadget\nuse_global_defaults\nlabel_nsfw\ndomain_details\nshow_stylesheets\nhighlight_controversial\nno_profanity\ndefault_theme_sr\nlang\nhide_ups\nhide_from_robots\ncompress\nstore_visits\nthreaded_modmail\nbeta\nother_theme\nshow_gold_expiration\nover_18\nenable_default_themes\nshow_promote\nmin_comment_score\npublic_votes\norganic\ncollapse_read_messages\nshow_flair\nmark_messages_read\nhide_ads\nmin_link_score\nnewwindow\nnumsites\nlegacy_search\nnum_comments\nhighlight_new_comments\ndefault_comment_sort\nhide_locationbar"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.notifications.id.patch",
      "title": "api.v1.me.notifications.id.patch",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "This": {
            "type": "string",
            "description": "{\n  \"read\": boolean value,\n}"
          },
          "id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.notifications.get",
      "title": "api.v1.me.notifications.get",
      "description": "Get my notifications.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "count": {
            "type": "string",
            "description": "an integer between 0 and 1000 (default: 30)"
          },
          "end_date": {
            "type": "string"
          },
          "sort": {
            "type": "string",
            "description": "one of (new, old, None)"
          },
          "start_date": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.karma.get",
      "title": "api.v1.me.karma.get",
      "description": "Return a breakdown of subreddit karma.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.friends.username.put",
      "title": "api.v1.me.friends.username.put",
      "description": "Create or update a \"friend\" relationship.\n\nThis operation is idempotent. It can be used to add a new\nfriend, or update an existing friend (e.g., add/change the\nnote on that friend)",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "This": {
            "type": "string",
            "description": "{\n  \"name\": A valid, existing reddit username,\n  \"note\": a string no longer than 300 characters,\n}"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.friends.username.get",
      "title": "api.v1.me.friends.username.get",
      "description": "Get information about a specific 'friend', such as notes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A valid, existing reddit username"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.friends.username.delete",
      "title": "api.v1.me.friends.username.delete",
      "description": "Stop being friends with a user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A valid, existing reddit username"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.me.get",
      "title": "api.v1.me.get",
      "description": "Returns the identity of the user currently authenticated via OAuth.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.gold.give.username.post",
      "title": "api.v1.gold.give.username.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "months": {
            "type": "string",
            "description": "an integer between 1 and 36"
          },
          "username": {
            "type": "string",
            "description": "A valid, existing reddit username"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.v1.gold.gild.fullname.post",
      "title": "api.v1.gold.gild.fullname.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "fullname": {
            "type": "string",
            "description": "fullname of a thing"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.username_available.get",
      "title": "api.username_available.get",
      "description": "Check whether a username is available for registration.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "user": {
            "type": "string",
            "description": "a valid, unused, username"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.upload_sr_img.post",
      "title": "api.upload_sr_img.post",
      "description": "Add or replace a subreddit image, custom header logo, custom mobile\nicon, or custom mobile banner.\n\n\nIf the upload_type value is img, an image for use in the\nsubreddit stylesheet is uploaded with the name specified in name.\nIf the upload_type value is header then the image uploaded will\nbe the subreddit's new logo and name will be ignored.\nIf the upload_type value is icon then the image uploaded will be\nthe subreddit's new mobile icon and name will be ignored.\nIf the upload_type value is banner then the image uploaded will\nbe the subreddit's new mobile banner and name will be ignored.\n\n\nFor backwards compatibility, if upload_type is not specified, the\nheader field will be used instead:\n\n\nIf the header field has value 0, then upload_type is img.\nIf the header field has value 1, then upload_type is header.\n\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img,\n/api/delete_sr_header,\n/api/delete_sr_icon, and\n/api/delete_sr_banner.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "file upload with maximum size of 500 KiB"
          },
          "formid": {
            "type": "string",
            "description": "(optional) can be ignored"
          },
          "header": {
            "type": "string",
            "description": "an integer between 0 and 1"
          },
          "img_type": {
            "type": "string",
            "description": "one of png or jpg (default: png)"
          },
          "name": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "upload_type": {
            "type": "string",
            "description": "one of (img, header, icon, banner)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unsave.post",
      "title": "api.unsave.post",
      "description": "Unsave a link or comment.\n\nThis removes the thing from the user's saved listings as well.\n\nSee also: /api/save.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unread_message.post",
      "title": "api.unread_message.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unmute_message_author.post",
      "title": "api.unmute_message_author.post",
      "description": "For unmuting user via modmail.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unmarknsfw.post",
      "title": "api.unmarknsfw.post",
      "description": "Remove the NSFW marking from a link.\n\nSee also: /api/marknsfw.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unlock.post",
      "title": "api.unlock.post",
      "description": "Unlock a link.\n\nAllow a post to receive new comments.\n\nSee also: /api/lock.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a link"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unignore_reports.post",
      "title": "api.unignore_reports.post",
      "description": "Allow future reports on a thing to cause notifications.\n\nSee also: /api/ignore_reports.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unhide.post",
      "title": "api.unhide.post",
      "description": "Unhide a link.\n\nSee also: /api/hide.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of link fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unfriend.post",
      "title": "api.unfriend.post",
      "description": "Remove a relationship between a user and another user or subreddit\n\nThe user can either be passed in by name (nuser)\nor by fullname (iuser).  If type is friend or enemy,\n'container' MUST be the current user's fullname;\nfor other types, the subreddit must be set\nvia URL (e.g., /r/funny/api/unfriend)\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: modothers\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: privatemessages\n\n\nComplement to POST_friend",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "container": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "type": {
            "type": "string",
            "description": "one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.uncollapse_message.post",
      "title": "api.uncollapse_message.post",
      "description": "Uncollapse a message\n\nSee also: /api/collapse_message",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.unblock_subreddit.post",
      "title": "api.unblock_subreddit.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.subscribe.post",
      "title": "api.subscribe.post",
      "description": "Subscribe to or unsubscribe from a subreddit.\n\nTo subscribe, action should be sub. To unsubscribe, action should\nbe unsub. The user must have access to the subreddit to be able to\nsubscribe to it.\n\nSee also: /subreddits/mine/.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "one of (sub, unsub)"
          },
          "sr": {
            "type": "string",
            "description": "the name of a subreddit"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.subreddits_by_topic.get",
      "title": "api.subreddits_by_topic.get",
      "description": "Return a list of subreddits that are relevant to a search query.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "a string no longer than 50 characters"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.submit_text.get",
      "title": "api.submit_text.get",
      "description": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.submit.post",
      "title": "api.submit.post",
      "description": "Submit a link to a subreddit.\n\nSubmit will create a link or self-post in the subreddit sr with the\ntitle title. If kind is \"link\", then url is expected to be a\nvalid URL to link to. Otherwise, text, if present, will be the\nbody of the self-post.\n\nIf a link with the same URL has already been submitted to the specified\nsubreddit an error will be returned unless resubmit is true.\nextension is used for determining which view-type (e.g. json,\ncompact etc.) to use for the redirect that is generated if the\nresubmit error occurs.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "captcha": {
            "type": "string",
            "description": "the user's response to the CAPTCHA challenge"
          },
          "extension": {
            "type": "string",
            "description": "extension used for redirects"
          },
          "iden": {
            "type": "string",
            "description": "the identifier of the CAPTCHA challenge"
          },
          "kind": {
            "type": "string",
            "description": "one of (link, self)"
          },
          "resubmit": {
            "type": "string",
            "description": "boolean value"
          },
          "sendreplies": {
            "type": "string",
            "description": "boolean value"
          },
          "sr": {
            "type": "string",
            "description": "name of a subreddit"
          },
          "text": {
            "type": "string",
            "description": "raw markdown text"
          },
          "title": {
            "type": "string",
            "description": "title of the submission. up to 300 characters long"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "url": {
            "type": "string",
            "description": "a valid URL"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.store_visits.post",
      "title": "api.store_visits.post",
      "description": "Requires a subscription to reddit gold",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "links": {
            "type": "string",
            "description": "A comma-separated list of link fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.site_admin.post",
      "title": "api.site_admin.post",
      "description": "Create or configure a subreddit.\n\nIf sr is specified, the request will attempt to modify the specified\nsubreddit. If not, a subreddit with name name will be created.\n\nThis endpoint expects all values to be supplied on every request.  If\nmodifying a subset of options, it may be useful to get the current\nsettings from /about/edit.json\nfirst.\n\nFor backwards compatibility, description is the sidebar text and\npublic_description is the publicly visible subreddit description.\n\nMost of the parameters for this endpoint are identical to options\nvisible in the user interface and their meanings are best explained\nthere.\n\nSee also: /about/edit.json.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "allow_top": {
            "type": "string",
            "description": "boolean value"
          },
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "captcha": {
            "type": "string",
            "description": "the user's response to the CAPTCHA challenge"
          },
          "collapse_deleted_comments": {
            "type": "string",
            "description": "boolean value"
          },
          "comment_score_hide_mins": {
            "type": "string",
            "description": "an integer between 0 and 1440 (default: 0)"
          },
          "description": {
            "type": "string",
            "description": "raw markdown text"
          },
          "exclude_banned_modqueue": {
            "type": "string",
            "description": "boolean value"
          },
          "header-title": {
            "type": "string",
            "description": "a string no longer than 500 characters"
          },
          "hide_ads": {
            "type": "string",
            "description": "boolean value"
          },
          "iden": {
            "type": "string",
            "description": "the identifier of the CAPTCHA challenge"
          },
          "lang": {
            "type": "string",
            "description": "a valid IETF language tag (underscore separated)"
          },
          "link_type": {
            "type": "string",
            "description": "one of (any, link, self)"
          },
          "modmail_email_address": {
            "type": "string"
          },
          "modmail_email_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "name": {
            "type": "string",
            "description": "subreddit name"
          },
          "over_18": {
            "type": "string",
            "description": "boolean value"
          },
          "public_description": {
            "type": "string",
            "description": "raw markdown text"
          },
          "public_traffic": {
            "type": "string",
            "description": "boolean value"
          },
          "show_media": {
            "type": "string",
            "description": "boolean value"
          },
          "spam_comments": {
            "type": "string",
            "description": "one of (low, high, all)"
          },
          "spam_links": {
            "type": "string",
            "description": "one of (low, high, all)"
          },
          "spam_selfposts": {
            "type": "string",
            "description": "one of (low, high, all)"
          },
          "sr": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "submit_link_label": {
            "type": "string",
            "description": "a string no longer than 60 characters"
          },
          "submit_text": {
            "type": "string",
            "description": "raw markdown text"
          },
          "submit_text_label": {
            "type": "string",
            "description": "a string no longer than 60 characters"
          },
          "suggested_comment_sort": {
            "type": "string",
            "description": "one of (confidence, top, new, hot, controversial, old, random, qa)"
          },
          "title": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "type": {
            "type": "string",
            "description": "one of (gold_restricted, archived, restricted, gold_only, employees_only, private, public)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "wiki_edit_age": {
            "type": "string",
            "description": "an integer greater than 0 (default: 0)"
          },
          "wiki_edit_karma": {
            "type": "string",
            "description": "an integer greater than 0 (default: 0)"
          },
          "wikimode": {
            "type": "string",
            "description": "one of (disabled, modonly, anyone)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.setpermissions.post",
      "title": "api.setpermissions.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "permissions": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.setflairenabled.post",
      "title": "api.setflairenabled.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.set_suggested_sort.post",
      "title": "api.set_suggested_sort.post",
      "description": "Set a suggested sort for a link.\n\nSuggested sorts are useful to display comments in a certain preferred way\nfor posts. For example, casual conversation may be better sorted by new\nby default, or AMAs may be sorted by Q&A. A sort of an empty string\nclears the default sort.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string"
          },
          "sort": {
            "type": "string",
            "description": "one of (confidence, top, new, hot, controversial, old, random, qa, blank)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.set_subreddit_sticky.post",
      "title": "api.set_subreddit_sticky.post",
      "description": "Set or unset a Link as the sticky in its subreddit.\n\nstate is a boolean that indicates whether to sticky or unsticky\nthis post - true to sticky, false to unsticky.\n\nThe num argument is optional, and only used when stickying a post.\nIt allows specifying a particular \"slot\" to sticky the post into, and\nif there is already a post stickied in that slot it will be replaced.\nIf there is no post in the specified slot to replace, or num is None,\nthe bottom-most slot will be used.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string"
          },
          "num": {
            "type": "string",
            "description": "an integer between 1 and 2"
          },
          "state": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.set_contest_mode.post",
      "title": "api.set_contest_mode.post",
      "description": "Set or unset \"contest mode\" for a link's comments.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling contest mode - true to enable, false to disable.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.sendreplies.post",
      "title": "api.sendreplies.post",
      "description": "Enable or disable inbox replies for a link or comment.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling inbox replies - true to enable, false to disable.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing created by the user"
          },
          "state": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.selectflair.post",
      "title": "api.selectflair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_template_id": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.search_reddit_names.post",
      "title": "api.search_reddit_names.post",
      "description": "List subreddit names that begin with a query string.\n\nSubreddits whose names begin with query will be returned. If\ninclude_over_18 is false, subreddits with over-18 content\nrestrictions will be filtered from the results.\n\nIf exact is true, only an exact match will be returned.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "exact": {
            "type": "string",
            "description": "boolean value"
          },
          "include_over_18": {
            "type": "string",
            "description": "boolean value"
          },
          "query": {
            "type": "string",
            "description": "a string up to 50 characters long, consisting of printable characters."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.saved_categories.get",
      "title": "api.saved_categories.get",
      "description": "Get a list of categories in which things are currently saved.\n\nSee also: /api/save.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.save.post",
      "title": "api.save.post",
      "description": "Save a link or comment.\n\nSaved things are kept in the user's saved listing for later perusal.\n\nSee also: /api/unsave.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "a category name"
          },
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.report.post",
      "title": "api.report.post",
      "description": "Report a link, comment or message.\n\nReporting a thing brings it to the attention of the subreddit's\nmoderators. Reporting a message sends it to a system for admin review.\n\nFor links and comments, the thing is implicitly hidden as well (see\n/api/hide for details).",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "other_reason": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "reason": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "site_reason": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "thing_id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.remove.post",
      "title": "api.remove.post",
      "description": "Remove a link, comment, or modmail message.\n\nIf the thing is a link, it will be removed from all subreddit listings.\nIf the thing is a comment, it will be redacted and removed from all\nsubreddit comment listings.\n\nSee also: /api/approve.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "spam": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.recommend.sr.srnames.get",
      "title": "api.recommend.sr.srnames.get",
      "description": "Return subreddits recommended for the given subreddit(s).\n\nGets a list of subreddits recommended for srnames, filtering out any\nthat appear in the optional omit param.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "omit": {
            "type": "string",
            "description": "comma-delimited list of subreddit names"
          },
          "srnames": {
            "type": "string",
            "description": "comma-delimited list of subreddit names"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.read_message.post",
      "title": "api.read_message.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.read_all_messages.post",
      "title": "api.read_all_messages.post",
      "description": "Queue up marking all messages for a user as read.\n\nThis may take some time, and returns 202 to acknowledge acceptance of\nthe request.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.new_captcha.post",
      "title": "api.new_captcha.post",
      "description": "Responds with an iden of a new CAPTCHA.\n\nUse this endpoint if a user cannot read a given CAPTCHA,\nand wishes to receive a new CAPTCHA.\n\nTo request the CAPTCHA image for an iden, use\n/captcha/iden.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.needs_captcha.get",
      "title": "api.needs_captcha.get",
      "description": "Check whether CAPTCHAs are needed for API methods that define the\n\"captcha\" and \"iden\" parameters.",
      "inputSchema": {},
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.mute_message_author.post",
      "title": "api.mute_message_author.post",
      "description": "For muting user via modmail.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.r.srname.put",
      "title": "api.multi.multipath.r.srname.put",
      "description": "Add a subreddit to a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "json data:\n\n{\n  \"name\": subreddit name,\n}"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "srname": {
            "type": "string",
            "description": "subreddit name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.r.srname.get",
      "title": "api.multi.multipath.r.srname.get",
      "description": "Get data about a subreddit in a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "srname": {
            "type": "string",
            "description": "subreddit name"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.r.srname.delete",
      "title": "api.multi.multipath.r.srname.delete",
      "description": "Remove a subreddit from a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "srname": {
            "type": "string",
            "description": "subreddit name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.description.put",
      "title": "api.multi.multipath.description.put",
      "description": "Change a multi's markdown description.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "json data:\n\n{\n  \"body_md\": raw markdown text,\n}"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.description.get",
      "title": "api.multi.multipath.description.get",
      "description": "Get a multi's description.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.put",
      "title": "api.multi.multipath.put",
      "description": "Create or update a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          },
          "model": {
            "type": "string",
            "description": "json data:\n\n{\n  \"description_md\": raw markdown text,\n  \"display_name\": a string no longer than 50 characters,\n  \"icon_name\": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, `None`),\n  \"key_color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`, `hidden`),\n  \"weighting_scheme\": one of (`classic`, `fresh`),\n}"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.post",
      "title": "api.multi.multipath.post",
      "description": "Create a multi. Responds with 409 Conflict if it already exists.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          },
          "model": {
            "type": "string",
            "description": "json data:\n\n{\n  \"description_md\": raw markdown text,\n  \"display_name\": a string no longer than 50 characters,\n  \"icon_name\": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, `None`),\n  \"key_color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`, `hidden`),\n  \"weighting_scheme\": one of (`classic`, `fresh`),\n}"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.get",
      "title": "api.multi.multipath.get",
      "description": "Fetch a multi's data and subreddit list by name.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.multipath.delete",
      "title": "api.multi.multipath.delete",
      "description": "Delete a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          },
          "multipath": {
            "type": "string",
            "description": "multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.user.username.get",
      "title": "api.multi.user.username.get",
      "description": "Fetch a list of public multis belonging to username",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          },
          "username": {
            "type": "string",
            "description": "A valid, existing reddit username"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.rename.post",
      "title": "api.multi.rename.post",
      "description": "Rename a multi.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "a string no longer than 50 characters"
          },
          "from": {
            "type": "string",
            "description": "multireddit url path"
          },
          "to": {
            "type": "string",
            "description": "destination multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.mine.get",
      "title": "api.multi.mine.get",
      "description": "Fetch a list of multis belonging to the current user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "expand_srs": {
            "type": "string",
            "description": "boolean value"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.multi.copy.post",
      "title": "api.multi.copy.post",
      "description": "Copy a multi.\n\nResponds with 409 Conflict if the target already exists.\n\nA \"copied from ...\" line will automatically be appended to the\ndescription.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "a string no longer than 50 characters"
          },
          "from": {
            "type": "string",
            "description": "multireddit url path"
          },
          "to": {
            "type": "string",
            "description": "destination multireddit url path"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.morechildren.get",
      "title": "api.morechildren.get",
      "description": "Retrieve additional comments omitted from a base comment tree.\n\nWhen a comment tree is rendered, the most relevant comments are\nselected for display first. Remaining comments are stubbed out with\n\"MoreComments\" links. This API call is used to retrieve the additional\ncomments represented by those stubs, up to 20 at a time.\n\nThe two core parameters required are link and children.  link is\nthe fullname of the link whose comments are being fetched. children\nis a comma-delimited list of comment ID36s that need to be fetched.\n\nIf id is passed, it should be the ID of the MoreComments object this\ncall is replacing. This is needed only for the HTML UI's purposes and\nis optional otherwise.\n\nNOTE: you may only make one request at a time to this API endpoint.\nHigher concurrency will result in an error being returned.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "children": {
            "type": "string",
            "description": "a comma-delimited list of comment ID36s"
          },
          "id": {
            "type": "string",
            "description": "(optional) id of the associated MoreChildren object"
          },
          "link_id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "sort": {
            "type": "string",
            "description": "one of (confidence, top, new, hot, controversial, old, random, qa)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.marknsfw.post",
      "title": "api.marknsfw.post",
      "description": "Mark a link NSFW.\n\nSee also: /api/unmarknsfw.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.lock.post",
      "title": "api.lock.post",
      "description": "Lock a link.\n\nPrevents a post from receiving new comments.\n\nSee also: /api/unlock.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a link"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.update.post",
      "title": "api.live.thread.update.post",
      "description": "Post an update to the thread.\n\nRequires the update permission for this thread.\n\nSee also: /api/live/thread/strike_update, and\n/api/live/thread/delete_update.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "body": {
            "type": "string",
            "description": "raw markdown text"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.strike_update.post",
      "title": "api.live.thread.strike_update.post",
      "description": "Strike (mark incorrect and cross out) the content of an update.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string",
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.set_contributor_permissions.post",
      "title": "api.live.thread.set_contributor_permissions.post",
      "description": "Change a contributor or contributor invite's permissions.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor and\n/api/live/thread/rm_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "permissions": {
            "type": "string",
            "description": "permission description e.g. +update,+edit,-manage"
          },
          "type": {
            "type": "string",
            "description": "one of (liveupdate_contributor_invite, liveupdate_contributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.rm_contributor_invite.post",
      "title": "api.live.thread.rm_contributor_invite.post",
      "description": "Revoke an outstanding contributor invite.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string",
            "description": "fullname of a account"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.rm_contributor.post",
      "title": "api.live.thread.rm_contributor.post",
      "description": "Revoke another user's contributorship.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string",
            "description": "fullname of a account"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.report.post",
      "title": "api.live.thread.report.post",
      "description": "Report the thread for violating the rules of reddit.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "type": {
            "type": "string",
            "description": "one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.leave_contributor.post",
      "title": "api.live.thread.leave_contributor.post",
      "description": "Abdicate contributorship of the thread.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/invite_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.invite_contributor.post",
      "title": "api.live.thread.invite_contributor.post",
      "description": "Invite another user to contribute to the thread.\n\nRequires the manage permission for this thread.  If the recipient\naccepts the invite, they will be granted the permissions specified.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/rm_contributor_invite.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "permissions": {
            "type": "string",
            "description": "permission description e.g. +update,+edit,-manage"
          },
          "type": {
            "type": "string",
            "description": "one of (liveupdate_contributor_invite, liveupdate_contributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.edit.post",
      "title": "api.live.thread.edit.post",
      "description": "Configure the thread.\n\nRequires the settings permission for this thread.\n\nSee also: /live/thread/about.json.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "description": {
            "type": "string",
            "description": "raw markdown text"
          },
          "nsfw": {
            "type": "string",
            "description": "boolean value"
          },
          "resources": {
            "type": "string",
            "description": "raw markdown text"
          },
          "title": {
            "type": "string",
            "description": "a string no longer than 120 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.delete_update.post",
      "title": "api.live.thread.delete_update.post",
      "description": "Delete an update from the thread.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "id": {
            "type": "string",
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.close_thread.post",
      "title": "api.live.thread.close_thread.post",
      "description": "Permanently close the thread, disallowing future updates.\n\nRequires the close permission for this thread.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.thread.accept_contributor_invite.post",
      "title": "api.live.thread.accept_contributor_invite.post",
      "description": "Accept a pending invitation to contribute to the thread.\n\nSee also: /api/live/thread/leave_contributor.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          },
          "thread": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.live.create.post",
      "title": "api.live.create.post",
      "description": "Create a new live thread.\n\nOnce created, the initial settings can be modified with\n/api/live/thread/edit and new updates\ncan be posted with\n/api/live/thread/update.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "description": {
            "type": "string",
            "description": "raw markdown text"
          },
          "nsfw": {
            "type": "string",
            "description": "boolean value"
          },
          "resources": {
            "type": "string",
            "description": "raw markdown text"
          },
          "title": {
            "type": "string",
            "description": "a string no longer than 120 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.leavemoderator.post",
      "title": "api.leavemoderator.post",
      "description": "Abdicate moderator status in a subreddit.\n\nSee also: /api/friend.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.leavecontributor.post",
      "title": "api.leavecontributor.post",
      "description": "Abdicate approved submitter status in a subreddit.\n\nSee also: /api/friend.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.info.get",
      "title": "api.info.get",
      "description": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "url": {
            "type": "string",
            "description": "a valid URL"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.ignore_reports.post",
      "title": "api.ignore_reports.post",
      "description": "Prevent future reports on a thing from causing notifications.\n\nAny reports made about a thing after this flag is set on it will not\ncause notifications or make the thing show up in the various moderation\nlistings.\n\nSee also: /api/unignore_reports.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.hide.post",
      "title": "api.hide.post",
      "description": "Hide a link.\n\nThis removes it from the user's default view of subreddit listings.\n\nSee also: /api/unhide.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of link fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.friend.post",
      "title": "api.friend.post",
      "description": "Create a relationship between a user and another user or subreddit\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: Use \"moderator_invite\"\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: Use /api/block\n\n\nComplement to POST_unfriend",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "ban_message": {
            "type": "string",
            "description": "raw markdown text"
          },
          "ban_reason": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "container": {
            "type": "string"
          },
          "duration": {
            "type": "string",
            "description": "an integer between 1 and 999"
          },
          "name": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "note": {
            "type": "string",
            "description": "a string no longer than 300 characters"
          },
          "permissions": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flairtemplate.post",
      "title": "api.flairtemplate.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "css_class": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "flair_template_id": {
            "type": "string"
          },
          "flair_type": {
            "type": "string",
            "description": "one of (USER_FLAIR, LINK_FLAIR)"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "text_editable": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flairselector.post",
      "title": "api.flairselector.post",
      "description": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe logged in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flairlist.get",
      "title": "api.flairlist.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 1000)"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flaircsv.post",
      "title": "api.flaircsv.post",
      "description": "Change the flair of multiple users in the same subreddit with a\nsingle API call.\n\nRequires a string 'flair_csv' which has up to 100 lines of the form\n'user,flairtext,cssclass' (Lines beyond the 100th are ignored).\n\nIf both cssclass and flairtext are the empty string for a given\nuser, instead clears that user's flair.\n\nReturns an array of objects indicating if each flair setting was \napplied, or a reason for the failure.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "flair_csv": {
            "type": "string",
            "description": "comma-seperated flair information"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flairconfig.post",
      "title": "api.flairconfig.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "flair_position": {
            "type": "string",
            "description": "one of (left, right)"
          },
          "flair_self_assign_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "link_flair_position": {
            "type": "string",
            "description": "one of (`,left,right`)"
          },
          "link_flair_self_assign_enabled": {
            "type": "string",
            "description": "boolean value"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.flair.post",
      "title": "api.flair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "css_class": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "link": {
            "type": "string",
            "description": "a fullname of a link"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "text": {
            "type": "string",
            "description": "a string no longer than 64 characters"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.editusertext.post",
      "title": "api.editusertext.post",
      "description": "Edit the body text of a comment or self-post.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "text": {
            "type": "string",
            "description": "raw markdown text"
          },
          "thing_id": {
            "type": "string",
            "description": "fullname of a thing created by the user"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.distinguish.post",
      "title": "api.distinguish.post",
      "description": "Distinguish a thing's author with a sigil.\n\nThis can be useful to draw attention to and confirm the identity of the\nuser in the context of a link or comment of theirs. The options for\ndistinguish are as follows:\n\n\nyes - add a moderator distinguish ([M]). only if the user is a\n      moderator of the subreddit the thing is in.\nno - remove any distinguishes.\nadmin - add an admin distinguish ([A]). admin accounts only.\nspecial - add a user-specific distinguish. depends on user.\n\n\nThe first time a top-level comment is moderator distinguished, the\nauthor of the link the comment is in reply to will get a notification\nin their inbox.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "how": {
            "type": "string",
            "description": "one of (yes, no, admin, special)"
          },
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.deleteflairtemplate.post",
      "title": "api.deleteflairtemplate.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_template_id": {
            "type": "string"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.deleteflair.post",
      "title": "api.deleteflair.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "name": {
            "type": "string",
            "description": "a user by name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.delete_sr_img.post",
      "title": "api.delete_sr_img.post",
      "description": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "img_name": {
            "type": "string",
            "description": "a valid subreddit image name"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.delete_sr_icon.post",
      "title": "api.delete_sr_icon.post",
      "description": "Remove the subreddit's custom mobile icon.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.delete_sr_header.post",
      "title": "api.delete_sr_header.post",
      "description": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.delete_sr_banner.post",
      "title": "api.delete_sr_banner.post",
      "description": "Remove the subreddit's custom mobile banner.\n\nSee also: /api/upload_sr_img.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.del.post",
      "title": "api.del.post",
      "description": "Delete a Link or Comment.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing created by the user"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.compose.post",
      "title": "api.compose.post",
      "description": "Handles message composition under /message/compose.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "captcha": {
            "type": "string",
            "description": "the user's response to the CAPTCHA challenge"
          },
          "from_sr": {
            "type": "string",
            "description": "subreddit name"
          },
          "iden": {
            "type": "string",
            "description": "the identifier of the CAPTCHA challenge"
          },
          "subject": {
            "type": "string",
            "description": "a string no longer than 100 characters"
          },
          "text": {
            "type": "string",
            "description": "raw markdown text"
          },
          "to": {
            "type": "string",
            "description": "the name of an existing user"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.comment.post",
      "title": "api.comment.post",
      "description": "Submit a new comment or reply to a message.\n\nparent is the fullname of the thing being replied to. Its value\nchanges the kind of object created by this request:\n\n\nthe fullname of a Link: a top-level comment in that Link's thread. (requires submit scope)\nthe fullname of a Comment: a comment reply to that comment. (requires submit scope)\nthe fullname of a Message: a message reply to that message. (requires privatemessages scope)\n\n\ntext should be the raw markdown body of the comment or message.\n\nTo start a new message thread, use /api/compose.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "text": {
            "type": "string",
            "description": "raw markdown text"
          },
          "thing_id": {
            "type": "string",
            "description": "fullname of parent thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.collapse_message.post",
      "title": "api.collapse_message.post",
      "description": "Collapse a message\n\nSee also: /api/uncollapse_message",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A comma-separated list of thing fullnames"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.clearflairtemplates.post",
      "title": "api.clearflairtemplates.post",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "flair_type": {
            "type": "string",
            "description": "one of (USER_FLAIR, LINK_FLAIR)"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.block.post",
      "title": "api.block.post",
      "description": "For blocking via inbox.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.approve.post",
      "title": "api.approve.post",
      "description": "Approve a link or comment.\n\nIf the thing was removed, it will be re-inserted into appropriate\nlistings. Any reports on the approved thing will be discarded.\n\nSee also: /api/remove.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "api.accept_moderator_invite.post",
      "title": "api.accept_moderator_invite.post",
      "description": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "api_type": {
            "type": "string",
            "description": "the string json"
          },
          "uh": {
            "type": "string",
            "description": "a modhash"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "about.where.get",
      "title": "about.where.get",
      "description": "This endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "user": {
            "type": "string",
            "description": "A valid, existing reddit username"
          },
          "where": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "about.location.get",
      "title": "about.location.get",
      "description": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 100)"
          },
          "location": {
            "type": "string"
          },
          "only": {
            "type": "string",
            "description": "one of (links, comments)"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    },
    {
      "id": "about.log.get",
      "title": "about.log.get",
      "description": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "after": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "before": {
            "type": "string",
            "description": "fullname of a thing"
          },
          "count": {
            "type": "string",
            "description": "a positive integer (default: 0)"
          },
          "limit": {
            "type": "string",
            "description": "the maximum number of items desired (default: 25, maximum: 500)"
          },
          "mod": {
            "type": "string",
            "description": "(optional) a moderator filter"
          },
          "show": {
            "type": "string",
            "description": "(optional) the string all"
          },
          "sr_detail": {
            "type": "string",
            "description": "(optional) expand subreddits"
          },
          "type": {
            "type": "string",
            "description": "one of (banuser, unbanuser, removelink, approvelink, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, muteuser, unmuteuser, createrule, editrule, deleterule)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "reddit": {
          "integration": "reddit"
        }
      }
    }
  ]
}