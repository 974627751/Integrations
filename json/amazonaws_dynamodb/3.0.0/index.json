{
  "id": "amazonaws_dynamodb",
  "title": "Amazon DynamoDB",
  "description": "Amazon DynamoDB\n\nAmazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don't have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.\n\nWith DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables' throughput capacity without downtime or performance degradation, and use the AWS Management Console to monitor resource utilization and performance metrics.\n\nDynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an AWS region, providing built-in high availability and data durability.",
  "security": {
    "amazonaws_dynamodb": {
      "integration": "amazonaws_dynamodb",
      "accessKeyId": "",
      "secretAccessKey": "",
      "region": "AWS region (if applicable)"
    }
  },
  "logo": {
    "backgroundColor": "#FFFFFF",
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/amazonaws_dynamodb.jpg"
  },
  "actionCount": 19,
  "definitions": {
    "AttributeAction": {
      "enum": [
        "ADD",
        "PUT",
        "DELETE"
      ],
      "type": "string",
      "title": "AttributeAction"
    },
    "AttributeDefinition": {
      "description": "Represents an attribute for describing the key schema for the table and indexes.",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/KeySchemaAttributeName",
          "description": "A name for the attribute."
        },
        "AttributeType": {
          "$ref": "#/definitions/ScalarAttributeType",
          "description": "<p>The data type for the attribute, where:</p> <ul> <li> <p> <code>S</code> - the attribute is of type String</p> </li> <li> <p> <code>N</code> - the attribute is of type Number</p> </li> <li> <p> <code>B</code> - the attribute is of type Binary</p> </li> </ul>"
        }
      },
      "required": [
        "AttributeName",
        "AttributeType"
      ],
      "type": "object",
      "title": "AttributeDefinition"
    },
    "AttributeDefinitions": {
      "items": {
        "$ref": "#/definitions/AttributeDefinition"
      },
      "type": "array",
      "title": "AttributeDefinitions"
    },
    "AttributeMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "AttributeMap"
    },
    "AttributeName": {
      "maxLength": 65535,
      "type": "string",
      "title": "AttributeName"
    },
    "AttributeNameList": {
      "items": {
        "$ref": "#/definitions/AttributeName"
      },
      "minItems": 1,
      "type": "array",
      "title": "AttributeNameList"
    },
    "AttributeUpdates": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValueUpdate"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "AttributeUpdates"
    },
    "AttributeValue": {
      "description": "<p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>",
      "properties": {
        "B": {
          "$ref": "#/definitions/BinaryAttributeValue",
          "description": "<p>An attribute of type Binary. For example:</p> <p> <code>\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"</code> </p>"
        },
        "BOOL": {
          "$ref": "#/definitions/BooleanAttributeValue",
          "description": "<p>An attribute of type Boolean. For example:</p> <p> <code>\"BOOL\": true</code> </p>"
        },
        "BS": {
          "$ref": "#/definitions/BinarySetAttributeValue",
          "description": "<p>An attribute of type Binary Set. For example:</p> <p> <code>\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]</code> </p>"
        },
        "L": {
          "$ref": "#/definitions/ListAttributeValue",
          "description": "<p>An attribute of type List. For example:</p> <p> <code>\"L\": [\"Cookies\", \"Coffee\", 3.14159]</code> </p>"
        },
        "M": {
          "$ref": "#/definitions/MapAttributeValue",
          "description": "<p>An attribute of type Map. For example:</p> <p> <code>\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}</code> </p>"
        },
        "N": {
          "$ref": "#/definitions/NumberAttributeValue",
          "description": "<p>An attribute of type Number. For example:</p> <p> <code>\"N\": \"123.45\"</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
        },
        "NS": {
          "$ref": "#/definitions/NumberSetAttributeValue",
          "description": "<p>An attribute of type Number Set. For example:</p> <p> <code>\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
        },
        "NULL": {
          "$ref": "#/definitions/NullAttributeValue",
          "description": "<p>An attribute of type Null. For example:</p> <p> <code>\"NULL\": true</code> </p>"
        },
        "S": {
          "$ref": "#/definitions/StringAttributeValue",
          "description": "<p>An attribute of type String. For example:</p> <p> <code>\"S\": \"Hello\"</code> </p>"
        },
        "SS": {
          "$ref": "#/definitions/StringSetAttributeValue",
          "description": "<p>An attribute of type String Set. For example:</p> <p> <code>\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]</code> </p>"
        }
      },
      "type": "object",
      "title": "AttributeValue"
    },
    "AttributeValueList": {
      "items": {
        "$ref": "#/definitions/AttributeValue"
      },
      "type": "array",
      "title": "AttributeValueList"
    },
    "AttributeValueUpdate": {
      "description": "<p>For the <code>UpdateItem</code> operation, represents the attributes to be modified, the action to perform on each, and the new value for each.</p> <note> <p>You cannot use <code>UpdateItem</code> to update any primary key attributes. Instead, you will need to delete the item, and then use <code>PutItem</code> to create a new item with new attributes.</p> </note> <p>Attribute values cannot be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests with empty values will be rejected with a <code>ValidationException</code> exception.</p>",
      "properties": {
        "Action": {
          "$ref": "#/definitions/AttributeAction",
          "description": "<p>Specifies how to perform the update. Valid values are <code>PUT</code> (default), <code>DELETE</code>, and <code>ADD</code>. The behavior depends on whether the specified primary key already exists in the table.</p> <p> <b>If an item with the specified <i>Key</i> is found in the table:</b> </p> <ul> <li> <p> <code>PUT</code> - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. </p> </li> <li> <p> <code>DELETE</code> - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type.</p> <p>If a <i>set</i> of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set <code>[a,b,c]</code> and the <code>DELETE</code> action specified <code>[a,c]</code>, then the final attribute value would be <code>[b]</code>. Specifying an empty set is an error.</p> </li> <li> <p> <code>ADD</code> - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of <code>ADD</code> depends on the data type of the attribute:</p> <ul> <li> <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then the <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a negative number, then it is subtracted from the existing attribute.</p> <note> <p> If you use <code>ADD</code> to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses 0 as the initial value.</p> <p>In addition, if you use <code>ADD</code> to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses <code>0</code> as the initial value. For example, suppose that the item you want to update does not yet have an attribute named <i>itemcount</i>, but you decide to <code>ADD</code> the number <code>3</code> to this attribute anyway, even though it currently does not exist. DynamoDB will create the <i>itemcount</i> attribute, set its initial value to <code>0</code>, and finally add <code>3</code> to it. The result will be a new <i>itemcount</i> attribute in the item, with a value of <code>3</code>.</p> </note> </li> <li> <p>If the existing data type is a set, and if the <code>Value</code> is also a set, then the <code>Value</code> is added to the existing set. (This is a <i>set</i> operation, not mathematical addition.) For example, if the attribute value was the set <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute value would be <code>[1,2,3]</code>. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. </p> <p>Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the <code>Value</code> must also be a set of strings. The same holds true for number sets and binary sets.</p> </li> </ul> <p>This action is only valid for an existing attribute whose data type is number or is a set. Do not use <code>ADD</code> for any other data types.</p> </li> </ul> <p> <b>If no item with the specified <i>Key</i> is found:</b> </p> <ul> <li> <p> <code>PUT</code> - DynamoDB creates a new item with the specified primary key, and then adds the attribute. </p> </li> <li> <p> <code>DELETE</code> - Nothing happens; there is no attribute to delete.</p> </li> <li> <p> <code>ADD</code> - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.</p> </li> </ul>"
        },
        "Value": {
          "$ref": "#/definitions/AttributeValue",
          "description": "<p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data TYpes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>"
        }
      },
      "type": "object",
      "title": "AttributeValueUpdate"
    },
    "Backfilling": {
      "type": "boolean",
      "title": "Backfilling"
    },
    "BatchGetItemInput": {
      "description": "Represents the input of a <code>BatchGetItem</code> operation.",
      "example": {
        "RequestItems": {
          "Music": {
            "Keys": [
              {
                "Artist": {
                  "S": "No One You Know"
                },
                "SongTitle": {
                  "S": "Call Me Today"
                }
              },
              {
                "Artist": {
                  "S": "Acme Band"
                },
                "SongTitle": {
                  "S": "Happy Day"
                }
              },
              {
                "Artist": {
                  "S": "No One You Know"
                },
                "SongTitle": {
                  "S": "Scared of My Shadow"
                }
              }
            ],
            "ProjectionExpression": "AlbumTitle"
          }
        }
      },
      "properties": {
        "RequestItems": {
          "$ref": "#/definitions/BatchGetRequestMap",
          "description": "<p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p> <p>Each element in the map of items to retrieve consists of the following:</p> <ul> <li> <p> <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used.</p> </li> <li> <p> <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> </li> <li> <p> <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value.</p> </li> <li> <p> <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p> <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> </li> <li> <p> <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p> </li> </ul>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        }
      },
      "required": [
        "RequestItems"
      ],
      "type": "object",
      "title": "BatchGetItemInput"
    },
    "BatchGetItemOutput": {
      "description": "Represents the output of a <code>BatchGetItem</code> operation.",
      "example": {
        "Responses": {
          "Music": [
            {
              "AlbumTitle": {
                "S": "Somewhat Famous"
              }
            },
            {
              "AlbumTitle": {
                "S": "Blue Sky Blues"
              }
            },
            {
              "AlbumTitle": {
                "S": "Louder Than Ever"
              }
            }
          ]
        }
      },
      "properties": {
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacityMultiple",
          "description": "<p>The read capacity units consumed by the entire <code>BatchGetItem</code> operation.</p> <p>Each element consists of:</p> <ul> <li> <p> <code>TableName</code> - The table that consumed the provisioned throughput.</p> </li> <li> <p> <code>CapacityUnits</code> - The total number of capacity units consumed.</p> </li> </ul>"
        },
        "Responses": {
          "$ref": "#/definitions/BatchGetResponseMap",
          "description": "A map of table name to a list of items. Each object in <code>Responses</code> consists of a table name, along with a map of attribute data consisting of the data type and attribute value."
        },
        "UnprocessedKeys": {
          "$ref": "#/definitions/BatchGetRequestMap",
          "description": "<p>A map of tables and their respective keys that were not processed with the current response. The <code>UnprocessedKeys</code> value is in the same form as <code>RequestItems</code>, so the value can be provided directly to a subsequent <code>BatchGetItem</code> operation. For more information, see <code>RequestItems</code> in the Request Parameters section.</p> <p>Each element consists of:</p> <ul> <li> <p> <code>Keys</code> - An array of primary key attribute values that define specific items in the table.</p> </li> <li> <p> <code>ProjectionExpression</code> - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.</p> </li> <li> <p> <code>ConsistentRead</code> - The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.</p> </li> </ul> <p>If there are no unprocessed keys remaining, the response contains an empty <code>UnprocessedKeys</code> map.</p>"
        }
      },
      "type": "object",
      "title": "BatchGetItemOutput"
    },
    "BatchGetRequestMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/TableName"
          },
          "value": {
            "$ref": "#/definitions/KeysAndAttributes"
          }
        },
        "type": "object"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array",
      "title": "BatchGetRequestMap"
    },
    "BatchGetResponseMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/TableName"
          },
          "value": {
            "$ref": "#/definitions/ItemList"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "BatchGetResponseMap"
    },
    "BatchWriteItemInput": {
      "description": "Represents the input of a <code>BatchWriteItem</code> operation.",
      "example": {
        "RequestItems": {
          "Music": [
            {
              "PutRequest": {
                "Item": {
                  "AlbumTitle": {
                    "S": "Somewhat Famous"
                  },
                  "Artist": {
                    "S": "No One You Know"
                  },
                  "SongTitle": {
                    "S": "Call Me Today"
                  }
                }
              }
            },
            {
              "PutRequest": {
                "Item": {
                  "AlbumTitle": {
                    "S": "Songs About Life"
                  },
                  "Artist": {
                    "S": "Acme Band"
                  },
                  "SongTitle": {
                    "S": "Happy Day"
                  }
                }
              }
            },
            {
              "PutRequest": {
                "Item": {
                  "AlbumTitle": {
                    "S": "Blue Sky Blues"
                  },
                  "Artist": {
                    "S": "No One You Know"
                  },
                  "SongTitle": {
                    "S": "Scared of My Shadow"
                  }
                }
              }
            }
          ]
        }
      },
      "properties": {
        "RequestItems": {
          "$ref": "#/definitions/BatchWriteItemRequestMap",
          "description": "<p>A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following:</p> <ul> <li> <p> <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement:</p> <ul> <li> <p> <code>Key</code> - A map of primary key attribute values that uniquely identify the ! item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p> </li> </ul> </li> <li> <p> <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement:</p> <ul> <li> <p> <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception.</p> <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p> </li> </ul> </li> </ul>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ReturnItemCollectionMetrics": {
          "$ref": "#/definitions/ReturnItemCollectionMetrics",
          "description": "Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned."
        }
      },
      "required": [
        "RequestItems"
      ],
      "type": "object",
      "title": "BatchWriteItemInput"
    },
    "BatchWriteItemOutput": {
      "description": "Represents the output of a <code>BatchWriteItem</code> operation.",
      "example": {},
      "properties": {
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacityMultiple",
          "description": "<p>The capacity units consumed by the entire <code>BatchWriteItem</code> operation.</p> <p>Each element consists of:</p> <ul> <li> <p> <code>TableName</code> - The table that consumed the provisioned throughput.</p> </li> <li> <p> <code>CapacityUnits</code> - The total number of capacity units consumed.</p> </li> </ul>"
        },
        "ItemCollectionMetrics": {
          "$ref": "#/definitions/ItemCollectionMetricsPerTable",
          "description": "<p>A list of tables that were processed by <code>BatchWriteItem</code> and, for each table, information about any item collections that were affected by individual <code>DeleteItem</code> or <code>PutItem</code> operations.</p> <p>Each entry consists of the following subelements:</p> <ul> <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item.</p> </li> <li> <p> <code>SizeEstimateRange</code> - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li> </ul>"
        },
        "UnprocessedItems": {
          "$ref": "#/definitions/BatchWriteItemRequestMap",
          "description": "<p>A map of tables and requests against those tables that were not processed. The <code>UnprocessedItems</code> value is in the same form as <code>RequestItems</code>, so you can provide this value directly to a subsequent <code>BatchGetItem</code> operation. For more information, see <code>RequestItems</code> in the Request Parameters section.</p> <p>Each <code>UnprocessedItems</code> entry consists of a table name and, for that table, a list of operations to perform (<code>DeleteRequest</code> or <code>PutRequest</code>).</p> <ul> <li> <p> <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement:</p> <ul> <li> <p> <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.</p> </li> </ul> </li> <li> <p> <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement:</p> <ul> <li> <p> <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception.</p> <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p> </li> </ul> </li> </ul> <p>If there are no unprocessed items remaining, the response contains an empty <code>UnprocessedItems</code> map.</p>"
        }
      },
      "type": "object",
      "title": "BatchWriteItemOutput"
    },
    "BatchWriteItemRequestMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/TableName"
          },
          "value": {
            "$ref": "#/definitions/WriteRequests"
          }
        },
        "type": "object"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array",
      "title": "BatchWriteItemRequestMap"
    },
    "BinaryAttributeValue": {
      "type": "string",
      "title": "BinaryAttributeValue"
    },
    "BinarySetAttributeValue": {
      "items": {
        "$ref": "#/definitions/BinaryAttributeValue"
      },
      "type": "array",
      "title": "BinarySetAttributeValue"
    },
    "BooleanAttributeValue": {
      "type": "boolean",
      "title": "BooleanAttributeValue"
    },
    "BooleanObject": {
      "type": "boolean",
      "title": "BooleanObject"
    },
    "Capacity": {
      "description": "Represents the amount of provisioned throughput capacity consumed on a table or an index.",
      "properties": {
        "CapacityUnits": {
          "$ref": "#/definitions/ConsumedCapacityUnits",
          "description": "The total number of capacity units consumed on a table or an index."
        }
      },
      "type": "object",
      "title": "Capacity"
    },
    "ComparisonOperator": {
      "enum": [
        "EQ",
        "NE",
        "IN",
        "LE",
        "LT",
        "GE",
        "GT",
        "BETWEEN",
        "NOT_NULL",
        "NULL",
        "CONTAINS",
        "NOT_CONTAINS",
        "BEGINS_WITH"
      ],
      "type": "string",
      "title": "ComparisonOperator"
    },
    "Condition": {
      "description": "<p>Represents the selection criteria for a <code>Query</code> or <code>Scan</code> operation:</p> <ul> <li> <p>For a <code>Query</code> operation, <code>Condition</code> is used for specifying the <code>KeyConditions</code> to use when querying a table or an index. For <code>KeyConditions</code>, only the following comparison operators are supported:</p> <p> <code>EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN</code> </p> <p> <code>Condition</code> is also used in a <code>QueryFilter</code>, which evaluates the query results and returns only the desired values.</p> </li> <li> <p>For a <code>Scan</code> operation, <code>Condition</code> is used in a <code>ScanFilter</code>, which evaluates the scan results and returns only the desired values.</p> </li> </ul>",
      "properties": {
        "AttributeValueList": {
          "$ref": "#/definitions/AttributeValueList",
          "description": "<p>One or more values to evaluate against the supplied attribute. The number of values in the list depends on the <code>ComparisonOperator</code> being used.</p> <p>For type Number, value comparisons are numeric.</p> <p>String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, <code>a</code> is greater than <code>A</code>, and <code>a</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p> <p>For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.</p>"
        },
        "ComparisonOperator": {
          "$ref": "#/definitions/ComparisonOperator",
          "description": "<p>A comparator for evaluating attributes. For example, equals, greater than, less than, etc.</p> <p>The following comparison operators are available:</p> <p> <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code> </p> <p>The following are descriptions of each comparison operator.</p> <ul> <li> <p> <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including lists and maps.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including lists and maps.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>LE</code> : Less than or equal. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>LT</code> : Less than. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>GE</code> : Greater than or equal. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>GT</code> : Greater than. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported for all data types, including lists and maps.</p> <note> <p>This operator tests for the existence of an attribute, not its data type. If the data type of attribute \"<code>a</code>\" is null, and you evaluate it using <code>NOT_NULL</code>, the result is a Boolean <code>true</code>. This result is because the attribute \"<code>a</code>\" exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.</p> </note> </li> <li> <p> <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported for all data types, including lists and maps.</p> <note> <p>This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute \"<code>a</code>\" is null, and you evaluate it using <code>NULL</code>, the result is a Boolean <code>false</code>. This is because the attribute \"<code>a</code>\" exists; its data type is not relevant to the <code>NULL</code> comparison operator.</p> </note> </li> <li> <p> <code>CONTAINS</code> : Checks for a subsequence, or value in a set.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"<code>SS</code>\", \"<code>NS</code>\", or \"<code>BS</code>\"), then the operator evaluates to true if it finds an exact match with any member of the set.</p> <p>CONTAINS is supported for lists: When evaluating \"<code>a CONTAINS b</code>\", \"<code>a</code>\" can be a list; however, \"<code>b</code>\" cannot be a set, a map, or a list.</p> </li> <li> <p> <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a value in a set.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"<code>SS</code>\", \"<code>NS</code>\", or \"<code>BS</code>\"), then the operator evaluates to true if it <i>does not</i> find an exact match with any member of the set.</p> <p>NOT_CONTAINS is supported for lists: When evaluating \"<code>a NOT CONTAINS b</code>\", \"<code>a</code>\" can be a list; however, \"<code>b</code>\" cannot be a set, a map, or a list.</p> </li> <li> <p> <code>BEGINS_WITH</code> : Checks for a prefix. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).</p> <p/> </li> <li> <p> <code>IN</code> : Checks for matching elements in a list.</p> <p> <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code> elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.</p> </li> <li> <p> <code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal to the second value. </p> <p> <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code> </p> </li> </ul> <p>For usage examples of <code>AttributeValueList</code> and <code>ComparisonOperator</code>, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\">Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "ComparisonOperator"
      ],
      "type": "object",
      "title": "Condition"
    },
    "ConditionExpression": {
      "type": "string",
      "title": "ConditionExpression"
    },
    "ConditionalCheckFailedException": {
      "description": "A condition specified in the operation could not be evaluated.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The conditional request failed."
        }
      },
      "type": "object",
      "title": "ConditionalCheckFailedException"
    },
    "ConditionalOperator": {
      "enum": [
        "AND",
        "OR"
      ],
      "type": "string",
      "title": "ConditionalOperator"
    },
    "ConsistentRead": {
      "type": "boolean",
      "title": "ConsistentRead"
    },
    "ConsumedCapacity": {
      "description": "The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the request asked for it. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.",
      "properties": {
        "CapacityUnits": {
          "$ref": "#/definitions/ConsumedCapacityUnits",
          "description": "The total number of capacity units consumed by the operation."
        },
        "GlobalSecondaryIndexes": {
          "$ref": "#/definitions/SecondaryIndexesCapacityMap",
          "description": "The amount of throughput consumed on each global index affected by the operation."
        },
        "LocalSecondaryIndexes": {
          "$ref": "#/definitions/SecondaryIndexesCapacityMap",
          "description": "The amount of throughput consumed on each local index affected by the operation."
        },
        "Table": {
          "$ref": "#/definitions/Capacity",
          "description": "The amount of throughput consumed on the table affected by the operation."
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table that was affected by the operation."
        }
      },
      "type": "object",
      "title": "ConsumedCapacity"
    },
    "ConsumedCapacityMultiple": {
      "items": {
        "$ref": "#/definitions/ConsumedCapacity"
      },
      "type": "array",
      "title": "ConsumedCapacityMultiple"
    },
    "ConsumedCapacityUnits": {
      "format": "double",
      "type": "number",
      "title": "ConsumedCapacityUnits"
    },
    "CreateGlobalSecondaryIndexAction": {
      "description": "Represents a new global secondary index to be added to an existing table.",
      "properties": {
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the global secondary index to be created."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "The key schema for the global secondary index."
        },
        "Projection": {
          "$ref": "#/definitions/Projection",
          "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughput",
          "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "IndexName",
        "KeySchema",
        "Projection",
        "ProvisionedThroughput"
      ],
      "type": "object",
      "title": "CreateGlobalSecondaryIndexAction"
    },
    "CreateTableInput": {
      "description": "Represents the input of a <code>CreateTable</code> operation.",
      "example": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Artist",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SongTitle",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Artist",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SongTitle",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "TableName": "Music"
      },
      "properties": {
        "AttributeDefinitions": {
          "$ref": "#/definitions/AttributeDefinitions",
          "description": "An array of attributes that describe the key schema for the table and indexes."
        },
        "GlobalSecondaryIndexes": {
          "$ref": "#/definitions/GlobalSecondaryIndexList",
          "description": "<p>One or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:</p> <ul> <li> <p> <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p> <p/> </li> <li> <p> <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> <li> <p> <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.</p> </li> </ul>"
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>Each <code>KeySchemaElement</code> in the array is composed of:</p> <ul> <li> <p> <code>AttributeName</code> - The name of this key attribute.</p> </li> <li> <p> <code>KeyType</code> - The role that the key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note> <p>For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p> <p>For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\">Specifying the Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "LocalSecondaryIndexes": {
          "$ref": "#/definitions/LocalSecondaryIndexList",
          "description": "<p>One or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p> <p>Each local secondary index in the array includes the following:</p> <ul> <li> <p> <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p> <p/> </li> <li> <p> <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> </ul>"
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughput",
          "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "StreamSpecification": {
          "$ref": "#/definitions/StreamSpecification",
          "description": "<p>The settings for DynamoDB Streams on the table. These settings consist of:</p> <ul> <li> <p> <code>StreamEnabled</code> - Indicates whether Streams is to be enabled (true) or disabled (false).</p> </li> <li> <p> <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the table's stream. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul> </li> </ul>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to create."
        }
      },
      "required": [
        "AttributeDefinitions",
        "TableName",
        "KeySchema",
        "ProvisionedThroughput"
      ],
      "type": "object",
      "title": "CreateTableInput"
    },
    "CreateTableOutput": {
      "description": "Represents the output of a <code>CreateTable</code> operation.",
      "example": {
        "TableDescription": {
          "AttributeDefinitions": [
            {
              "AttributeName": "Artist",
              "AttributeType": "S"
            },
            {
              "AttributeName": "SongTitle",
              "AttributeType": "S"
            }
          ],
          "CreationDateTime": "1421866952.062",
          "ItemCount": 0,
          "KeySchema": [
            {
              "AttributeName": "Artist",
              "KeyType": "HASH"
            },
            {
              "AttributeName": "SongTitle",
              "KeyType": "RANGE"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "TableName": "Music",
          "TableSizeBytes": 0,
          "TableStatus": "CREATING"
        }
      },
      "properties": {
        "TableDescription": {
          "$ref": "#/definitions/TableDescription",
          "description": "Represents the properties of the table."
        }
      },
      "type": "object",
      "title": "CreateTableOutput"
    },
    "Date": {
      "format": "date-time",
      "type": "string",
      "title": "Date"
    },
    "DeleteGlobalSecondaryIndexAction": {
      "description": "Represents a global secondary index to be deleted from an existing table.",
      "properties": {
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the global secondary index to be deleted."
        }
      },
      "required": [
        "IndexName"
      ],
      "type": "object",
      "title": "DeleteGlobalSecondaryIndexAction"
    },
    "DeleteItemInput": {
      "description": "Represents the input of a <code>DeleteItem</code> operation.",
      "example": {
        "Key": {
          "Artist": {
            "S": "No One You Know"
          },
          "SongTitle": {
            "S": "Scared of My Shadow"
          }
        },
        "TableName": "Music"
      },
      "properties": {
        "ConditionExpression": {
          "$ref": "#/definitions/ConditionExpression",
          "description": "<p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to succeed.</p> <p>An expression can contain any of the following:</p> <ul> <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li> <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li> <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li> </ul> <p>For more information on condition expressions, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ConditionalOperator": {
          "$ref": "#/definitions/ConditionalOperator",
          "description": "This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Expected": {
          "$ref": "#/definitions/ExpectedAttributeMap",
          "description": "This is a legacy parameter. Use <code>ConditionExpresssion</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ExpressionAttributeValues": {
          "$ref": "#/definitions/ExpressionAttributeValueMap",
          "description": "<p>One or more values that can be substituted in an expression.</p> <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p> <p> <code>Available | Backordered | Discontinued</code> </p> <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p> <p> <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }</code> </p> <p>You could then use these values in an expression, such as this:</p> <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p> <p>For more information on expression attribute values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "Key": {
          "$ref": "#/definitions/Key",
          "description": "<p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete.</p> <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ReturnItemCollectionMetrics": {
          "$ref": "#/definitions/ReturnItemCollectionMetrics",
          "description": "Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned."
        },
        "ReturnValues": {
          "$ref": "#/definitions/ReturnValue",
          "description": "<p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are:</p> <ul> <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li> <li> <p> <code>ALL_OLD</code> - The content of the old item is returned.</p> </li> </ul> <note> <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>.</p> </note>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table from which to delete the item."
        }
      },
      "required": [
        "TableName",
        "Key"
      ],
      "type": "object",
      "title": "DeleteItemInput"
    },
    "DeleteItemOutput": {
      "description": "Represents the output of a <code>DeleteItem</code> operation.",
      "example": {
        "ConsumedCapacity": {
          "CapacityUnits": 1,
          "TableName": "Music"
        }
      },
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeMap",
          "description": "A map of attribute names to <code>AttributeValue</code> objects, representing the item as it appeared before the <code>DeleteItem</code> operation. This map appears in the response only if <code>ReturnValues</code> was specified as <code>ALL_OLD</code> in the request."
        },
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>DeleteItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ItemCollectionMetrics": {
          "$ref": "#/definitions/ItemCollectionMetrics",
          "description": "<p>Information about item collections, if any, that were affected by the <code>DeleteItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p> <p>Each <code>ItemCollectionMetrics</code> element consists of:</p> <ul> <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li> <li> <p> <code>SizeEstimateRange</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "DeleteItemOutput"
    },
    "DeleteRequest": {
      "description": "Represents a request to perform a <code>DeleteItem</code> operation on an item.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/Key",
          "description": "A map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema."
        }
      },
      "required": [
        "Key"
      ],
      "type": "object",
      "title": "DeleteRequest"
    },
    "DeleteTableInput": {
      "description": "Represents the input of a <code>DeleteTable</code> operation.",
      "example": {
        "TableName": "Music"
      },
      "properties": {
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to delete."
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "DeleteTableInput"
    },
    "DeleteTableOutput": {
      "description": "Represents the output of a <code>DeleteTable</code> operation.",
      "example": {
        "TableDescription": {
          "ItemCount": 0,
          "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 1,
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "TableName": "Music",
          "TableSizeBytes": 0,
          "TableStatus": "DELETING"
        }
      },
      "properties": {
        "TableDescription": {
          "$ref": "#/definitions/TableDescription",
          "description": "Represents the properties of a table."
        }
      },
      "type": "object",
      "title": "DeleteTableOutput"
    },
    "DescribeLimitsInput": {
      "description": "Represents the input of a <code>DescribeLimits</code> operation. Has no content.",
      "example": {},
      "properties": {},
      "type": "object",
      "title": "DescribeLimitsInput"
    },
    "DescribeLimitsOutput": {
      "description": "Represents the output of a <code>DescribeLimits</code> operation.",
      "example": {
        "AccountMaxReadCapacityUnits": 20000,
        "AccountMaxWriteCapacityUnits": 20000,
        "TableMaxReadCapacityUnits": 10000,
        "TableMaxWriteCapacityUnits": 10000
      },
      "properties": {
        "AccountMaxReadCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum total read capacity units that your account allows you to provision across all of your tables in this region."
        },
        "AccountMaxWriteCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum total write capacity units that your account allows you to provision across all of your tables in this region."
        },
        "TableMaxReadCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum read capacity units that your account allows you to provision for a new table that you are creating in this region, including the read capacity units provisioned for its global secondary indexes (GSIs)."
        },
        "TableMaxWriteCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum write capacity units that your account allows you to provision for a new table that you are creating in this region, including the write capacity units provisioned for its global secondary indexes (GSIs)."
        }
      },
      "type": "object",
      "title": "DescribeLimitsOutput"
    },
    "DescribeTableInput": {
      "description": "Represents the input of a <code>DescribeTable</code> operation.",
      "example": {
        "TableName": "Music"
      },
      "properties": {
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to describe."
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "DescribeTableInput"
    },
    "DescribeTableOutput": {
      "description": "Represents the output of a <code>DescribeTable</code> operation.",
      "example": {
        "Table": {
          "AttributeDefinitions": [
            {
              "AttributeName": "Artist",
              "AttributeType": "S"
            },
            {
              "AttributeName": "SongTitle",
              "AttributeType": "S"
            }
          ],
          "CreationDateTime": "1421866952.062",
          "ItemCount": 0,
          "KeySchema": [
            {
              "AttributeName": "Artist",
              "KeyType": "HASH"
            },
            {
              "AttributeName": "SongTitle",
              "KeyType": "RANGE"
            }
          ],
          "ProvisionedThroughput": {
            "NumberOfDecreasesToday": 1,
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "TableName": "Music",
          "TableSizeBytes": 0,
          "TableStatus": "ACTIVE"
        }
      },
      "properties": {
        "Table": {
          "$ref": "#/definitions/TableDescription",
          "description": "The properties of the table."
        }
      },
      "type": "object",
      "title": "DescribeTableOutput"
    },
    "DescribeTimeToLiveInput": {
      "properties": {
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to be described."
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "DescribeTimeToLiveInput"
    },
    "DescribeTimeToLiveOutput": {
      "properties": {
        "TimeToLiveDescription": {
          "$ref": "#/definitions/TimeToLiveDescription",
          "description": "<p/>"
        }
      },
      "type": "object",
      "title": "DescribeTimeToLiveOutput"
    },
    "ErrorMessage": {
      "type": "string",
      "title": "ErrorMessage"
    },
    "ExpectedAttributeMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/ExpectedAttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "ExpectedAttributeMap"
    },
    "ExpectedAttributeValue": {
      "description": "<p>Represents a condition to be compared with an attribute value. This condition can be used with <code>DeleteItem</code>, <code>PutItem</code> or <code>UpdateItem</code> operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use <code>ExpectedAttributeValue</code> in one of two different ways:</p> <ul> <li> <p>Use <code>AttributeValueList</code> to specify one or more values to compare against an attribute. Use <code>ComparisonOperator</code> to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.</p> </li> <li> <p>Use <code>Value</code> to specify a value that DynamoDB will compare against an attribute. If the values match, then <code>ExpectedAttributeValue</code> evaluates to true and the conditional operation succeeds. Optionally, you can also set <code>Exists</code> to false, indicating that you <i>do not</i> expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.</p> </li> </ul> <p> <code>Value</code> and <code>Exists</code> are incompatible with <code>AttributeValueList</code> and <code>ComparisonOperator</code>. Note that if you use both sets of parameters at once, DynamoDB will return a <code>ValidationException</code> exception.</p>",
      "properties": {
        "AttributeValueList": {
          "$ref": "#/definitions/AttributeValueList",
          "description": "<p>One or more values to evaluate against the supplied attribute. The number of values in the list depends on the <code>ComparisonOperator</code> being used.</p> <p>For type Number, value comparisons are numeric.</p> <p>String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, <code>a</code> is greater than <code>A</code>, and <code>a</code> is greater than <code>B</code>. For a list of code values, see <a href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\">http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.</p> <p>For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.</p> <p>For information on specifying data types in JSON, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\">JSON Data Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ComparisonOperator": {
          "$ref": "#/definitions/ComparisonOperator",
          "description": "<p>A comparator for evaluating attributes in the <code>AttributeValueList</code>. For example, equals, greater than, less than, etc.</p> <p>The following comparison operators are available:</p> <p> <code>EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN</code> </p> <p>The following are descriptions of each comparison operator.</p> <ul> <li> <p> <code>EQ</code> : Equal. <code>EQ</code> is supported for all data types, including lists and maps.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>NE</code> : Not equal. <code>NE</code> is supported for all data types, including lists and maps.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an <code>AttributeValue</code> of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not equal <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>LE</code> : Less than or equal. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>LT</code> : Less than. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>GE</code> : Greater than or equal. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>GT</code> : Greater than. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not equal <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code>.</p> <p/> </li> <li> <p> <code>NOT_NULL</code> : The attribute exists. <code>NOT_NULL</code> is supported for all data types, including lists and maps.</p> <note> <p>This operator tests for the existence of an attribute, not its data type. If the data type of attribute \"<code>a</code>\" is null, and you evaluate it using <code>NOT_NULL</code>, the result is a Boolean <code>true</code>. This result is because the attribute \"<code>a</code>\" exists; its data type is not relevant to the <code>NOT_NULL</code> comparison operator.</p> </note> </li> <li> <p> <code>NULL</code> : The attribute does not exist. <code>NULL</code> is supported for all data types, including lists and maps.</p> <note> <p>This operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute \"<code>a</code>\" is null, and you evaluate it using <code>NULL</code>, the result is a Boolean <code>false</code>. This is because the attribute \"<code>a</code>\" exists; its data type is not relevant to the <code>NULL</code> comparison operator.</p> </note> </li> <li> <p> <code>CONTAINS</code> : Checks for a subsequence, or value in a set.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"<code>SS</code>\", \"<code>NS</code>\", or \"<code>BS</code>\"), then the operator evaluates to true if it finds an exact match with any member of the set.</p> <p>CONTAINS is supported for lists: When evaluating \"<code>a CONTAINS b</code>\", \"<code>a</code>\" can be a list; however, \"<code>b</code>\" cannot be a set, a map, or a list.</p> </li> <li> <p> <code>NOT_CONTAINS</code> : Checks for absence of a subsequence, or absence of a value in a set.</p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"<code>SS</code>\", \"<code>NS</code>\", or \"<code>BS</code>\"), then the operator evaluates to true if it <i>does not</i> find an exact match with any member of the set.</p> <p>NOT_CONTAINS is supported for lists: When evaluating \"<code>a NOT CONTAINS b</code>\", \"<code>a</code>\" can be a list; however, \"<code>b</code>\" cannot be a set, a map, or a list.</p> </li> <li> <p> <code>BEGINS_WITH</code> : Checks for a prefix. </p> <p> <code>AttributeValueList</code> can contain only one <code>AttributeValue</code> of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).</p> <p/> </li> <li> <p> <code>IN</code> : Checks for matching elements in a list.</p> <p> <code>AttributeValueList</code> can contain one or more <code>AttributeValue</code> elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.</p> </li> <li> <p> <code>BETWEEN</code> : Greater than or equal to the first value, and less than or equal to the second value. </p> <p> <code>AttributeValueList</code> must contain two <code>AttributeValue</code> elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an <code>AttributeValue</code> element of a different type than the one provided in the request, the value does not match. For example, <code>{\"S\":\"6\"}</code> does not compare to <code>{\"N\":\"6\"}</code>. Also, <code>{\"N\":\"6\"}</code> does not compare to <code>{\"NS\":[\"6\", \"2\", \"1\"]}</code> </p> </li> </ul>"
        },
        "Exists": {
          "$ref": "#/definitions/BooleanObject",
          "description": "<p>Causes DynamoDB to evaluate the value before attempting a conditional operation:</p> <ul> <li> <p>If <code>Exists</code> is <code>true</code>, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a <code>ConditionalCheckFailedException</code>.</p> </li> <li> <p>If <code>Exists</code> is <code>false</code>, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a <code>ConditionalCheckFailedException</code>.</p> </li> </ul> <p>The default setting for <code>Exists</code> is <code>true</code>. If you supply a <code>Value</code> all by itself, DynamoDB assumes the attribute exists: You don't have to set <code>Exists</code> to <code>true</code>, because it is implied.</p> <p>DynamoDB returns a <code>ValidationException</code> if:</p> <ul> <li> <p> <code>Exists</code> is <code>true</code> but there is no <code>Value</code> to check. (You expect a value to exist, but don't specify what that value is.)</p> </li> <li> <p> <code>Exists</code> is <code>false</code> but you also provide a <code>Value</code>. (You cannot expect an attribute to have a value, while also expecting it not to exist.)</p> </li> </ul>"
        },
        "Value": {
          "$ref": "#/definitions/AttributeValue",
          "description": "<p>Represents the data for the expected attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "type": "object",
      "title": "ExpectedAttributeValue"
    },
    "ExpressionAttributeNameMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ExpressionAttributeNameVariable"
          },
          "value": {
            "$ref": "#/definitions/AttributeName"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "ExpressionAttributeNameMap"
    },
    "ExpressionAttributeNameVariable": {
      "type": "string",
      "title": "ExpressionAttributeNameVariable"
    },
    "ExpressionAttributeValueMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ExpressionAttributeValueVariable"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "ExpressionAttributeValueMap"
    },
    "ExpressionAttributeValueVariable": {
      "type": "string",
      "title": "ExpressionAttributeValueVariable"
    },
    "FilterConditionMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/Condition"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "FilterConditionMap"
    },
    "GetItemInput": {
      "description": "Represents the input of a <code>GetItem</code> operation.",
      "example": {
        "Key": {
          "Artist": {
            "S": "Acme Band"
          },
          "SongTitle": {
            "S": "Happy Day"
          }
        },
        "TableName": "Music"
      },
      "properties": {
        "AttributesToGet": {
          "$ref": "#/definitions/AttributeNameList",
          "description": "This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConsistentRead": {
          "$ref": "#/definitions/ConsistentRead",
          "description": "Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads."
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "Key": {
          "$ref": "#/definitions/Key",
          "description": "<p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve.</p> <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>"
        },
        "ProjectionExpression": {
          "$ref": "#/definitions/ProjectionExpression",
          "description": "<p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p> <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table containing the requested item."
        }
      },
      "required": [
        "TableName",
        "Key"
      ],
      "type": "object",
      "title": "GetItemInput"
    },
    "GetItemOutput": {
      "description": "Represents the output of a <code>GetItem</code> operation.",
      "example": {
        "Item": {
          "AlbumTitle": {
            "S": "Songs About Life"
          },
          "Artist": {
            "S": "Acme Band"
          },
          "SongTitle": {
            "S": "Happy Day"
          }
        }
      },
      "properties": {
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>GetItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Item": {
          "$ref": "#/definitions/AttributeMap",
          "description": "A map of attribute names to <code>AttributeValue</code> objects, as specified by <code>ProjectionExpression</code>."
        }
      },
      "type": "object",
      "title": "GetItemOutput"
    },
    "GlobalSecondaryIndex": {
      "description": "Represents the properties of a global secondary index.",
      "properties": {
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the global secondary index. The name must be unique among all other indexes on this table."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
        },
        "Projection": {
          "$ref": "#/definitions/Projection",
          "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughput",
          "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "IndexName",
        "KeySchema",
        "Projection",
        "ProvisionedThroughput"
      ],
      "type": "object",
      "title": "GlobalSecondaryIndex"
    },
    "GlobalSecondaryIndexDescription": {
      "description": "Represents the properties of a global secondary index.",
      "properties": {
        "Backfilling": {
          "$ref": "#/definitions/Backfilling",
          "description": "<p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and <code>Backfilling</code> is false.</p> <note> <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p> </note>"
        },
        "IndexArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that uniquely identifies the index."
        },
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the global secondary index."
        },
        "IndexSizeBytes": {
          "$ref": "#/definitions/Long",
          "description": "The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "IndexStatus": {
          "$ref": "#/definitions/IndexStatus",
          "description": "<p>The current state of the global secondary index:</p> <ul> <li> <p> <code>CREATING</code> - The index is being created.</p> </li> <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li> <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li> <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li> </ul>"
        },
        "ItemCount": {
          "$ref": "#/definitions/Long",
          "description": "The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
        },
        "Projection": {
          "$ref": "#/definitions/Projection",
          "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughputDescription",
          "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "type": "object",
      "title": "GlobalSecondaryIndexDescription"
    },
    "GlobalSecondaryIndexDescriptionList": {
      "items": {
        "$ref": "#/definitions/GlobalSecondaryIndexDescription"
      },
      "type": "array",
      "title": "GlobalSecondaryIndexDescriptionList"
    },
    "GlobalSecondaryIndexList": {
      "items": {
        "$ref": "#/definitions/GlobalSecondaryIndex"
      },
      "type": "array",
      "title": "GlobalSecondaryIndexList"
    },
    "GlobalSecondaryIndexUpdate": {
      "description": "<p>Represents one of the following:</p> <ul> <li> <p>A new global secondary index to be added to an existing table.</p> </li> <li> <p>New provisioned throughput parameters for an existing global secondary index.</p> </li> <li> <p>An existing global secondary index to be removed from an existing table.</p> </li> </ul>",
      "properties": {
        "Create": {
          "$ref": "#/definitions/CreateGlobalSecondaryIndexAction",
          "description": "<p>The parameters required for creating a global secondary index on an existing table:</p> <ul> <li> <p> <code>IndexName </code> </p> </li> <li> <p> <code>KeySchema </code> </p> </li> <li> <p> <code>AttributeDefinitions </code> </p> </li> <li> <p> <code>Projection </code> </p> </li> <li> <p> <code>ProvisionedThroughput </code> </p> </li> </ul>"
        },
        "Delete": {
          "$ref": "#/definitions/DeleteGlobalSecondaryIndexAction",
          "description": "The name of an existing global secondary index to be removed."
        },
        "Update": {
          "$ref": "#/definitions/UpdateGlobalSecondaryIndexAction",
          "description": "The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index."
        }
      },
      "type": "object",
      "title": "GlobalSecondaryIndexUpdate"
    },
    "GlobalSecondaryIndexUpdateList": {
      "items": {
        "$ref": "#/definitions/GlobalSecondaryIndexUpdate"
      },
      "type": "array",
      "title": "GlobalSecondaryIndexUpdateList"
    },
    "IndexName": {
      "maxLength": 255,
      "minLength": 3,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string",
      "title": "IndexName"
    },
    "IndexStatus": {
      "enum": [
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE"
      ],
      "type": "string",
      "title": "IndexStatus"
    },
    "Integer": {
      "type": "integer",
      "title": "Integer"
    },
    "InternalServerError": {
      "description": "An error occurred on the server side.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The server encountered an internal error trying to fulfill the request."
        }
      },
      "type": "object",
      "title": "InternalServerError"
    },
    "ItemCollectionKeyAttributeMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "ItemCollectionKeyAttributeMap"
    },
    "ItemCollectionMetrics": {
      "description": "Information about item collections, if any, that were affected by the operation. <code>ItemCollectionMetrics</code> is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.",
      "properties": {
        "ItemCollectionKey": {
          "$ref": "#/definitions/ItemCollectionKeyAttributeMap",
          "description": "The partition key value of the item collection. This value is the same as the partition key value of the item."
        },
        "SizeEstimateRangeGB": {
          "$ref": "#/definitions/ItemCollectionSizeEstimateRange",
          "description": "<p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>"
        }
      },
      "type": "object",
      "title": "ItemCollectionMetrics"
    },
    "ItemCollectionMetricsMultiple": {
      "items": {
        "$ref": "#/definitions/ItemCollectionMetrics"
      },
      "type": "array",
      "title": "ItemCollectionMetricsMultiple"
    },
    "ItemCollectionMetricsPerTable": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/TableName"
          },
          "value": {
            "$ref": "#/definitions/ItemCollectionMetricsMultiple"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "ItemCollectionMetricsPerTable"
    },
    "ItemCollectionSizeEstimateBound": {
      "format": "double",
      "type": "number",
      "title": "ItemCollectionSizeEstimateBound"
    },
    "ItemCollectionSizeEstimateRange": {
      "items": {
        "$ref": "#/definitions/ItemCollectionSizeEstimateBound"
      },
      "type": "array",
      "title": "ItemCollectionSizeEstimateRange"
    },
    "ItemCollectionSizeLimitExceededException": {
      "description": "An item collection is too large. This exception is only returned for tables that have one or more local secondary indexes.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The total size of an item collection has exceeded the maximum limit of 10 gigabytes."
        }
      },
      "type": "object",
      "title": "ItemCollectionSizeLimitExceededException"
    },
    "ItemList": {
      "items": {
        "$ref": "#/definitions/AttributeMap"
      },
      "type": "array",
      "title": "ItemList"
    },
    "Key": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "Key"
    },
    "KeyConditions": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/Condition"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "KeyConditions"
    },
    "KeyExpression": {
      "type": "string",
      "title": "KeyExpression"
    },
    "KeyList": {
      "items": {
        "$ref": "#/definitions/Key"
      },
      "maxItems": 100,
      "minItems": 1,
      "type": "array",
      "title": "KeyList"
    },
    "KeySchema": {
      "items": {
        "$ref": "#/definitions/KeySchemaElement"
      },
      "maxItems": 2,
      "minItems": 1,
      "type": "array",
      "title": "KeySchema"
    },
    "KeySchemaAttributeName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "title": "KeySchemaAttributeName"
    },
    "KeySchemaElement": {
      "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/KeySchemaAttributeName",
          "description": "The name of a key attribute."
        },
        "KeyType": {
          "$ref": "#/definitions/KeyType",
          "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
        }
      },
      "required": [
        "AttributeName",
        "KeyType"
      ],
      "type": "object",
      "title": "KeySchemaElement"
    },
    "KeyType": {
      "enum": [
        "HASH",
        "RANGE"
      ],
      "type": "string",
      "title": "KeyType"
    },
    "KeysAndAttributes": {
      "description": "<p>Represents a set of primary keys and, for each key, the attributes to retrieve from the table.</p> <p>For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide <i>both</i> the partition key and the sort key.</p>",
      "properties": {
        "AttributesToGet": {
          "$ref": "#/definitions/AttributeNameList",
          "description": "This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\">Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConsistentRead": {
          "$ref": "#/definitions/ConsistentRead",
          "description": "The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used."
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "Keys": {
          "$ref": "#/definitions/KeyList",
          "description": "The primary key attribute values that define the items and the attributes associated with the items."
        },
        "ProjectionExpression": {
          "$ref": "#/definitions/ProjectionExpression",
          "description": "<p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the <code>ProjectionExpression</code> must be separated by commas.</p> <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "Keys"
      ],
      "type": "object",
      "title": "KeysAndAttributes"
    },
    "LimitExceededException": {
      "description": "<p>The number of concurrent table requests (cumulative number of tables in the <code>CREATING</code>, <code>DELETING</code> or <code>UPDATING</code> state) exceeds the maximum allowed of 10.</p> <p>Also, for tables with secondary indexes, only one of those tables can be in the <code>CREATING</code> state at any point in time. Do not attempt to create more than one such table simultaneously.</p> <p>The total limit of tables in the <code>ACTIVE</code> state is 250.</p>",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "Too many operations for a given subscriber."
        }
      },
      "type": "object",
      "title": "LimitExceededException"
    },
    "ListAttributeValue": {
      "items": {
        "$ref": "#/definitions/AttributeValue"
      },
      "type": "array",
      "title": "ListAttributeValue"
    },
    "ListTablesInput": {
      "description": "Represents the input of a <code>ListTables</code> operation.",
      "example": {},
      "properties": {
        "ExclusiveStartTableName": {
          "$ref": "#/definitions/TableName",
          "description": "The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results."
        },
        "Limit": {
          "$ref": "#/definitions/ListTablesInputLimit",
          "description": "A maximum number of table names to return. If this parameter is not specified, the limit is 100."
        }
      },
      "type": "object",
      "title": "ListTablesInput"
    },
    "ListTablesInputLimit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "title": "ListTablesInputLimit"
    },
    "ListTablesOutput": {
      "description": "Represents the output of a <code>ListTables</code> operation.",
      "example": {
        "TableNames": [
          "Forum",
          "ProductCatalog",
          "Reply",
          "Thread"
        ]
      },
      "properties": {
        "LastEvaluatedTableName": {
          "$ref": "#/definitions/TableName",
          "description": "<p>The name of the last table in the current page of results. Use this value as the <code>ExclusiveStartTableName</code> in a new request to obtain the next page of results, until all the table names are returned.</p> <p>If you do not receive a <code>LastEvaluatedTableName</code> value in the response, this means that there are no more table names to be retrieved.</p>"
        },
        "TableNames": {
          "$ref": "#/definitions/TableNameList",
          "description": "<p>The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.</p> <p>If <code>LastEvaluatedTableName</code> also appears in the output, you can use this value as the <code>ExclusiveStartTableName</code> parameter in a subsequent <code>ListTables</code> request and obtain the next page of results.</p>"
        }
      },
      "type": "object",
      "title": "ListTablesOutput"
    },
    "ListTagsOfResourceInput": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextTokenString",
          "description": "An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results."
        },
        "ResourceArn": {
          "$ref": "#/definitions/ResourceArnString",
          "description": "The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN)."
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "object",
      "title": "ListTagsOfResourceInput"
    },
    "ListTagsOfResourceOutput": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextTokenString",
          "description": "If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tags currently associated with the Amazon DynamoDB resource."
        }
      },
      "type": "object",
      "title": "ListTagsOfResourceOutput"
    },
    "LocalSecondaryIndex": {
      "description": "Represents the properties of a local secondary index.",
      "properties": {
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the local secondary index. The name must be unique among all other indexes on this table."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
        },
        "Projection": {
          "$ref": "#/definitions/Projection",
          "description": "Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
        }
      },
      "required": [
        "IndexName",
        "KeySchema",
        "Projection"
      ],
      "type": "object",
      "title": "LocalSecondaryIndex"
    },
    "LocalSecondaryIndexDescription": {
      "description": "Represents the properties of a local secondary index.",
      "properties": {
        "IndexArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that uniquely identifies the index."
        },
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "Represents the name of the local secondary index."
        },
        "IndexSizeBytes": {
          "$ref": "#/definitions/Long",
          "description": "The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "ItemCount": {
          "$ref": "#/definitions/Long",
          "description": "The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
        },
        "Projection": {
          "$ref": "#/definitions/Projection",
          "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
        }
      },
      "type": "object",
      "title": "LocalSecondaryIndexDescription"
    },
    "LocalSecondaryIndexDescriptionList": {
      "items": {
        "$ref": "#/definitions/LocalSecondaryIndexDescription"
      },
      "type": "array",
      "title": "LocalSecondaryIndexDescriptionList"
    },
    "LocalSecondaryIndexList": {
      "items": {
        "$ref": "#/definitions/LocalSecondaryIndex"
      },
      "type": "array",
      "title": "LocalSecondaryIndexList"
    },
    "Long": {
      "type": "integer",
      "title": "Long"
    },
    "MapAttributeValue": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "MapAttributeValue"
    },
    "NextTokenString": {
      "type": "string",
      "title": "NextTokenString"
    },
    "NonKeyAttributeName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "title": "NonKeyAttributeName"
    },
    "NonKeyAttributeNameList": {
      "items": {
        "$ref": "#/definitions/NonKeyAttributeName"
      },
      "maxItems": 20,
      "minItems": 1,
      "type": "array",
      "title": "NonKeyAttributeNameList"
    },
    "NullAttributeValue": {
      "type": "boolean",
      "title": "NullAttributeValue"
    },
    "NumberAttributeValue": {
      "type": "string",
      "title": "NumberAttributeValue"
    },
    "NumberSetAttributeValue": {
      "items": {
        "$ref": "#/definitions/NumberAttributeValue"
      },
      "type": "array",
      "title": "NumberSetAttributeValue"
    },
    "PositiveIntegerObject": {
      "minimum": 1,
      "type": "integer",
      "title": "PositiveIntegerObject"
    },
    "PositiveLongObject": {
      "minimum": 1,
      "type": "integer",
      "title": "PositiveLongObject"
    },
    "Projection": {
      "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.",
      "properties": {
        "NonKeyAttributes": {
          "$ref": "#/definitions/NonKeyAttributeNameList",
          "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>"
        },
        "ProjectionType": {
          "$ref": "#/definitions/ProjectionType",
          "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "Projection"
    },
    "ProjectionExpression": {
      "type": "string",
      "title": "ProjectionExpression"
    },
    "ProjectionType": {
      "enum": [
        "ALL",
        "KEYS_ONLY",
        "INCLUDE"
      ],
      "type": "string",
      "title": "ProjectionType"
    },
    "ProvisionedThroughput": {
      "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>",
      "properties": {
        "ReadCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "WriteCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        }
      },
      "required": [
        "ReadCapacityUnits",
        "WriteCapacityUnits"
      ],
      "type": "object",
      "title": "ProvisionedThroughput"
    },
    "ProvisionedThroughputDescription": {
      "description": "Represents the provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.",
      "properties": {
        "LastDecreaseDateTime": {
          "$ref": "#/definitions/Date",
          "description": "The date and time of the last provisioned throughput decrease for this table."
        },
        "LastIncreaseDateTime": {
          "$ref": "#/definitions/Date",
          "description": "The date and time of the last provisioned throughput increase for this table."
        },
        "NumberOfDecreasesToday": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ReadCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 <code>ReadCapacityUnits</code> per second provides 100 eventually consistent <code>ReadCapacityUnits</code> per second."
        },
        "WriteCapacityUnits": {
          "$ref": "#/definitions/PositiveLongObject",
          "description": "The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>."
        }
      },
      "type": "object",
      "title": "ProvisionedThroughputDescription"
    },
    "ProvisionedThroughputExceededException": {
      "description": "Your request rate is too high. The AWS SDKs for DynamoDB automatically retry requests that receive this exception. Your request is eventually successful, unless your retry queue is too large to finish. Reduce the frequency of requests and use exponential backoff. For more information, go to <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff\">Error Retries and Exponential Backoff</a> in the <i>Amazon DynamoDB Developer Guide</i>.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "You exceeded your maximum allowed provisioned throughput."
        }
      },
      "type": "object",
      "title": "ProvisionedThroughputExceededException"
    },
    "PutItemInput": {
      "description": "Represents the input of a <code>PutItem</code> operation.",
      "example": {
        "Item": {
          "AlbumTitle": {
            "S": "Somewhat Famous"
          },
          "Artist": {
            "S": "No One You Know"
          },
          "SongTitle": {
            "S": "Call Me Today"
          }
        },
        "ReturnConsumedCapacity": "TOTAL",
        "TableName": "Music"
      },
      "properties": {
        "ConditionExpression": {
          "$ref": "#/definitions/ConditionExpression",
          "description": "<p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to succeed.</p> <p>An expression can contain any of the following:</p> <ul> <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li> <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li> <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li> </ul> <p>For more information on condition expressions, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ConditionalOperator": {
          "$ref": "#/definitions/ConditionalOperator",
          "description": "This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Expected": {
          "$ref": "#/definitions/ExpectedAttributeMap",
          "description": "This is a legacy parameter. Use <code>ConditionExpresssion</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ExpressionAttributeValues": {
          "$ref": "#/definitions/ExpressionAttributeValueMap",
          "description": "<p>One or more values that can be substituted in an expression.</p> <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p> <p> <code>Available | Backordered | Discontinued</code> </p> <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p> <p> <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }</code> </p> <p>You could then use these values in an expression, such as this:</p> <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p> <p>For more information on expression attribute values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "Item": {
          "$ref": "#/definitions/PutItemInputAttributeMap",
          "description": "<p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p> <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p> <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p> <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ReturnItemCollectionMetrics": {
          "$ref": "#/definitions/ReturnItemCollectionMetrics",
          "description": "Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned."
        },
        "ReturnValues": {
          "$ref": "#/definitions/ReturnValue",
          "description": "<p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p> <ul> <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li> <li> <p> <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned.</p> </li> </ul> <note> <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>.</p> </note>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to contain the item."
        }
      },
      "required": [
        "TableName",
        "Item"
      ],
      "type": "object",
      "title": "PutItemInput"
    },
    "PutItemInputAttributeMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/AttributeName"
          },
          "value": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "PutItemInputAttributeMap"
    },
    "PutItemOutput": {
      "description": "Represents the output of a <code>PutItem</code> operation.",
      "example": {
        "ConsumedCapacity": {
          "CapacityUnits": 1,
          "TableName": "Music"
        }
      },
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeMap",
          "description": "The attribute values as they appeared before the <code>PutItem</code> operation, but only if <code>ReturnValues</code> is specified as <code>ALL_OLD</code> in the request. Each element consists of an attribute name and an attribute value."
        },
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>PutItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ItemCollectionMetrics": {
          "$ref": "#/definitions/ItemCollectionMetrics",
          "description": "<p>Information about item collections, if any, that were affected by the <code>PutItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p> <p>Each <code>ItemCollectionMetrics</code> element consists of:</p> <ul> <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li> <li> <p> <code>SizeEstimateRange</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "PutItemOutput"
    },
    "PutRequest": {
      "description": "Represents a request to perform a <code>PutItem</code> operation on an item.",
      "properties": {
        "Item": {
          "$ref": "#/definitions/PutItemInputAttributeMap",
          "description": "A map of attribute name to attribute values, representing the primary key of an item to be processed by <code>PutItem</code>. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema."
        }
      },
      "required": [
        "Item"
      ],
      "type": "object",
      "title": "PutRequest"
    },
    "QueryInput": {
      "description": "Represents the input of a <code>Query</code> operation.",
      "example": {
        "ExpressionAttributeValues": {
          ":v1": {
            "S": "No One You Know"
          }
        },
        "KeyConditionExpression": "Artist = :v1",
        "ProjectionExpression": "SongTitle",
        "TableName": "Music"
      },
      "properties": {
        "AttributesToGet": {
          "$ref": "#/definitions/AttributeNameList",
          "description": "This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConditionalOperator": {
          "$ref": "#/definitions/ConditionalOperator",
          "description": "This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConsistentRead": {
          "$ref": "#/definitions/ConsistentRead",
          "description": "<p>Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p> <p>Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to <code>true</code>, you will receive a <code>ValidationException</code>.</p>"
        },
        "ExclusiveStartKey": {
          "$ref": "#/definitions/Key",
          "description": "<p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p> <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>"
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ExpressionAttributeValues": {
          "$ref": "#/definitions/ExpressionAttributeValueMap",
          "description": "<p>One or more values that can be substituted in an expression.</p> <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p> <p> <code>Available | Backordered | Discontinued</code> </p> <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p> <p> <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }</code> </p> <p>You could then use these values in an expression, such as this:</p> <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p> <p>For more information on expression attribute values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "FilterExpression": {
          "$ref": "#/definitions/ConditionExpression",
          "description": "<p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code> criteria are not returned.</p> <p>A <code>FilterExpression</code> does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.</p> <note> <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.</p> </note> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults\">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code> "
        },
        "KeyConditionExpression": {
          "$ref": "#/definitions/KeyExpression",
          "description": "<p>The condition that specifies the key value(s) for items to be retrieved by the <code>Query</code> action.</p> <p>The condition must perform an equality test on a single partition key value. The condition can also perform one of several comparison tests on a single sort key value. <code>Query</code> can use <code>KeyConditionExpression</code> to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.</p> <p>The partition key equality test is required, and must be specified in the following format:</p> <p> <code>partitionKeyName</code> <i>=</i> <code>:partitionkeyval</code> </p> <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p> <p> <code>partitionKeyName</code> <code>=</code> <code>:partitionkeyval</code> <code>AND</code> <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> </p> <p>Valid comparisons for the sort key condition are as follows:</p> <ul> <li> <p> <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p> </li> <li> <p> <code>sortKeyName</code> <code>&lt;</code> <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p> </li> <li> <p> <code>sortKeyName</code> <code>&lt;=</code> <code>:sortkeyval</code> - true if the sort key value is less than or equal to <code>:sortkeyval</code>.</p> </li> <li> <p> <code>sortKeyName</code> <code>&gt;</code> <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p> </li> <li> <p> <code>sortKeyName</code> <code>&gt;= </code> <code>:sortkeyval</code> - true if the sort key value is greater than or equal to <code>:sortkeyval</code>.</p> </li> <li> <p> <code>sortKeyName</code> <code>BETWEEN</code> <code>:sortkeyval1</code> <code>AND</code> <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p> </li> <li> <p> <code>begins_with (</code> <code>sortKeyName</code>, <code>:sortkeyval</code> <code>)</code> - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name <code>begins_with</code> is case-sensitive.</p> </li> </ul> <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p> <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved word:</p> <ul> <li> <p> <code>Size = :myval</code> </p> </li> </ul> <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p> <ul> <li> <p> <code>#S = :myval</code> </p> </li> </ul> <p>For a list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html\">Using Placeholders for Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "KeyConditions": {
          "$ref": "#/definitions/KeyConditions",
          "description": "This is a legacy parameter. Use <code>KeyConditionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html\">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Limit": {
          "$ref": "#/definitions/PositiveIntegerObject",
          "description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the operation. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\">Query and Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ProjectionExpression": {
          "$ref": "#/definitions/ProjectionExpression",
          "description": "<p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p> <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "QueryFilter": {
          "$ref": "#/definitions/FilterConditionMap",
          "description": "This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html\">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ScanIndexForward": {
          "$ref": "#/definitions/BooleanObject",
          "description": "<p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p> <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of ASCII character code values. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p> <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>"
        },
        "Select": {
          "$ref": "#/definitions/Select",
          "description": "<p>The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.</p> <ul> <li> <p> <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.</p> </li> <li> <p> <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p> </li> <li> <p> <code>COUNT</code> - Returns the number of matching items, rather than the matching items themselves.</p> </li> <li> <p> <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>AttributesToGet</code>. This return value is equivalent to specifying <code>AttributesToGet</code> without specifying any value for <code>Select</code>.</p> <p>If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.</p> <p>If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.</p> </li> </ul> <p>If neither <code>Select</code> nor <code>AttributesToGet</code> are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot use both <code>Select</code> and <code>AttributesToGet</code> together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying <code>AttributesToGet</code> without any value for <code>Select</code>.)</p> <note> <p>If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code> can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code> will return an error.</p> </note>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table containing the requested items."
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "QueryInput"
    },
    "QueryOutput": {
      "description": "Represents the output of a <code>Query</code> operation.",
      "example": {
        "ConsumedCapacity": {},
        "Count": 2,
        "Items": [
          {
            "SongTitle": {
              "S": "Call Me Today"
            }
          }
        ],
        "ScannedCount": 2
      },
      "properties": {
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>Query</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Count": {
          "$ref": "#/definitions/Integer",
          "description": "<p>The number of items in the response.</p> <p>If you used a <code>QueryFilter</code> in the request, then <code>Count</code> is the number of items returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items before the filter was applied.</p> <p>If you did not use a filter in the request, then <code>Count</code> and <code>ScannedCount</code> are the same.</p>"
        },
        "Items": {
          "$ref": "#/definitions/ItemList",
          "description": "An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute."
        },
        "LastEvaluatedKey": {
          "$ref": "#/definitions/Key",
          "description": "<p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p> <p>If <code>LastEvaluatedKey</code> is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.</p> <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>"
        },
        "ScannedCount": {
          "$ref": "#/definitions/Integer",
          "description": "<p>The number of items evaluated, before any <code>QueryFilter</code> is applied. A high <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient <code>Query</code> operation. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\">Count and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as <code>Count</code>.</p>"
        }
      },
      "type": "object",
      "title": "QueryOutput"
    },
    "ResourceArnString": {
      "maxLength": 1283,
      "minLength": 1,
      "type": "string",
      "title": "ResourceArnString"
    },
    "ResourceInUseException": {
      "description": "The operation conflicts with the resource's availability. For example, you attempted to recreate an existing table, or tried to delete a table currently in the <code>CREATING</code> state.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The resource which is being attempted to be changed is in use."
        }
      },
      "type": "object",
      "title": "ResourceInUseException"
    },
    "ResourceNotFoundException": {
      "description": "The operation tried to access a nonexistent table or index. The resource might not be specified correctly, or its status might not be <code>ACTIVE</code>.",
      "properties": {
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "description": "The resource which is being requested does not exist."
        }
      },
      "type": "object",
      "title": "ResourceNotFoundException"
    },
    "ReturnConsumedCapacity": {
      "description": "<p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>",
      "enum": [
        "INDEXES",
        "TOTAL",
        "NONE"
      ],
      "type": "string",
      "title": "ReturnConsumedCapacity"
    },
    "ReturnItemCollectionMetrics": {
      "enum": [
        "SIZE",
        "NONE"
      ],
      "type": "string",
      "title": "ReturnItemCollectionMetrics"
    },
    "ReturnValue": {
      "enum": [
        "NONE",
        "ALL_OLD",
        "UPDATED_OLD",
        "ALL_NEW",
        "UPDATED_NEW"
      ],
      "type": "string",
      "title": "ReturnValue"
    },
    "ScalarAttributeType": {
      "enum": [
        "S",
        "N",
        "B"
      ],
      "type": "string",
      "title": "ScalarAttributeType"
    },
    "ScanInput": {
      "description": "Represents the input of a <code>Scan</code> operation.",
      "example": {
        "ExpressionAttributeNames": {
          "AT": "AlbumTitle",
          "ST": "SongTitle"
        },
        "ExpressionAttributeValues": {
          ":a": {
            "S": "No One You Know"
          }
        },
        "FilterExpression": "Artist = :a",
        "ProjectionExpression": "#ST, #AT",
        "TableName": "Music"
      },
      "properties": {
        "AttributesToGet": {
          "$ref": "#/definitions/AttributeNameList",
          "description": "This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html\">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConditionalOperator": {
          "$ref": "#/definitions/ConditionalOperator",
          "description": "This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConsistentRead": {
          "$ref": "#/definitions/ConsistentRead",
          "description": "<p>A Boolean value that determines the read consistency model during the scan:</p> <ul> <li> <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from <code>Scan</code> might not contain the results from other recently completed write operations (PutItem, UpdateItem or DeleteItem).</p> </li> <li> <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p> </li> </ul> <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p> <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>"
        },
        "ExclusiveStartKey": {
          "$ref": "#/definitions/Key",
          "description": "<p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p> <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p> <p>In a parallel scan, a <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>"
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ExpressionAttributeValues": {
          "$ref": "#/definitions/ExpressionAttributeValueMap",
          "description": "<p>One or more values that can be substituted in an expression.</p> <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p> <p> <code>Available | Backordered | Discontinued</code> </p> <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p> <p> <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }</code> </p> <p>You could then use these values in an expression, such as this:</p> <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p> <p>For more information on expression attribute values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "FilterExpression": {
          "$ref": "#/definitions/ConditionExpression",
          "description": "<p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code> criteria are not returned.</p> <note> <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.</p> </note> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults\">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>."
        },
        "Limit": {
          "$ref": "#/definitions/PositiveIntegerObject",
          "description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the operation. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\">Query and Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ProjectionExpression": {
          "$ref": "#/definitions/ProjectionExpression",
          "description": "<p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p> <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ScanFilter": {
          "$ref": "#/definitions/FilterConditionMap",
          "description": "This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html\">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Segment": {
          "$ref": "#/definitions/ScanSegment",
          "description": "<p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be scanned by an application worker.</p> <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value of 0, the second thread specifies 1, and so on.</p> <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code> operation.</p> <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value provided for <code>TotalSegments</code>.</p> <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>"
        },
        "Select": {
          "$ref": "#/definitions/Select",
          "description": "<p>The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.</p> <ul> <li> <p> <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.</p> </li> <li> <p> <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p> </li> <li> <p> <code>COUNT</code> - Returns the number of matching items, rather than the matching items themselves.</p> </li> <li> <p> <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>AttributesToGet</code>. This return value is equivalent to specifying <code>AttributesToGet</code> without specifying any value for <code>Select</code>.</p> <p>If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.</p> <p>If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.</p> </li> </ul> <p>If neither <code>Select</code> nor <code>AttributesToGet</code> are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot use both <code>Select</code> and <code>AttributesToGet</code> together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying <code>AttributesToGet</code> without any value for <code>Select</code>.)</p> <note> <p>If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code> can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code> will return an error.</p> </note>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs."
        },
        "TotalSegments": {
          "$ref": "#/definitions/ScanTotalSegments",
          "description": "<p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of segments into which the <code>Scan</code> operation will be divided. The value of <code>TotalSegments</code> corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a <code>TotalSegments</code> value of 4.</p> <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will be sequential rather than parallel.</p> <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>"
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "ScanInput"
    },
    "ScanOutput": {
      "description": "Represents the output of a <code>Scan</code> operation.",
      "example": {
        "ConsumedCapacity": {},
        "Count": 2,
        "Items": [
          {
            "AlbumTitle": {
              "S": "Somewhat Famous"
            },
            "SongTitle": {
              "S": "Call Me Today"
            }
          },
          {
            "AlbumTitle": {
              "S": "Blue Sky Blues"
            },
            "SongTitle": {
              "S": "Scared of My Shadow"
            }
          }
        ],
        "ScannedCount": 3
      },
      "properties": {
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>Scan</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Count": {
          "$ref": "#/definitions/Integer",
          "description": "<p>The number of items in the response.</p> <p>If you set <code>ScanFilter</code> in the request, then <code>Count</code> is the number of items returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items before the filter was applied.</p> <p>If you did not use a filter in the request, then <code>Count</code> is the same as <code>ScannedCount</code>.</p>"
        },
        "Items": {
          "$ref": "#/definitions/ItemList",
          "description": "An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute."
        },
        "LastEvaluatedKey": {
          "$ref": "#/definitions/Key",
          "description": "<p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p> <p>If <code>LastEvaluatedKey</code> is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.</p> <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>"
        },
        "ScannedCount": {
          "$ref": "#/definitions/Integer",
          "description": "<p>The number of items evaluated, before any <code>ScanFilter</code> is applied. A high <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient <code>Scan</code> operation. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\">Count and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as <code>Count</code>.</p>"
        }
      },
      "type": "object",
      "title": "ScanOutput"
    },
    "ScanSegment": {
      "maximum": 999999,
      "minimum": 0,
      "type": "integer",
      "title": "ScanSegment"
    },
    "ScanTotalSegments": {
      "maximum": 1000000,
      "minimum": 1,
      "type": "integer",
      "title": "ScanTotalSegments"
    },
    "SecondaryIndexesCapacityMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/IndexName"
          },
          "value": {
            "$ref": "#/definitions/Capacity"
          }
        },
        "type": "object"
      },
      "type": "array",
      "title": "SecondaryIndexesCapacityMap"
    },
    "Select": {
      "enum": [
        "ALL_ATTRIBUTES",
        "ALL_PROJECTED_ATTRIBUTES",
        "SPECIFIC_ATTRIBUTES",
        "COUNT"
      ],
      "type": "string",
      "title": "Select"
    },
    "StreamArn": {
      "maxLength": 1024,
      "minLength": 37,
      "type": "string",
      "title": "StreamArn"
    },
    "StreamEnabled": {
      "type": "boolean",
      "title": "StreamEnabled"
    },
    "StreamSpecification": {
      "description": "Represents the DynamoDB Streams configuration for a table in DynamoDB.",
      "properties": {
        "StreamEnabled": {
          "$ref": "#/definitions/StreamEnabled",
          "description": "Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table."
        },
        "StreamViewType": {
          "$ref": "#/definitions/StreamViewType",
          "description": "<p> When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the stream for this table. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "StreamSpecification"
    },
    "StreamViewType": {
      "enum": [
        "NEW_IMAGE",
        "OLD_IMAGE",
        "NEW_AND_OLD_IMAGES",
        "KEYS_ONLY"
      ],
      "type": "string",
      "title": "StreamViewType"
    },
    "String": {
      "type": "string",
      "title": "String"
    },
    "StringAttributeValue": {
      "type": "string",
      "title": "StringAttributeValue"
    },
    "StringSetAttributeValue": {
      "items": {
        "$ref": "#/definitions/StringAttributeValue"
      },
      "type": "array",
      "title": "StringSetAttributeValue"
    },
    "TableDescription": {
      "description": "Represents the properties of a table.",
      "properties": {
        "AttributeDefinitions": {
          "$ref": "#/definitions/AttributeDefinitions",
          "description": "<p>An array of <code>AttributeDefinition</code> objects. Each of these objects describes one attribute in the table and index key schema.</p> <p>Each <code>AttributeDefinition</code> object in this array is composed of:</p> <ul> <li> <p> <code>AttributeName</code> - The name of the attribute.</p> </li> <li> <p> <code>AttributeType</code> - The data type for the attribute.</p> </li> </ul>"
        },
        "CreationDateTime": {
          "$ref": "#/definitions/Date",
          "description": "The date and time when the table was created, in <a href=\"http://www.epochconverter.com/\">UNIX epoch time</a> format."
        },
        "GlobalSecondaryIndexes": {
          "$ref": "#/definitions/GlobalSecondaryIndexDescriptionList",
          "description": "<p>The global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:</p> <ul> <li> <p> <code>Backfilling</code> - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table; it is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a <code>CreateTable</code> operation.)</p> </li> <li> <p> <code>IndexName</code> - The name of the global secondary index.</p> </li> <li> <p> <code>IndexSizeBytes</code> - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. </p> </li> <li> <p> <code>IndexStatus</code> - The current status of the global secondary index:</p> <ul> <li> <p> <code>CREATING</code> - The index is being created.</p> </li> <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li> <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li> <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li> </ul> </li> <li> <p> <code>ItemCount</code> - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. </p> </li> <li> <p> <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> <li> <p> <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. </p> </li> </ul> <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>"
        },
        "ItemCount": {
          "$ref": "#/definitions/Long",
          "description": "The number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "KeySchema": {
          "$ref": "#/definitions/KeySchema",
          "description": "<p>The primary key structure for the table. Each <code>KeySchemaElement</code> consists of:</p> <ul> <li> <p> <code>AttributeName</code> - The name of the attribute.</p> </li> <li> <p> <code>KeyType</code> - The role of the attribute:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note> </li> </ul> <p>For more information about primary keys, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "LatestStreamArn": {
          "$ref": "#/definitions/StreamArn",
          "description": "The Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table."
        },
        "LatestStreamLabel": {
          "$ref": "#/definitions/String",
          "description": "<p>A timestamp, in ISO 8601 format, for this stream.</p> <p>Note that <code>LatestStreamLabel</code> is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:</p> <ul> <li> <p>the AWS customer ID.</p> </li> <li> <p>the table name.</p> </li> <li> <p>the <code>StreamLabel</code>.</p> </li> </ul>"
        },
        "LocalSecondaryIndexes": {
          "$ref": "#/definitions/LocalSecondaryIndexDescriptionList",
          "description": "<p>Represents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:</p> <ul> <li> <p> <code>IndexName</code> - The name of the local secondary index.</p> </li> <li> <p> <code>KeySchema</code> - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> <li> <p> <code>IndexSizeBytes</code> - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p> </li> <li> <p> <code>ItemCount</code> - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p> </li> </ul> <p>If the table is in the <code>DELETING</code> state, no information about indexes will be returned.</p>"
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughputDescription",
          "description": "The provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases."
        },
        "StreamSpecification": {
          "$ref": "#/definitions/StreamSpecification",
          "description": "The current DynamoDB Streams configuration for the table."
        },
        "TableArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that uniquely identifies the table."
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table."
        },
        "TableSizeBytes": {
          "$ref": "#/definitions/Long",
          "description": "The total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value."
        },
        "TableStatus": {
          "$ref": "#/definitions/TableStatus",
          "description": "<p>The current state of the table:</p> <ul> <li> <p> <code>CREATING</code> - The table is being created.</p> </li> <li> <p> <code>UPDATING</code> - The table is being updated.</p> </li> <li> <p> <code>DELETING</code> - The table is being deleted.</p> </li> <li> <p> <code>ACTIVE</code> - The table is ready for use.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "TableDescription"
    },
    "TableName": {
      "maxLength": 255,
      "minLength": 3,
      "pattern": "[a-zA-Z0-9_.-]+",
      "type": "string",
      "title": "TableName"
    },
    "TableNameList": {
      "items": {
        "$ref": "#/definitions/TableName"
      },
      "type": "array",
      "title": "TableNameList"
    },
    "TableStatus": {
      "enum": [
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE"
      ],
      "type": "string",
      "title": "TableStatus"
    },
    "Tag": {
      "description": "<p>Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. </p> <p> AWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag. </p> <p>For an overview on tagging DynamoDB resources, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\">Tagging for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagKeyString",
          "description": "The key of the tag.Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value. "
        },
        "Value": {
          "$ref": "#/definitions/TagValueString",
          "description": "The value of the tag. Tag values are case-sensitive and can be null."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object",
      "title": "Tag"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKeyString"
      },
      "type": "array",
      "title": "TagKeyList"
    },
    "TagKeyString": {
      "maxLength": 128,
      "minLength": 1,
      "type": "string",
      "title": "TagKeyString"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array",
      "title": "TagList"
    },
    "TagResourceInput": {
      "properties": {
        "ResourceArn": {
          "$ref": "#/definitions/ResourceArnString",
          "description": "Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN)."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tags to be assigned to the Amazon DynamoDB resource."
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "object",
      "title": "TagResourceInput"
    },
    "TagValueString": {
      "maxLength": 256,
      "minLength": 0,
      "type": "string",
      "title": "TagValueString"
    },
    "TimeToLiveAttributeName": {
      "maxLength": 255,
      "minLength": 1,
      "type": "string",
      "title": "TimeToLiveAttributeName"
    },
    "TimeToLiveDescription": {
      "description": "The description of the Time to Live (TTL) status on the specified table. ",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/TimeToLiveAttributeName",
          "description": " The name of the Time to Live attribute for items in the table."
        },
        "TimeToLiveStatus": {
          "$ref": "#/definitions/TimeToLiveStatus",
          "description": " The Time to Live status for the table."
        }
      },
      "type": "object",
      "title": "TimeToLiveDescription"
    },
    "TimeToLiveEnabled": {
      "type": "boolean",
      "title": "TimeToLiveEnabled"
    },
    "TimeToLiveSpecification": {
      "description": "Represents the settings used to enable or disable Time to Live for the specified table.",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/TimeToLiveAttributeName",
          "description": "The name of the Time to Live attribute used to store the expiration time for items in the table."
        },
        "Enabled": {
          "$ref": "#/definitions/TimeToLiveEnabled",
          "description": "Indicates whether Time To Live is to be enabled (true) or disabled (false) on the table."
        }
      },
      "required": [
        "Enabled",
        "AttributeName"
      ],
      "type": "object",
      "title": "TimeToLiveSpecification"
    },
    "TimeToLiveStatus": {
      "enum": [
        "ENABLING",
        "DISABLING",
        "ENABLED",
        "DISABLED"
      ],
      "type": "string",
      "title": "TimeToLiveStatus"
    },
    "UntagResourceInput": {
      "properties": {
        "ResourceArn": {
          "$ref": "#/definitions/ResourceArnString",
          "description": "The Amazon DyanamoDB resource the tags will be removed from. This value is an Amazon Resource Name (ARN)."
        },
        "TagKeys": {
          "$ref": "#/definitions/TagKeyList",
          "description": "A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the Amazon DynamoDB resource."
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "object",
      "title": "UntagResourceInput"
    },
    "UpdateExpression": {
      "type": "string",
      "title": "UpdateExpression"
    },
    "UpdateGlobalSecondaryIndexAction": {
      "description": "Represents the new provisioned throughput settings to be applied to a global secondary index.",
      "properties": {
        "IndexName": {
          "$ref": "#/definitions/IndexName",
          "description": "The name of the global secondary index to be updated."
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughput",
          "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "IndexName",
        "ProvisionedThroughput"
      ],
      "type": "object",
      "title": "UpdateGlobalSecondaryIndexAction"
    },
    "UpdateItemInput": {
      "description": "Represents the input of an <code>UpdateItem</code> operation.",
      "example": {
        "ExpressionAttributeNames": {
          "#AT": "AlbumTitle",
          "#Y": "Year"
        },
        "ExpressionAttributeValues": {
          ":t": {
            "S": "Louder Than Ever"
          },
          ":y": {
            "N": "2015"
          }
        },
        "Key": {
          "Artist": {
            "S": "Acme Band"
          },
          "SongTitle": {
            "S": "Happy Day"
          }
        },
        "ReturnValues": "ALL_NEW",
        "TableName": "Music",
        "UpdateExpression": "SET #Y = :y, #AT = :t"
      },
      "properties": {
        "AttributeUpdates": {
          "$ref": "#/definitions/AttributeUpdates",
          "description": "This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html\">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ConditionExpression": {
          "$ref": "#/definitions/ConditionExpression",
          "description": "<p>A condition that must be satisfied in order for a conditional update to succeed.</p> <p>An expression can contain any of the following:</p> <ul> <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li> <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li> <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li> </ul> <p>For more information on condition expressions, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ConditionalOperator": {
          "$ref": "#/definitions/ConditionalOperator",
          "description": "This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html\">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "Expected": {
          "$ref": "#/definitions/ExpectedAttributeMap",
          "description": "This is a legacy parameter. Use <code>ConditionExpresssion</code> instead. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html\">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ExpressionAttributeNames": {
          "$ref": "#/definitions/ExpressionAttributeNameMap",
          "description": "<p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li> <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li> <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li> </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p> <ul> <li> <p> <code>Percentile</code> </p> </li> </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html\">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p> <ul> <li> <p> <code>{\"#P\":\"Percentile\"}</code> </p> </li> </ul> <p>You could then use this substitution in an expression, as in this example:</p> <ul> <li> <p> <code>#P = :val</code> </p> </li> </ul> <note> <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p> </note> <p>For more information on expression attribute names, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "ExpressionAttributeValues": {
          "$ref": "#/definitions/ExpressionAttributeValueMap",
          "description": "<p>One or more values that can be substituted in an expression.</p> <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p> <p> <code>Available | Backordered | Discontinued</code> </p> <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p> <p> <code>{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }</code> </p> <p>You could then use these values in an expression, such as this:</p> <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p> <p>For more information on expression attribute values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html\">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        },
        "Key": {
          "$ref": "#/definitions/Key",
          "description": "<p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p> <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>"
        },
        "ReturnConsumedCapacity": {
          "$ref": "#/definitions/ReturnConsumedCapacity"
        },
        "ReturnItemCollectionMetrics": {
          "$ref": "#/definitions/ReturnItemCollectionMetrics",
          "description": "Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned."
        },
        "ReturnValues": {
          "$ref": "#/definitions/ReturnValue",
          "description": "<p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared either before or after they were updated. For <code>UpdateItem</code>, the valid values are:</p> <ul> <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li> <li> <p> <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p> </li> <li> <p> <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p> </li> <li> <p> <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p> </li> <li> <p> <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p> </li> </ul> <p>There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No Read Capacity Units are consumed.</p> <p>Values returned are strongly consistent</p>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table containing the item to update."
        },
        "UpdateExpression": {
          "$ref": "#/definitions/UpdateExpression",
          "description": "<p>An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.</p> <p>The following action values are available for <code>UpdateExpression</code>.</p> <ul> <li> <p> <code>SET</code> - Adds one or more attributes and values to an item. If any of these attribute already exist, they are replaced by the new values. You can also use <code>SET</code> to add or subtract from an attribute that is of type Number. For example: <code>SET myNum = myNum + :val</code> </p> <p> <code>SET</code> supports the following functions:</p> <ul> <li> <p> <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p> </li> <li> <p> <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p> </li> </ul> <p>These function names are case-sensitive.</p> </li> <li> <p> <code>REMOVE</code> - Removes one or more attributes from an item.</p> </li> <li> <p> <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of <code>ADD</code> depends on the data type of the attribute:</p> <ul> <li> <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a negative number, then it is subtracted from the existing attribute.</p> <note> <p>If you use <code>ADD</code> to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial value.</p> <p>Similarly, if you use <code>ADD</code> for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial value. For example, suppose that the item you want to update doesn't have an attribute named <i>itemcount</i>, but you decide to <code>ADD</code> the number <code>3</code> to this attribute anyway. DynamoDB will create the <i>itemcount</i> attribute, set its initial value to <code>0</code>, and finally add <code>3</code> to it. The result will be a new <i>itemcount</i> attribute in the item, with a value of <code>3</code>.</p> </note> </li> <li> <p>If the existing data type is a set and if <code>Value</code> is also a set, then <code>Value</code> is added to the existing set. For example, if the attribute value is the set <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code> action is specified for a set attribute and the attribute type specified does not match the existing set type. </p> <p>Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the <code>Value</code> must also be a set of strings.</p> </li> </ul> <important> <p>The <code>ADD</code> action only supports Number and set data types. In addition, <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p> </important> </li> <li> <p> <code>DELETE</code> - Deletes an element from a set.</p> <p>If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set <code>[a,b,c]</code> and the <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value is <code>[b]</code>. Specifying an empty set is an error.</p> <important> <p>The <code>DELETE</code> action only supports set data types. In addition, <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p> </important> </li> </ul> <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1, b=:value2 DELETE :value3, :value4, :value5</code> </p> <p>For more information on update expressions, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html\">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
        }
      },
      "required": [
        "TableName",
        "Key"
      ],
      "type": "object",
      "title": "UpdateItemInput"
    },
    "UpdateItemOutput": {
      "description": "Represents the output of an <code>UpdateItem</code> operation.",
      "example": {
        "Attributes": {
          "AlbumTitle": {
            "S": "Songs About Life"
          },
          "Artist": {
            "S": "Acme Band"
          },
          "SongTitle": {
            "S": "Happy Day"
          }
        }
      },
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeMap",
          "description": "A map of attribute values as they appeared before the <code>UpdateItem</code> operation. This map only appears if <code>ReturnValues</code> was specified as something other than <code>NONE</code> in the request. Each element represents one attribute."
        },
        "ConsumedCapacity": {
          "$ref": "#/definitions/ConsumedCapacity",
          "description": "The capacity units consumed by the <code>UpdateItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html\">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>."
        },
        "ItemCollectionMetrics": {
          "$ref": "#/definitions/ItemCollectionMetrics",
          "description": "<p>Information about item collections, if any, that were affected by the <code>UpdateItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p> <p>Each <code>ItemCollectionMetrics</code> element consists of:</p> <ul> <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li> <li> <p> <code>SizeEstimateRange</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li> </ul>"
        }
      },
      "type": "object",
      "title": "UpdateItemOutput"
    },
    "UpdateTableInput": {
      "description": "Represents the input of an <code>UpdateTable</code> operation.",
      "example": {
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 10,
          "WriteCapacityUnits": 10
        },
        "TableName": "MusicCollection"
      },
      "properties": {
        "AttributeDefinitions": {
          "$ref": "#/definitions/AttributeDefinitions",
          "description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index."
        },
        "GlobalSecondaryIndexUpdates": {
          "$ref": "#/definitions/GlobalSecondaryIndexUpdateList",
          "description": "<p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p> <ul> <li> <p> <code>Create</code> - add a new global secondary index to the table.</p> </li> <li> <p> <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p> </li> <li> <p> <code>Delete</code> - remove a global secondary index from the table.</p> </li> </ul> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html\">Managing Global Secondary Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>"
        },
        "ProvisionedThroughput": {
          "$ref": "#/definitions/ProvisionedThroughput",
          "description": "The new provisioned throughput settings for the specified table or index."
        },
        "StreamSpecification": {
          "$ref": "#/definitions/StreamSpecification",
          "description": "<p>Represents the DynamoDB Streams configuration for the table.</p> <note> <p>You will receive a <code>ResourceInUseException</code> if you attempt to enable a stream on a table that already has a stream, or if you attempt to disable a stream on a table which does not have a stream.</p> </note>"
        },
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to be updated."
        }
      },
      "required": [
        "TableName"
      ],
      "type": "object",
      "title": "UpdateTableInput"
    },
    "UpdateTableOutput": {
      "description": "Represents the output of an <code>UpdateTable</code> operation.",
      "example": {
        "TableDescription": {
          "AttributeDefinitions": [
            {
              "AttributeName": "Artist",
              "AttributeType": "S"
            },
            {
              "AttributeName": "SongTitle",
              "AttributeType": "S"
            }
          ],
          "CreationDateTime": "1421866952.062",
          "ItemCount": 0,
          "KeySchema": [
            {
              "AttributeName": "Artist",
              "KeyType": "HASH"
            },
            {
              "AttributeName": "SongTitle",
              "KeyType": "RANGE"
            }
          ],
          "ProvisionedThroughput": {
            "LastIncreaseDateTime": "1421874759.194",
            "NumberOfDecreasesToday": 1,
            "ReadCapacityUnits": 1,
            "WriteCapacityUnits": 1
          },
          "TableName": "MusicCollection",
          "TableSizeBytes": 0,
          "TableStatus": "UPDATING"
        }
      },
      "properties": {
        "TableDescription": {
          "$ref": "#/definitions/TableDescription",
          "description": "Represents the properties of the table."
        }
      },
      "type": "object",
      "title": "UpdateTableOutput"
    },
    "UpdateTimeToLiveInput": {
      "description": "Represents the input of an <code>UpdateTimeToLive</code> operation.",
      "properties": {
        "TableName": {
          "$ref": "#/definitions/TableName",
          "description": "The name of the table to be configured."
        },
        "TimeToLiveSpecification": {
          "$ref": "#/definitions/TimeToLiveSpecification",
          "description": "Represents the settings used to enable or disable Time to Live for the specified table."
        }
      },
      "required": [
        "TableName",
        "TimeToLiveSpecification"
      ],
      "type": "object",
      "title": "UpdateTimeToLiveInput"
    },
    "UpdateTimeToLiveOutput": {
      "properties": {
        "TimeToLiveSpecification": {
          "$ref": "#/definitions/TimeToLiveSpecification",
          "description": "Represents the output of an <code>UpdateTimeToLive</code> operation."
        }
      },
      "type": "object",
      "title": "UpdateTimeToLiveOutput"
    },
    "WriteRequest": {
      "description": "Represents an operation to perform - either <code>DeleteItem</code> or <code>PutItem</code>. You can only request one of these operations, not both, in a single <code>WriteRequest</code>. If you do need to perform both of these operations, you will need to provide two separate <code>WriteRequest</code> objects.",
      "properties": {
        "DeleteRequest": {
          "$ref": "#/definitions/DeleteRequest",
          "description": "A request to perform a <code>DeleteItem</code> operation."
        },
        "PutRequest": {
          "$ref": "#/definitions/PutRequest",
          "description": "A request to perform a <code>PutItem</code> operation."
        }
      },
      "type": "object",
      "title": "WriteRequest"
    },
    "WriteRequests": {
      "items": {
        "$ref": "#/definitions/WriteRequest"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array",
      "title": "WriteRequests"
    }
  },
  "actions": [
    {
      "id": "BatchGetItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "RequestItems": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/BatchGetItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/BatchGetItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "BatchWriteItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/BatchWriteItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/BatchWriteItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "CreateTable",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/CreateTableInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateTableOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "DeleteItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DeleteItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "DeleteTable",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DeleteTableInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteTableOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "DescribeLimits",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DescribeLimitsInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeLimitsOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "DescribeTable",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DescribeTableInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeTableOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "DescribeTimeToLive",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DescribeTimeToLiveInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeTimeToLiveOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "GetItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/GetItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/GetItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "ListTables",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Limit": {
            "type": "string"
          },
          "ExclusiveStartTableName": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/ListTablesInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListTablesOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "ListTagsOfResource",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/ListTagsOfResourceInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListTagsOfResourceOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "PutItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/PutItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PutItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "Query",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Limit": {
            "type": "string"
          },
          "ExclusiveStartKey": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/QueryInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/QueryOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "Scan",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Limit": {
            "type": "string"
          },
          "ExclusiveStartKey": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/ScanInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ScanOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "TagResource",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/TagResourceInput"
          }
        ]
      },
      "outputSchema": {},
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "UntagResource",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/UntagResourceInput"
          }
        ]
      },
      "outputSchema": {},
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "UpdateItem",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/UpdateItemInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateItemOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "UpdateTable",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/UpdateTableInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateTableOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    },
    {
      "id": "UpdateTimeToLive",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/UpdateTimeToLiveInput"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateTimeToLiveOutput"
      },
      "security": {
        "amazonaws_dynamodb": {
          "integration": "amazonaws_dynamodb"
        }
      }
    }
  ],
  "tags": [
    "cloud",
    "aws"
  ]
}