{
  "id": "google_androiddeviceprovisioning",
  "title": "Android Device Provisioning Partner",
  "description": "Automates reseller integration into zero-touch enrollment by assigning devices to customers and creating device reports.",
  "security": {},
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/google_androiddeviceprovisioning.png"
  },
  "actionCount": 11,
  "definitions": {
    "ClaimDeviceRequest": {
      "description": "Request message to claim a device on behalf of a customer.",
      "properties": {
        "customerId": {
          "description": "The customer to claim for.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "The device identifier of the device to claim."
        },
        "sectionType": {
          "description": "The section to claim.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "ClaimDeviceRequest"
    },
    "ClaimDeviceResponse": {
      "description": "Response message containing device id of the claim.",
      "properties": {
        "deviceId": {
          "description": "The device ID of the claimed device.",
          "format": "int64",
          "type": "string"
        },
        "deviceName": {
          "description": "The resource name of the device in the format\n`partners/[PARTNER_ID]/devices/[DEVICE_ID]`.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "ClaimDeviceResponse"
    },
    "ClaimDevicesRequest": {
      "description": "Request to claim devices asynchronously in batch.",
      "properties": {
        "claims": {
          "description": "List of claims.",
          "items": {
            "$ref": "#/definitions/PartnerClaim"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ClaimDevicesRequest"
    },
    "Company": {
      "description": "A customer resource in the zero-touch enrollment API.",
      "properties": {
        "adminEmails": {
          "description": "Input only. Optional. Email address of customer's users in the admin role.\nEach email address must be associated with a Google Account.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "companyId": {
          "description": "Output only. The ID of the company. Assigned by the server.",
          "format": "int64",
          "type": "string"
        },
        "companyName": {
          "description": "Required. The name of the company. For example _XYZ Corp_. Characters\nallowed are: Latin letters, numerals, hyphens, and spaces. Displayed to the\ncustomer's employees in the zero-touch enrollment portal.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The API resource name of the company in the format\n`partners/[PARTNER_ID]/customers/[CUSTOMER_ID]`. Assigned by the server.",
          "type": "string"
        },
        "ownerEmails": {
          "description": "Input only. Email address of customer's users in the owner role. At least\none `owner_email` is required. Each email address must be associated with a\nGoogle Account. Owners share the same access as admins but can also add,\ndelete, and edit your organization's portal users.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "Company"
    },
    "CreateCustomerRequest": {
      "description": "Request message to create a customer.",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Company",
          "description": "Required. The company data to populate the new customer. Must contain a\nvalue for `companyName` and at least one `owner_email` that's associated\nwith a Google Account. The values for `companyId` and `name` must be empty."
        }
      },
      "type": "object",
      "title": "CreateCustomerRequest"
    },
    "Device": {
      "description": "An Android device.",
      "properties": {
        "claims": {
          "description": "Claims.",
          "items": {
            "$ref": "#/definitions/DeviceClaim"
          },
          "type": "array"
        },
        "configuration": {
          "description": "The resource name of the configuration.\nOnly set for customers.",
          "type": "string"
        },
        "deviceId": {
          "description": "Device ID.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "Device identifier."
        },
        "deviceMetadata": {
          "$ref": "#/definitions/DeviceMetadata",
          "description": "Device metadata."
        },
        "name": {
          "description": "Resource name in `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Device"
    },
    "DeviceClaim": {
      "description": "Information about a device claimed for a partner.",
      "properties": {
        "ownerCompanyId": {
          "description": "Owner ID.",
          "format": "int64",
          "type": "string"
        },
        "sectionType": {
          "description": "Section type of the device claim.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "DeviceClaim"
    },
    "DeviceIdentifier": {
      "description": "Identifies a unique device.",
      "properties": {
        "imei": {
          "description": "IMEI number.",
          "type": "string"
        },
        "manufacturer": {
          "description": "Manufacturer name to match `android.os.Build.MANUFACTURER` (required).\nAllowed values listed in\n[manufacturer names](/zero-touch/resources/manufacturer-names).",
          "type": "string"
        },
        "meid": {
          "description": "MEID number.",
          "type": "string"
        },
        "serialNumber": {
          "description": "Serial number (optional).",
          "type": "string"
        }
      },
      "type": "object",
      "title": "DeviceIdentifier"
    },
    "DeviceMetadata": {
      "description": "A key-value pair of the device metadata.",
      "properties": {
        "entries": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata entries",
          "type": "object"
        }
      },
      "type": "object",
      "title": "DeviceMetadata"
    },
    "DevicesLongRunningOperationMetadata": {
      "description": "Long running operation metadata.",
      "properties": {
        "devicesCount": {
          "description": "Number of devices parsed in your requests.",
          "format": "int32",
          "type": "integer"
        },
        "processingStatus": {
          "description": "The overall processing status.",
          "enum": [
            "BATCH_PROCESS_STATUS_UNSPECIFIED",
            "BATCH_PROCESS_PENDING",
            "BATCH_PROCESS_IN_PROGRESS",
            "BATCH_PROCESS_PROCESSED"
          ],
          "type": "string"
        },
        "progress": {
          "description": "Processing progress from 0 to 100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "DevicesLongRunningOperationMetadata"
    },
    "DevicesLongRunningOperationResponse": {
      "description": "Long running operation response.",
      "properties": {
        "perDeviceStatus": {
          "description": "Processing status for each device.\nOne `PerDeviceStatus` per device. The order is the same as in your requests.",
          "items": {
            "$ref": "#/definitions/OperationPerDevice"
          },
          "type": "array"
        },
        "successCount": {
          "description": "Number of succeesfully processed ones.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "DevicesLongRunningOperationResponse"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object",
      "title": "Empty"
    },
    "FindDevicesByDeviceIdentifierRequest": {
      "description": "Request to find devices.",
      "properties": {
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "The device identifier to search."
        },
        "limit": {
          "description": "Number of devices to show.",
          "format": "int64",
          "type": "string"
        },
        "pageToken": {
          "description": "Page token.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "FindDevicesByDeviceIdentifierRequest"
    },
    "FindDevicesByDeviceIdentifierResponse": {
      "description": "Response containing found devices.",
      "properties": {
        "devices": {
          "description": "Found devices.",
          "items": {
            "$ref": "#/definitions/Device"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Page token of the next page.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "FindDevicesByDeviceIdentifierResponse"
    },
    "FindDevicesByOwnerRequest": {
      "description": "Request to find devices by customers.",
      "properties": {
        "customerId": {
          "description": "List of customer IDs to search for.",
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "limit": {
          "description": "The number of devices to show in the result.",
          "format": "int64",
          "type": "string"
        },
        "pageToken": {
          "description": "Page token.",
          "type": "string"
        },
        "sectionType": {
          "description": "The section type.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "FindDevicesByOwnerRequest"
    },
    "FindDevicesByOwnerResponse": {
      "description": "Response containing found devices.",
      "properties": {
        "devices": {
          "description": "Devices found.",
          "items": {
            "$ref": "#/definitions/Device"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Page token of the next page.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "FindDevicesByOwnerResponse"
    },
    "ListCustomersResponse": {
      "description": "Response message of all customers related to this partner.",
      "properties": {
        "customers": {
          "description": "List of customers related to this partner.",
          "items": {
            "$ref": "#/definitions/Company"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ListCustomersResponse"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/Status",
          "description": "This field will always be not set if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`. In this case, error information for each device is set in `response.perDeviceStatus.result.status`."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.",
          "type": "object"
        }
      },
      "type": "object",
      "title": "Operation"
    },
    "OperationPerDevice": {
      "description": "Operation the server received for every device.",
      "properties": {
        "claim": {
          "$ref": "#/definitions/PartnerClaim",
          "description": "Request to claim a device."
        },
        "result": {
          "$ref": "#/definitions/PerDeviceStatusInBatch",
          "description": "Processing result for every device."
        },
        "unclaim": {
          "$ref": "#/definitions/PartnerUnclaim",
          "description": "Request to unclaim a device."
        },
        "updateMetadata": {
          "$ref": "#/definitions/UpdateMetadataArguments",
          "description": "Request to set metadata for a device."
        }
      },
      "type": "object",
      "title": "OperationPerDevice"
    },
    "PartnerClaim": {
      "description": "Identifies one claim request.",
      "properties": {
        "customerId": {
          "description": "Customer ID to claim for.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "Device identifier of the device."
        },
        "deviceMetadata": {
          "$ref": "#/definitions/DeviceMetadata",
          "description": "Metadata to set at claim."
        },
        "sectionType": {
          "description": "Section type to claim.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "PartnerClaim"
    },
    "PartnerUnclaim": {
      "description": "Identifies one unclaim request.",
      "properties": {
        "deviceId": {
          "description": "Device ID of the device.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "Device identifier of the device."
        },
        "sectionType": {
          "description": "Section type to unclaim.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "PartnerUnclaim"
    },
    "PerDeviceStatusInBatch": {
      "description": "Stores the processing result for each device.",
      "properties": {
        "deviceId": {
          "description": "Device ID of the device if process succeeds.",
          "format": "int64",
          "type": "string"
        },
        "errorIdentifier": {
          "description": "Error identifier.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Error message.",
          "type": "string"
        },
        "status": {
          "description": "Process result.",
          "enum": [
            "SINGLE_DEVICE_STATUS_UNSPECIFIED",
            "SINGLE_DEVICE_STATUS_UNKNOWN_ERROR",
            "SINGLE_DEVICE_STATUS_OTHER_ERROR",
            "SINGLE_DEVICE_STATUS_SUCCESS",
            "SINGLE_DEVICE_STATUS_PERMISSION_DENIED",
            "SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER",
            "SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE",
            "SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "PerDeviceStatusInBatch"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Status"
    },
    "UnclaimDeviceRequest": {
      "description": "Request message to unclaim a device.",
      "properties": {
        "deviceId": {
          "description": "The device ID returned by `ClaimDevice`.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "The device identifier you used when you claimed this device."
        },
        "sectionType": {
          "description": "The section type to unclaim for.",
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "SECTION_TYPE_ZERO_TOUCH"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "UnclaimDeviceRequest"
    },
    "UnclaimDevicesRequest": {
      "description": "Request to unclaim devices asynchronously in batch.",
      "properties": {
        "unclaims": {
          "description": "List of devices to unclaim.",
          "items": {
            "$ref": "#/definitions/PartnerUnclaim"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "UnclaimDevicesRequest"
    },
    "UpdateDeviceMetadataInBatchRequest": {
      "description": "Request to update device metadata in batch.",
      "properties": {
        "updates": {
          "description": "List of metadata updates.",
          "items": {
            "$ref": "#/definitions/UpdateMetadataArguments"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "UpdateDeviceMetadataInBatchRequest"
    },
    "UpdateDeviceMetadataRequest": {
      "description": "Request to set metadata for a device.",
      "properties": {
        "deviceMetadata": {
          "$ref": "#/definitions/DeviceMetadata",
          "description": "The metdata to set."
        }
      },
      "type": "object",
      "title": "UpdateDeviceMetadataRequest"
    },
    "UpdateMetadataArguments": {
      "description": "Identifies metdata updates to one device.",
      "properties": {
        "deviceId": {
          "description": "Device ID of the device.",
          "format": "int64",
          "type": "string"
        },
        "deviceIdentifier": {
          "$ref": "#/definitions/DeviceIdentifier",
          "description": "Device identifier."
        },
        "deviceMetadata": {
          "$ref": "#/definitions/DeviceMetadata",
          "description": "The metadata to update."
        }
      },
      "type": "object",
      "title": "UpdateMetadataArguments"
    }
  },
  "actions": [
    {
      "id": "partners.devices.metadata",
      "title": "partners.devices.metadata",
      "description": "Update the metadata.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateDeviceMetadataRequest"
          },
          "deviceId": {
            "type": "string",
            "description": "ID of the partner."
          },
          "metadataOwnerId": {
            "type": "string",
            "description": "The owner of the newly set metadata. Set this to the partner ID."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "deviceId",
          "metadataOwnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeviceMetadata"
      }
    },
    {
      "id": "partners.customers.list",
      "title": "partners.customers.list",
      "description": "Lists the customers that are enrolled to the reseller identified by the\n`partnerId` argument. This list includes customers that the reseller\ncreated and customers that enrolled themselves using the portal.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "partnerId": {
            "type": "string",
            "description": "The ID of the partner."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListCustomersResponse"
      }
    },
    {
      "id": "partners.devices.claim",
      "title": "partners.devices.claim",
      "description": "Claim the device identified by device identifier.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ClaimDeviceRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "ID of the partner."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ClaimDeviceResponse"
      }
    },
    {
      "id": "partners.devices.claimAsync",
      "title": "partners.devices.claimAsync",
      "description": "Claim devices asynchronously.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ClaimDevicesRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "Partner ID."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Operation"
      }
    },
    {
      "id": "partners.devices.findByIdentifier",
      "title": "partners.devices.findByIdentifier",
      "description": "Find devices by device identifier.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/FindDevicesByDeviceIdentifierRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "ID of the partner."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/FindDevicesByDeviceIdentifierResponse"
      }
    },
    {
      "id": "partners.devices.findByOwner",
      "title": "partners.devices.findByOwner",
      "description": "Find devices by ownership.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/FindDevicesByOwnerRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "ID of the partner."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/FindDevicesByOwnerResponse"
      }
    },
    {
      "id": "partners.devices.unclaim",
      "title": "partners.devices.unclaim",
      "description": "Unclaim the device identified by the `device_id` or the `deviceIdentifier`.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UnclaimDeviceRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "ID of the partner."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Empty"
      }
    },
    {
      "id": "partners.devices.unclaimAsync",
      "title": "partners.devices.unclaimAsync",
      "description": "Unclaim devices asynchronously.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UnclaimDevicesRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "Partner ID."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Operation"
      }
    },
    {
      "id": "partners.devices.updateMetadataAsync",
      "title": "partners.devices.updateMetadataAsync",
      "description": "Set metadata in batch asynchronously.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateDeviceMetadataInBatchRequest"
          },
          "partnerId": {
            "type": "string",
            "description": "Partner ID."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "partnerId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Operation"
      }
    },
    {
      "id": "partners.devices.get",
      "title": "partners.devices.get",
      "description": "Get a device.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name in `partners/[PARTNER_ID]/devices/[DEVICE_ID]`."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Device"
      }
    },
    {
      "id": "partners.customers.create",
      "title": "partners.customers.create",
      "description": "Creates a customer for zero-touch enrollment. After the method returns\nsuccessfully, admin and owner roles can manage devices and EMM configs\nby calling API methods or using their zero-touch enrollment portal. The API\ndoesn't notify the customer that they have access.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateCustomerRequest"
          },
          "parent": {
            "type": "string",
            "description": "Required. The parent resource ID in format `partners/[PARTNER_ID]` that\nidentifies the reseller."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "parent"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Company"
      }
    }
  ],
  "directory": "generated",
  "tags": [
    "google"
  ]
}