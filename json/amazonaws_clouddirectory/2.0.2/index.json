{
  "id": "amazonaws_clouddirectory",
  "title": "Amazon CloudDirectory",
  "description": "<fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>",
  "security": {
    "amazonaws_clouddirectory": {
      "integration": "amazonaws_clouddirectory",
      "fields": {
        "hmac": "Amazon Signature authorization v4"
      }
    }
  },
  "logo": {
    "backgroundColor": "#FFFFFF",
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/amazonaws_clouddirectory.jpg"
  },
  "tags": [
    "cloud",
    "aws"
  ],
  "definitions": {
    "AccessDeniedException": {
      "description": "Access denied. Check your permissions.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "AddFacetToObjectRequest": {
      "properties": {
        "ObjectAttributeList": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "Attributes on the facet you are adding to the object."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object you are adding the specified facet to."
        },
        "SchemaFacet": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "Identifiers for the facet that you are adding to the object."
        }
      },
      "required": [
        "SchemaFacet",
        "ObjectReference"
      ],
      "type": "object"
    },
    "AddFacetToObjectResponse": {
      "properties": {},
      "type": "object"
    },
    "ApplySchemaRequest": {
      "properties": {
        "PublishedSchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "Published schema ARN that needs to be copied. For more information, see <a>arns</a>."
        }
      },
      "required": [
        "PublishedSchemaArn"
      ],
      "type": "object"
    },
    "ApplySchemaResponse": {
      "properties": {
        "AppliedSchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "Applied schema ARN associated with the copied schema in the <a>Directory</a>. You can use this ARN to describe the schema information applied on this directory. For more information, see <a>arns</a>."
        },
        "DirectoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN associated with the <a>Directory</a>. For more information, see <a>arns</a>."
        }
      },
      "type": "object"
    },
    "Arn": {
      "type": "string"
    },
    "Arns": {
      "items": {
        "$ref": "#/definitions/Arn"
      },
      "type": "array"
    },
    "AttachObjectRequest": {
      "properties": {
        "ChildReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Child object reference to be attached to the object."
        },
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "Link name with which the child object is attached to the parent."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Parent object reference."
        }
      },
      "required": [
        "ParentReference",
        "ChildReference",
        "LinkName"
      ],
      "type": "object"
    },
    "AttachObjectResponse": {
      "properties": {
        "AttachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "Attached <code>ObjectIdentifier</code>, which is the child <code>ObjectIdentifier</code>."
        }
      },
      "type": "object"
    },
    "AttachPolicyRequest": {
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object to which the policy will be attached."
        },
        "PolicyReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference associated with the policy object."
        }
      },
      "required": [
        "PolicyReference",
        "ObjectReference"
      ],
      "type": "object"
    },
    "AttachPolicyResponse": {
      "properties": {},
      "type": "object"
    },
    "AttachToIndexRequest": {
      "properties": {
        "IndexReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the index that you are attaching the object to."
        },
        "TargetReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object that you are attaching to the index."
        }
      },
      "required": [
        "IndexReference",
        "TargetReference"
      ],
      "type": "object"
    },
    "AttachToIndexResponse": {
      "properties": {
        "AttachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the object that was attached to the index."
        }
      },
      "type": "object"
    },
    "AttributeKey": {
      "description": "A unique identifier for an attribute.",
      "properties": {
        "FacetName": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the facet the attribute exists within."
        },
        "Name": {
          "$ref": "#/definitions/AttributeName",
          "description": "The name of the attribute."
        },
        "SchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the schema that contains the facet and attribute."
        }
      },
      "required": [
        "SchemaArn",
        "FacetName",
        "Name"
      ],
      "type": "object"
    },
    "AttributeKeyAndValue": {
      "description": "The combination of an attribute key and an attribute value.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/AttributeKey",
          "description": "The key of the attribute."
        },
        "Value": {
          "$ref": "#/definitions/TypedAttributeValue",
          "description": "The value of the attribute."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "object"
    },
    "AttributeKeyAndValueList": {
      "items": {
        "$ref": "#/definitions/AttributeKeyAndValue"
      },
      "type": "array"
    },
    "AttributeKeyList": {
      "items": {
        "$ref": "#/definitions/AttributeKey"
      },
      "type": "array"
    },
    "AttributeName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "BatchAddFacetToObject": {
      "description": "Represents the output of a batch add facet to object operation.",
      "properties": {
        "ObjectAttributeList": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "The attributes to set on the object."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object being mutated."
        },
        "SchemaFacet": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "Represents the facet being added to the object."
        }
      },
      "required": [
        "SchemaFacet",
        "ObjectAttributeList",
        "ObjectReference"
      ],
      "type": "object"
    },
    "BatchAddFacetToObjectResponse": {
      "description": "The result of a batch add facet to object operation.",
      "properties": {},
      "type": "object"
    },
    "BatchAttachObject": {
      "description": "Represents the output of an AttachObject operation.",
      "properties": {
        "ChildReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Child object reference to be attached to the object."
        },
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "The name of the link."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Parent object reference."
        }
      },
      "required": [
        "ParentReference",
        "ChildReference",
        "LinkName"
      ],
      "type": "object"
    },
    "BatchAttachObjectResponse": {
      "description": "Represents the output batch AttachObject response operation.",
      "properties": {
        "attachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the object that has been attached."
        }
      },
      "type": "object"
    },
    "BatchCreateObject": {
      "description": "Represents the output of a CreateObject operation.",
      "properties": {
        "BatchReferenceName": {
          "$ref": "#/definitions/BatchReferenceName",
          "description": "The batch reference name. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#batches\">Batches</a> for more information."
        },
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "The name of the link."
        },
        "ObjectAttributeList": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "Attribute map, which contains an attribute ARN as the key and attribute value as the map value."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "If specified, the parent reference to which this object will be attached."
        },
        "SchemaFacet": {
          "$ref": "#/definitions/SchemaFacetList",
          "description": "List of FacetArns that will be associated with the object. For more information, see <a>arns</a>."
        }
      },
      "required": [
        "SchemaFacet",
        "ObjectAttributeList",
        "ParentReference",
        "LinkName",
        "BatchReferenceName"
      ],
      "type": "object"
    },
    "BatchCreateObjectResponse": {
      "description": "Represents the output of a <code>CreateObject</code> response operation.",
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "ID associated with the object."
        }
      },
      "type": "object"
    },
    "BatchDeleteObject": {
      "description": "Represents the output of a <code>DeleteObject</code> operation.",
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "BatchDeleteObjectResponse": {
      "description": "Represents the output of a <code>DeleteObject</code> response operation.",
      "properties": {},
      "type": "object"
    },
    "BatchDetachObject": {
      "description": "Represents the output of a <code>DetachObject</code> operation.",
      "properties": {
        "BatchReferenceName": {
          "$ref": "#/definitions/BatchReferenceName",
          "description": "The batch reference name. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#batches\">Batches</a> for more information."
        },
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "The name of the link."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Parent reference from which the object with the specified link name is detached."
        }
      },
      "required": [
        "ParentReference",
        "LinkName",
        "BatchReferenceName"
      ],
      "type": "object"
    },
    "BatchDetachObjectResponse": {
      "description": "Represents the output of a <code>DetachObject</code> response operation.",
      "properties": {
        "detachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the detached object."
        }
      },
      "type": "object"
    },
    "BatchListObjectAttributes": {
      "description": "Represents the output of a <code>ListObjectAttributes</code> operation.",
      "properties": {
        "FacetFilter": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "Used to filter the list of object attributes associated with a certain facet."
        },
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference of the object whose attributes need to be listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "BatchListObjectAttributesResponse": {
      "description": "Represents the output of a <code>ListObjectAttributes</code> response operation.",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "Attributes map associated with the object. <code>AttributeArn</code> is the key; attribute value is the value."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "BatchListObjectChildren": {
      "description": "Represents the output of a <code>ListObjectChildren</code> operation.",
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference of the object for which child objects are being listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "BatchListObjectChildrenResponse": {
      "description": "Represents the output of a <code>ListObjectChildren</code> response operation.",
      "properties": {
        "Children": {
          "$ref": "#/definitions/LinkNameToObjectIdentifierMap",
          "description": "Children structure, which is a map with key as the <code>LinkName</code> and <code>ObjectIdentifier</code> as the value."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "BatchOperationIndex": {
      "type": "integer"
    },
    "BatchReadException": {
      "description": "Batch Read Exception structure, which contains exception type and message.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage",
          "description": "Exception message associated with the failure."
        },
        "Type": {
          "$ref": "#/definitions/BatchReadExceptionType",
          "description": "Type of exception, such as <code>InvalidArnException</code>."
        }
      },
      "type": "object"
    },
    "BatchReadExceptionType": {
      "enum": [
        "ValidationException",
        "InvalidArnException",
        "ResourceNotFoundException",
        "InvalidNextTokenException",
        "AccessDeniedException",
        "NotNodeException"
      ],
      "type": "string"
    },
    "BatchReadOperation": {
      "description": "Represents the output of a <code>BatchRead</code> operation.",
      "properties": {
        "ListObjectAttributes": {
          "$ref": "#/definitions/BatchListObjectAttributes",
          "description": "Lists all attributes associated with an object."
        },
        "ListObjectChildren": {
          "$ref": "#/definitions/BatchListObjectChildren",
          "description": "Returns a paginated list of child objects that are associated with a given object."
        }
      },
      "type": "object"
    },
    "BatchReadOperationList": {
      "items": {
        "$ref": "#/definitions/BatchReadOperation"
      },
      "type": "array"
    },
    "BatchReadOperationResponse": {
      "description": "Represents the output of a <code>BatchRead</code> response operation.",
      "properties": {
        "ExceptionResponse": {
          "$ref": "#/definitions/BatchReadException",
          "description": "Identifies which operation in a batch has failed."
        },
        "SuccessfulResponse": {
          "$ref": "#/definitions/BatchReadSuccessfulResponse",
          "description": "Identifies which operation in a batch has succeeded."
        }
      },
      "type": "object"
    },
    "BatchReadOperationResponseList": {
      "items": {
        "$ref": "#/definitions/BatchReadOperationResponse"
      },
      "type": "array"
    },
    "BatchReadRequest": {
      "properties": {
        "Operations": {
          "$ref": "#/definitions/BatchReadOperationList",
          "description": "List of operations that are part of the batch."
        }
      },
      "required": [
        "Operations"
      ],
      "type": "object"
    },
    "BatchReadResponse": {
      "properties": {
        "Responses": {
          "$ref": "#/definitions/BatchReadOperationResponseList",
          "description": "List of all the responses for each batch read."
        }
      },
      "type": "object"
    },
    "BatchReadSuccessfulResponse": {
      "description": "Represents the output of a <code>BatchRead</code> success response operation.",
      "properties": {
        "ListObjectAttributes": {
          "$ref": "#/definitions/BatchListObjectAttributesResponse",
          "description": "Lists all attributes associated with an object."
        },
        "ListObjectChildren": {
          "$ref": "#/definitions/BatchListObjectChildrenResponse",
          "description": "Returns a paginated list of child objects associated with a given object."
        }
      },
      "type": "object"
    },
    "BatchReferenceName": {
      "type": "string"
    },
    "BatchRemoveFacetFromObject": {
      "description": "Batch operation to remove a facet from an object.",
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object whose facet will be removed."
        },
        "SchemaFacet": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "The facet to remove from the object."
        }
      },
      "required": [
        "SchemaFacet",
        "ObjectReference"
      ],
      "type": "object"
    },
    "BatchRemoveFacetFromObjectResponse": {
      "description": "Empty result representing success.",
      "properties": {},
      "type": "object"
    },
    "BatchUpdateObjectAttributes": {
      "description": "Represents the output of a <code>BatchUpdate</code> operation. ",
      "properties": {
        "AttributeUpdates": {
          "$ref": "#/definitions/ObjectAttributeUpdateList",
          "description": "Attributes update structure."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object."
        }
      },
      "required": [
        "ObjectReference",
        "AttributeUpdates"
      ],
      "type": "object"
    },
    "BatchUpdateObjectAttributesResponse": {
      "description": "Represents the output of a <code>BatchUpdate</code> response operation.",
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "ID associated with the object."
        }
      },
      "type": "object"
    },
    "BatchWriteException": {
      "description": "A <code>BatchWrite</code> exception has occurred.",
      "properties": {
        "Index": {
          "$ref": "#/definitions/BatchOperationIndex"
        },
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        },
        "Type": {
          "$ref": "#/definitions/BatchWriteExceptionType"
        }
      },
      "type": "object"
    },
    "BatchWriteExceptionType": {
      "enum": [
        "InternalServiceException",
        "ValidationException",
        "InvalidArnException",
        "LinkNameAlreadyInUseException",
        "StillContainsLinksException",
        "FacetValidationException",
        "ObjectNotDetachedException",
        "ResourceNotFoundException",
        "AccessDeniedException"
      ],
      "type": "string"
    },
    "BatchWriteOperation": {
      "description": "Represents the output of a <code>BatchWrite</code> operation. ",
      "properties": {
        "AddFacetToObject": {
          "$ref": "#/definitions/BatchAddFacetToObject",
          "description": "Batch operation adding a facet to an object."
        },
        "AttachObject": {
          "$ref": "#/definitions/BatchAttachObject",
          "description": "Attaches an object to a <a>Directory</a>."
        },
        "CreateObject": {
          "$ref": "#/definitions/BatchCreateObject",
          "description": "Creates an object."
        },
        "DeleteObject": {
          "$ref": "#/definitions/BatchDeleteObject",
          "description": "Deletes an object in a <a>Directory</a>."
        },
        "DetachObject": {
          "$ref": "#/definitions/BatchDetachObject",
          "description": "Detaches an object from a <a>Directory</a>."
        },
        "RemoveFacetFromObject": {
          "$ref": "#/definitions/BatchRemoveFacetFromObject",
          "description": "Batch operation removing a facet from an object."
        },
        "UpdateObjectAttributes": {
          "$ref": "#/definitions/BatchUpdateObjectAttributes",
          "description": "Update a given object's attributes."
        }
      },
      "type": "object"
    },
    "BatchWriteOperationList": {
      "items": {
        "$ref": "#/definitions/BatchWriteOperation"
      },
      "type": "array"
    },
    "BatchWriteOperationResponse": {
      "description": "Represents the output of a <code>BatchWrite</code> response operation.",
      "properties": {
        "AddFacetToObject": {
          "$ref": "#/definitions/BatchAddFacetToObjectResponse",
          "description": "Result of an add facet to object batch operation."
        },
        "AttachObject": {
          "$ref": "#/definitions/BatchAttachObjectResponse",
          "description": "Attaches an object to a <a>Directory</a>."
        },
        "CreateObject": {
          "$ref": "#/definitions/BatchCreateObjectResponse",
          "description": "Creates an object in a <a>Directory</a>."
        },
        "DeleteObject": {
          "$ref": "#/definitions/BatchDeleteObjectResponse",
          "description": "Deletes an object in a <a>Directory</a>."
        },
        "DetachObject": {
          "$ref": "#/definitions/BatchDetachObjectResponse",
          "description": "Detaches an object from a <a>Directory</a>."
        },
        "RemoveFacetFromObject": {
          "$ref": "#/definitions/BatchRemoveFacetFromObjectResponse",
          "description": "Result of a batch remove facet from object operation."
        },
        "UpdateObjectAttributes": {
          "$ref": "#/definitions/BatchUpdateObjectAttributesResponse",
          "description": "Updates a given object’s attributes."
        }
      },
      "type": "object"
    },
    "BatchWriteOperationResponseList": {
      "items": {
        "$ref": "#/definitions/BatchWriteOperationResponse"
      },
      "type": "array"
    },
    "BatchWriteRequest": {
      "properties": {
        "Operations": {
          "$ref": "#/definitions/BatchWriteOperationList",
          "description": "List of operations that are part of the batch."
        }
      },
      "required": [
        "Operations"
      ],
      "type": "object"
    },
    "BatchWriteResponse": {
      "properties": {
        "Responses": {
          "$ref": "#/definitions/BatchWriteOperationResponseList",
          "description": "List of all the responses for each batch write."
        }
      },
      "type": "object"
    },
    "BinaryAttributeValue": {
      "type": "string"
    },
    "Bool": {
      "type": "boolean"
    },
    "BooleanAttributeValue": {
      "type": "boolean"
    },
    "CannotListParentOfRootException": {
      "description": "Cannot list the parents of a <a>Directory</a> root.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "ConsistencyLevel": {
      "enum": [
        "SERIALIZABLE",
        "EVENTUAL"
      ],
      "type": "string"
    },
    "CreateDirectoryRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/DirectoryName",
          "description": "Name of the <a>Directory</a>. Should be unique per account, per region."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateDirectoryResponse": {
      "properties": {
        "AppliedSchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN of the published schema in the <a>Directory</a>. Once a published schema is copied into the directory, it has its own ARN which is referred to applied schema ARN. For more information, see <a>arns</a>."
        },
        "DirectoryArn": {
          "$ref": "#/definitions/DirectoryArn",
          "description": "ARN associated with the <a>Directory</a>. For more information, see <a>arns</a>."
        },
        "Name": {
          "$ref": "#/definitions/DirectoryName",
          "description": "Name of the <a>Directory</a>."
        },
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The root object node of the created directory."
        }
      },
      "required": [
        "DirectoryArn",
        "Name",
        "ObjectIdentifier",
        "AppliedSchemaArn"
      ],
      "type": "object"
    },
    "CreateFacetRequest": {
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/FacetAttributeList",
          "description": "Attributes associated with the <a>Facet</a>.e"
        },
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": "Name of the <a>Facet</a>, which is unique for a given schema."
        },
        "ObjectType": {
          "$ref": "#/definitions/ObjectType",
          "description": "<p>Specifies whether a given object created from this facet is of type Node, Leaf Node, Policy or Index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf Node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies\">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>"
        }
      },
      "required": [
        "Name",
        "ObjectType"
      ],
      "type": "object"
    },
    "CreateFacetResponse": {
      "properties": {},
      "type": "object"
    },
    "CreateIndexRequest": {
      "properties": {
        "IsUnique": {
          "$ref": "#/definitions/Bool",
          "description": "Indicates whether objects with the same indexed attribute value can be added to the index."
        },
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "The name of the link between the parent object and the index object."
        },
        "OrderedIndexedAttributeList": {
          "$ref": "#/definitions/AttributeKeyList",
          "description": "Specifies the Attributes that should be indexed on. Currently only a single attribute is supported."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the parent object that contains the index object."
        }
      },
      "required": [
        "OrderedIndexedAttributeList",
        "IsUnique"
      ],
      "type": "object"
    },
    "CreateIndexResponse": {
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the index created by this operation."
        }
      },
      "type": "object"
    },
    "CreateObjectRequest": {
      "properties": {
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "The name of link that is used to attach this object to a parent."
        },
        "ObjectAttributeList": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "Attribute map whose attribute ARN contains the key and attribute value as the map value."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "If specified, the parent reference to which this object will be attached."
        },
        "SchemaFacets": {
          "$ref": "#/definitions/SchemaFacetList",
          "description": "List of facet ARNs to be associated with the object. For more information, see <a>arns</a>."
        }
      },
      "required": [
        "SchemaFacets"
      ],
      "type": "object"
    },
    "CreateObjectResponse": {
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "Identifier associated with the object."
        }
      },
      "type": "object"
    },
    "CreateSchemaRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/SchemaName",
          "description": "Name associated with the schema. This is unique to each account and in each region."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "CreateSchemaResponse": {
      "properties": {
        "SchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN associated with the schema. For more information, see <a>arns</a>."
        }
      },
      "type": "object"
    },
    "Date": {
      "format": "date-time",
      "type": "string"
    },
    "DatetimeAttributeValue": {
      "format": "date-time",
      "type": "string"
    },
    "DeleteDirectoryRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteDirectoryResponse": {
      "properties": {
        "DirectoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the deleted directory."
        }
      },
      "required": [
        "DirectoryArn"
      ],
      "type": "object"
    },
    "DeleteFacetRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the facet to delete."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "DeleteFacetResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteObjectRequest": {
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "DeleteObjectResponse": {
      "properties": {},
      "type": "object"
    },
    "DeleteSchemaRequest": {
      "properties": {},
      "type": "object"
    },
    "DeleteSchemaResponse": {
      "properties": {
        "SchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "Input ARN that is returned as part of the response. For more information, see <a>arns</a>."
        }
      },
      "type": "object"
    },
    "DetachFromIndexRequest": {
      "properties": {
        "IndexReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the index object."
        },
        "TargetReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object being detached from the index."
        }
      },
      "required": [
        "IndexReference",
        "TargetReference"
      ],
      "type": "object"
    },
    "DetachFromIndexResponse": {
      "properties": {
        "DetachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the object that was detached from the index."
        }
      },
      "type": "object"
    },
    "DetachObjectRequest": {
      "properties": {
        "LinkName": {
          "$ref": "#/definitions/LinkName",
          "description": "Link name associated with the object that needs to be detached."
        },
        "ParentReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Parent reference from which the object with the specified link name is detached."
        }
      },
      "required": [
        "ParentReference",
        "LinkName"
      ],
      "type": "object"
    },
    "DetachObjectResponse": {
      "properties": {
        "DetachedObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> that was detached from the object."
        }
      },
      "type": "object"
    },
    "DetachPolicyRequest": {
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object whose policy object will be detached."
        },
        "PolicyReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the policy object."
        }
      },
      "required": [
        "PolicyReference",
        "ObjectReference"
      ],
      "type": "object"
    },
    "DetachPolicyResponse": {
      "properties": {},
      "type": "object"
    },
    "Directory": {
      "description": "Directory structure that includes the directory name and directory ARN.",
      "properties": {
        "CreationDateTime": {
          "$ref": "#/definitions/Date",
          "description": "The date and time when the directory was created."
        },
        "DirectoryArn": {
          "$ref": "#/definitions/DirectoryArn",
          "description": "ARN associated with the directory. For more information, see <a>arns</a>."
        },
        "Name": {
          "$ref": "#/definitions/DirectoryName",
          "description": "The name of the directory."
        },
        "State": {
          "$ref": "#/definitions/DirectoryState",
          "description": "The state of the directory. Can be either <code>Enabled</code>, <code>Disabled</code>, or <code>Deleted</code>."
        }
      },
      "type": "object"
    },
    "DirectoryAlreadyExistsException": {
      "description": "Indicates that a <a>Directory</a> could not be created due to a naming conflict. Choose a different name and try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "DirectoryArn": {
      "type": "string"
    },
    "DirectoryDeletedException": {
      "description": "A directory that has been deleted has been attempted to be accessed. Note: The requested resource will eventually cease to exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "DirectoryList": {
      "items": {
        "$ref": "#/definitions/Directory"
      },
      "type": "array"
    },
    "DirectoryName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "DirectoryNotDisabledException": {
      "description": "An operation can only operate on a disabled directory.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "DirectoryNotEnabledException": {
      "description": "An operation can only operate on a directory that is not enabled.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "DirectoryState": {
      "enum": [
        "ENABLED",
        "DISABLED",
        "DELETED"
      ],
      "type": "string"
    },
    "DisableDirectoryRequest": {
      "properties": {},
      "type": "object"
    },
    "DisableDirectoryResponse": {
      "properties": {
        "DirectoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the directory that has been disabled."
        }
      },
      "required": [
        "DirectoryArn"
      ],
      "type": "object"
    },
    "EnableDirectoryRequest": {
      "properties": {},
      "type": "object"
    },
    "EnableDirectoryResponse": {
      "properties": {
        "DirectoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the enabled directory."
        }
      },
      "required": [
        "DirectoryArn"
      ],
      "type": "object"
    },
    "ExceptionMessage": {
      "type": "string"
    },
    "Facet": {
      "description": "A structure that contains <code>Name</code>, <code>ARN</code>, <code>Attributes</code>, <a>Rule</a>s, and <code>ObjectTypes</code>.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the <a>Facet</a>."
        },
        "ObjectType": {
          "$ref": "#/definitions/ObjectType",
          "description": "Object type associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details."
        }
      },
      "type": "object"
    },
    "FacetAlreadyExistsException": {
      "description": "A facet with the same name already exists.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "FacetAttribute": {
      "description": "Attribute associated with the <a>Facet</a>.",
      "properties": {
        "AttributeDefinition": {
          "$ref": "#/definitions/FacetAttributeDefinition",
          "description": "A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences\">Attribute References</a> for more information."
        },
        "AttributeReference": {
          "$ref": "#/definitions/FacetAttributeReference",
          "description": "Attribute reference associated with the attribute. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences\">Attribute References</a> for more information."
        },
        "Name": {
          "$ref": "#/definitions/AttributeName",
          "description": "The name of the facet attribute."
        },
        "RequiredBehavior": {
          "$ref": "#/definitions/RequiredAttributeBehavior",
          "description": "The required behavior of the <code>FacetAttribute</code>."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "FacetAttributeDefinition": {
      "description": "A facet attribute definition. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences\">Attribute References</a> for more information.",
      "properties": {
        "DefaultValue": {
          "$ref": "#/definitions/TypedAttributeValue",
          "description": "The default value of the attribute (if configured)."
        },
        "IsImmutable": {
          "$ref": "#/definitions/Bool",
          "description": "Whether the attribute is mutable or not."
        },
        "Rules": {
          "$ref": "#/definitions/RuleMap",
          "description": "Validation rules attached to the attribute definition."
        },
        "Type": {
          "$ref": "#/definitions/FacetAttributeType",
          "description": "The type of the attribute."
        }
      },
      "required": [
        "Type"
      ],
      "type": "object"
    },
    "FacetAttributeList": {
      "items": {
        "$ref": "#/definitions/FacetAttribute"
      },
      "type": "array"
    },
    "FacetAttributeReference": {
      "description": "Facet attribute reference that specifies the attribute definition which contains attribute facet name and attribute name.",
      "properties": {
        "TargetAttributeName": {
          "$ref": "#/definitions/AttributeName",
          "description": "Target attribute name associated with the facet reference. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences\">Attribute References</a> for more information."
        },
        "TargetFacetName": {
          "$ref": "#/definitions/FacetName",
          "description": "Target facet name associated with the facet reference. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_advanced.html#attributereferences\">Attribute References</a> for more information."
        }
      },
      "required": [
        "TargetFacetName",
        "TargetAttributeName"
      ],
      "type": "object"
    },
    "FacetAttributeType": {
      "enum": [
        "STRING",
        "BINARY",
        "BOOLEAN",
        "NUMBER",
        "DATETIME"
      ],
      "type": "string"
    },
    "FacetAttributeUpdate": {
      "description": "A structure that contains information used to update an attribute.",
      "properties": {
        "Action": {
          "$ref": "#/definitions/UpdateActionType",
          "description": "The action to perform when updating the attribute."
        },
        "Attribute": {
          "$ref": "#/definitions/FacetAttribute",
          "description": "The attribute to update."
        }
      },
      "type": "object"
    },
    "FacetAttributeUpdateList": {
      "items": {
        "$ref": "#/definitions/FacetAttributeUpdate"
      },
      "type": "array"
    },
    "FacetInUseException": {
      "description": "Occurs when deleting a facet that contains an attribute which is a target to an attribute reference in a different facet.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "FacetName": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "FacetNameList": {
      "items": {
        "$ref": "#/definitions/FacetName"
      },
      "type": "array"
    },
    "FacetNotFoundException": {
      "description": "The specified <a>Facet</a> could not be found.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "FacetValidationException": {
      "description": "The <a>Facet</a> you provided was not well formed or could not be validated with the schema.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "GetDirectoryRequest": {
      "properties": {},
      "type": "object"
    },
    "GetDirectoryResponse": {
      "properties": {
        "Directory": {
          "$ref": "#/definitions/Directory",
          "description": "Metadata about the directory."
        }
      },
      "required": [
        "Directory"
      ],
      "type": "object"
    },
    "GetFacetRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the facet to retrieve."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "GetFacetResponse": {
      "properties": {
        "Facet": {
          "$ref": "#/definitions/Facet",
          "description": " <a>Facet</a> structure associated with the facet."
        }
      },
      "type": "object"
    },
    "GetObjectInformationRequest": {
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "GetObjectInformationResponse": {
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the specified object."
        },
        "SchemaFacets": {
          "$ref": "#/definitions/SchemaFacetList",
          "description": "The facets attached to the specified object."
        }
      },
      "type": "object"
    },
    "GetSchemaAsJsonRequest": {
      "properties": {},
      "type": "object"
    },
    "GetSchemaAsJsonResponse": {
      "properties": {
        "Document": {
          "$ref": "#/definitions/SchemaJsonDocument",
          "description": "The JSON representation of the schema document."
        },
        "Name": {
          "$ref": "#/definitions/SchemaName",
          "description": "The name of the retrieved schema."
        }
      },
      "type": "object"
    },
    "IndexAttachment": {
      "description": "Represents an index and an attached object.",
      "properties": {
        "IndexedAttributes": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "The indexed attribute values."
        },
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> of the object attached to the index."
        }
      },
      "type": "object"
    },
    "IndexAttachmentList": {
      "items": {
        "$ref": "#/definitions/IndexAttachment"
      },
      "type": "array"
    },
    "IndexedAttributeMissingException": {
      "description": "An object has been attempted to be attached to an object that does not have the appropriate attribute value.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InternalServiceException": {
      "description": "Indicates a problem that must be resolved by Amazon Web Services. This might be a transient error in which case you can retry your request until it succeeds. Otherwise, go to the <a href=\"http://status.aws.amazon.com/\">AWS Service Health Dashboard</a> site to see if there are any operational issues with the service.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidArnException": {
      "description": "Indicates that the provided ARN value is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidAttachmentException": {
      "description": "Indicates that an attempt to attach an object with the same link name or to apply a schema with same name has occurred. Rename the link or the schema and then try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidFacetUpdateException": {
      "description": "An attempt to modify a <a>Facet</a> resulted in an invalid schema exception.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidNextTokenException": {
      "description": "Indicates that the <code>NextToken</code> value is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidRuleException": {
      "description": "Occurs when any of the rule parameter keys or values are invalid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidSchemaDocException": {
      "description": "Indicates that the provided <code>SchemaDoc</code> value is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "InvalidTaggingRequestException": {
      "description": "Can occur for multiple reasons such as when you tag a resource that doesn’t exist or if you specify a higher number of tags for a resource than the allowed limit. Allowed limit is 50 tags per resource.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "LimitExceededException": {
      "description": "Indicates limits are exceeded. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/limits.html\">Limits</a> for more information.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "LinkName": {
      "maxLength": 64,
      "type": "string"
    },
    "LinkNameAlreadyInUseException": {
      "description": "Indicates that a link could not be created due to a naming conflict. Choose a different name and then try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "LinkNameToObjectIdentifierMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/LinkName"
          },
          "value": {
            "$ref": "#/definitions/ObjectIdentifier"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ListAppliedSchemaArnsRequest": {
      "properties": {
        "DirectoryArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the directory you are listing."
        },
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "required": [
        "DirectoryArn"
      ],
      "type": "object"
    },
    "ListAppliedSchemaArnsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "SchemaArns": {
          "$ref": "#/definitions/Arns",
          "description": "The ARNs of schemas that are applied to the directory."
        }
      },
      "type": "object"
    },
    "ListAttachedIndicesRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "TargetReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object to that has indices attached."
        }
      },
      "required": [
        "TargetReference"
      ],
      "type": "object"
    },
    "ListAttachedIndicesResponse": {
      "properties": {
        "IndexAttachments": {
          "$ref": "#/definitions/IndexAttachmentList",
          "description": "The indices attached to the specified object."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListDevelopmentSchemaArnsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListDevelopmentSchemaArnsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "SchemaArns": {
          "$ref": "#/definitions/Arns",
          "description": "The ARNs of retrieved development schemas."
        }
      },
      "type": "object"
    },
    "ListDirectoriesRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "state": {
          "$ref": "#/definitions/DirectoryState",
          "description": "The state of the directories in the list. Can be either Enabled, Disabled, or Deleted."
        }
      },
      "type": "object"
    },
    "ListDirectoriesResponse": {
      "properties": {
        "Directories": {
          "$ref": "#/definitions/DirectoryList",
          "description": "Lists all directories associated with your account in pagination fashion."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "required": [
        "Directories"
      ],
      "type": "object"
    },
    "ListFacetAttributesRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the facet whose attributes will be retrieved."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "ListFacetAttributesResponse": {
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/FacetAttributeList",
          "description": "The attributes attached to the facet."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListFacetNamesRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve"
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListFacetNamesResponse": {
      "properties": {
        "FacetNames": {
          "$ref": "#/definitions/FacetNameList",
          "description": "The names of facets that exist within the schema."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListIndexRequest": {
      "properties": {
        "IndexReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "The reference to the index to list."
        },
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve from the index."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "RangesOnIndexedValues": {
          "$ref": "#/definitions/ObjectAttributeRangeList",
          "description": "Specifies the ranges of indexed values that you want to query."
        }
      },
      "required": [
        "IndexReference"
      ],
      "type": "object"
    },
    "ListIndexResponse": {
      "properties": {
        "IndexAttachments": {
          "$ref": "#/definitions/IndexAttachmentList",
          "description": "The objects and indexed values attached to the index."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListObjectAttributesRequest": {
      "properties": {
        "FacetFilter": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "Used to filter the list of object attributes associated with a certain facet."
        },
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object whose attributes will be listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "ListObjectAttributesResponse": {
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeKeyAndValueList",
          "description": "Attributes map associated with the object. AttributeArn is the key, and attribute value is the value."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListObjectChildrenRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object for which child objects are being listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "ListObjectChildrenResponse": {
      "properties": {
        "Children": {
          "$ref": "#/definitions/LinkNameToObjectIdentifierMap",
          "description": "Children structure, which is a map with key as the LinkName and <code>ObjectIdentifier</code> as the value."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListObjectParentPathsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object whose parent paths are listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "ListObjectParentPathsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "PathToObjectIdentifiersList": {
          "$ref": "#/definitions/PathToObjectIdentifiersList",
          "description": "Returns the path to the <code>ObjectIdentifiers</code> associated with the directory."
        }
      },
      "type": "object"
    },
    "ListObjectParentsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object for which parent objects are being listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "ListObjectParentsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "Parents": {
          "$ref": "#/definitions/ObjectIdentifierToLinkNameMap",
          "description": "Parent structure, which is a map with key as the <code>ObjectIdentifier</code> and LinkName as the value."
        }
      },
      "type": "object"
    },
    "ListObjectPoliciesRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object for which policies will be listed."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "ListObjectPoliciesResponse": {
      "properties": {
        "AttachedPolicyIds": {
          "$ref": "#/definitions/ObjectIdentifierList",
          "description": "List of policy <code>ObjectIdentifiers</code>, that are attached to the object."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListPolicyAttachmentsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "PolicyReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the policy object."
        }
      },
      "required": [
        "PolicyReference"
      ],
      "type": "object"
    },
    "ListPolicyAttachmentsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "ObjectIdentifiers": {
          "$ref": "#/definitions/ObjectIdentifierList",
          "description": "List of <code>ObjectIdentifiers</code> to which the policy is attached."
        }
      },
      "type": "object"
    },
    "ListPublishedSchemaArnsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "The maximum number of results to retrieve."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "ListPublishedSchemaArnsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "SchemaArns": {
          "$ref": "#/definitions/Arns",
          "description": "The ARNs of published schemas."
        }
      },
      "type": "object"
    },
    "ListTagsForResourceRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/TagsNumberResults",
          "description": "The MaxResults parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token. This is for future use. Currently pagination is not supported for tagging."
        },
        "ResourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN of the resource. Tagging is only supported for directories."
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "object"
    },
    "ListTagsForResourceResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to use to retrieve the next page of results. This value is null when there are no more results to return."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "List of tag key value pairs associated with the response."
        }
      },
      "type": "object"
    },
    "LookupPolicyRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/NumberResults",
          "description": "Maximum number of items to be retrieved in a single call. This is an approximate number."
        },
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The token to request the next page of results."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object whose policies will be looked up."
        }
      },
      "required": [
        "ObjectReference"
      ],
      "type": "object"
    },
    "LookupPolicyResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/NextToken",
          "description": "The pagination token."
        },
        "PolicyToPathList": {
          "$ref": "#/definitions/PolicyToPathList",
          "description": "Provides list of path to policies. Policies contain <code>PolicyId</code>, <code>ObjectIdentifier</code>, and <code>PolicyType</code>."
        }
      },
      "type": "object"
    },
    "NextToken": {
      "type": "string"
    },
    "NotIndexException": {
      "description": "Indicates the requested operation can only operate on index objects.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "NotNodeException": {
      "description": "Occurs when any invalid operations are performed on an object which is not a node, such as calling <code>ListObjectChildren</code> for a leaf node object.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "NotPolicyException": {
      "description": "Indicates the requested operation can only operate on policy objects.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "NumberAttributeValue": {
      "type": "string"
    },
    "NumberResults": {
      "minimum": 1,
      "type": "integer"
    },
    "ObjectAlreadyDetachedException": {
      "description": "Indicates the object is not attached to the index.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "ObjectAttributeAction": {
      "description": "The action to take on the object attribute.",
      "properties": {
        "ObjectAttributeActionType": {
          "$ref": "#/definitions/UpdateActionType",
          "description": "Type can be either Update or Delete."
        },
        "ObjectAttributeUpdateValue": {
          "$ref": "#/definitions/TypedAttributeValue",
          "description": "The value that you want to update to."
        }
      },
      "type": "object"
    },
    "ObjectAttributeRange": {
      "description": "A range of attributes.",
      "properties": {
        "AttributeKey": {
          "$ref": "#/definitions/AttributeKey",
          "description": "The key of the attribute the attribute range covers."
        },
        "Range": {
          "$ref": "#/definitions/TypedAttributeValueRange",
          "description": "The range of attribute values being selected."
        }
      },
      "type": "object"
    },
    "ObjectAttributeRangeList": {
      "items": {
        "$ref": "#/definitions/ObjectAttributeRange"
      },
      "type": "array"
    },
    "ObjectAttributeUpdate": {
      "description": "Structure that contains attribute update information.",
      "properties": {
        "ObjectAttributeAction": {
          "$ref": "#/definitions/ObjectAttributeAction",
          "description": "The action to perform as part of the attribute update."
        },
        "ObjectAttributeKey": {
          "$ref": "#/definitions/AttributeKey",
          "description": "The key of the attribute being updated."
        }
      },
      "type": "object"
    },
    "ObjectAttributeUpdateList": {
      "items": {
        "$ref": "#/definitions/ObjectAttributeUpdate"
      },
      "type": "array"
    },
    "ObjectIdentifier": {
      "type": "string"
    },
    "ObjectIdentifierList": {
      "items": {
        "$ref": "#/definitions/ObjectIdentifier"
      },
      "type": "array"
    },
    "ObjectIdentifierToLinkNameMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/ObjectIdentifier"
          },
          "value": {
            "$ref": "#/definitions/LinkName"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ObjectNotDetachedException": {
      "description": "Indicates the requested operation cannot be completed because the object has not been detached from the tree.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "ObjectReference": {
      "description": "Reference that identifies an object.",
      "properties": {
        "Selector": {
          "$ref": "#/definitions/SelectorObjectReference",
          "description": "<p>Allows you to specify an object. You can identify an object in one of the following ways:</p> <ul> <li> <p> <i>$ObjectIdentifier</i> - Identifies the object by <code>ObjectIdentifier</code> </p> </li> <li> <p> <i>/some/path</i> - Identifies the object based on path</p> </li> <li> <p> <i>#SomeBatchReference</i> - Identifies the object in a batch call</p> </li> </ul>"
        }
      },
      "type": "object"
    },
    "ObjectType": {
      "enum": [
        "NODE",
        "LEAF_NODE",
        "POLICY",
        "INDEX"
      ],
      "type": "string"
    },
    "PathString": {
      "type": "string"
    },
    "PathToObjectIdentifiers": {
      "description": "Returns the path to the <code>ObjectIdentifiers</code> associated with the directory.",
      "properties": {
        "ObjectIdentifiers": {
          "$ref": "#/definitions/ObjectIdentifierList",
          "description": "Lists <code>ObjectIdentifiers</code> starting from directory root to the object in the request."
        },
        "Path": {
          "$ref": "#/definitions/PathString",
          "description": "The path used to identify the object starting from directory root."
        }
      },
      "type": "object"
    },
    "PathToObjectIdentifiersList": {
      "items": {
        "$ref": "#/definitions/PathToObjectIdentifiers"
      },
      "type": "array"
    },
    "PolicyAttachment": {
      "description": "Contains the <code>PolicyType</code>, <code>PolicyId</code>, and the <code>ObjectIdentifier</code> to which it is attached.",
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The <code>ObjectIdentifier</code> associated with <code>PolicyAttachment</code>."
        },
        "PolicyId": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": "The ID of <code>PolicyAttachment</code>."
        },
        "PolicyType": {
          "$ref": "#/definitions/PolicyType",
          "description": "The type of policy that can be associated with <code>PolicyAttachment</code>."
        }
      },
      "type": "object"
    },
    "PolicyAttachmentList": {
      "items": {
        "$ref": "#/definitions/PolicyAttachment"
      },
      "type": "array"
    },
    "PolicyToPath": {
      "description": "Used when a regular object exists in a <a>Directory</a> and you want to find all of the policies associated with that object and the parent to that object.",
      "properties": {
        "Path": {
          "$ref": "#/definitions/PathString",
          "description": "The path that is referenced from the root."
        },
        "Policies": {
          "$ref": "#/definitions/PolicyAttachmentList",
          "description": "List of policy objects."
        }
      },
      "type": "object"
    },
    "PolicyToPathList": {
      "items": {
        "$ref": "#/definitions/PolicyToPath"
      },
      "type": "array"
    },
    "PolicyType": {
      "type": "string"
    },
    "PublishSchemaRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/SchemaName",
          "description": "New name under which the schema will be published. If this is not provided, the development schema is considered."
        },
        "Version": {
          "$ref": "#/definitions/Version",
          "description": "Version under which the schema will be published."
        }
      },
      "required": [
        "Version"
      ],
      "type": "object"
    },
    "PublishSchemaResponse": {
      "properties": {
        "PublishedSchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN associated with the published schema. For more information, see <a>arns</a>."
        }
      },
      "type": "object"
    },
    "PutSchemaFromJsonRequest": {
      "properties": {
        "Document": {
          "$ref": "#/definitions/SchemaJsonDocument",
          "description": "The replacement JSON schema."
        }
      },
      "required": [
        "Document"
      ],
      "type": "object"
    },
    "PutSchemaFromJsonResponse": {
      "properties": {
        "Arn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the schema to update."
        }
      },
      "type": "object"
    },
    "RangeMode": {
      "enum": [
        "FIRST",
        "LAST",
        "LAST_BEFORE_MISSING_VALUES",
        "INCLUSIVE",
        "EXCLUSIVE"
      ],
      "type": "string"
    },
    "RemoveFacetFromObjectRequest": {
      "properties": {
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "A reference to the object to remove the facet from."
        },
        "SchemaFacet": {
          "$ref": "#/definitions/SchemaFacet",
          "description": "The facet to remove."
        }
      },
      "required": [
        "SchemaFacet",
        "ObjectReference"
      ],
      "type": "object"
    },
    "RemoveFacetFromObjectResponse": {
      "properties": {},
      "type": "object"
    },
    "RequiredAttributeBehavior": {
      "enum": [
        "REQUIRED_ALWAYS",
        "NOT_REQUIRED"
      ],
      "type": "string"
    },
    "ResourceNotFoundException": {
      "description": "The specified resource could not be found.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "RetryableConflictException": {
      "description": "Occurs when a conflict with a previous successful write is detected. For example, if a write operation occurs on an object and then an attempt is made to read the object using “SERIALIZABLE” consistency, this exception may result. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "Rule": {
      "description": "Contains an ARN and parameters associated with the rule.",
      "properties": {
        "Parameters": {
          "$ref": "#/definitions/RuleParameterMap",
          "description": "Min and max parameters associated with the rule."
        },
        "Type": {
          "$ref": "#/definitions/RuleType",
          "description": "The type of attribute validation rule."
        }
      },
      "type": "object"
    },
    "RuleKey": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "RuleMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/RuleKey"
          },
          "value": {
            "$ref": "#/definitions/Rule"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "RuleParameterKey": {
      "type": "string"
    },
    "RuleParameterMap": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/RuleParameterKey"
          },
          "value": {
            "$ref": "#/definitions/RuleParameterValue"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "RuleParameterValue": {
      "type": "string"
    },
    "RuleType": {
      "enum": [
        "BINARY_LENGTH",
        "NUMBER_COMPARISON",
        "STRING_FROM_SET",
        "STRING_LENGTH"
      ],
      "type": "string"
    },
    "SchemaAlreadyExistsException": {
      "description": "Indicates that a schema could not be created due to a naming conflict. Please select a different name and then try again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "SchemaAlreadyPublishedException": {
      "description": "Indicates a schema is already published.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "SchemaFacet": {
      "description": "A facet.",
      "properties": {
        "FacetName": {
          "$ref": "#/definitions/FacetName",
          "description": "The name of the facet."
        },
        "SchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "The ARN of the schema that contains the facet."
        }
      },
      "type": "object"
    },
    "SchemaFacetList": {
      "items": {
        "$ref": "#/definitions/SchemaFacet"
      },
      "type": "array"
    },
    "SchemaJsonDocument": {
      "type": "string"
    },
    "SchemaName": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    },
    "SelectorObjectReference": {
      "type": "string"
    },
    "StillContainsLinksException": {
      "description": "The object could not be deleted because links still exist. Remove the links and then try the operation again.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "StringAttributeValue": {
      "type": "string"
    },
    "Tag": {
      "description": "Tag structure which contains tag key and value.",
      "properties": {
        "Key": {
          "$ref": "#/definitions/TagKey",
          "description": "Key associated with the tag."
        },
        "Value": {
          "$ref": "#/definitions/TagValue",
          "description": "Value associated with the tag."
        }
      },
      "type": "object"
    },
    "TagKey": {
      "type": "string"
    },
    "TagKeyList": {
      "items": {
        "$ref": "#/definitions/TagKey"
      },
      "type": "array"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN of the resource. Tagging is only supported for directories."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "List of tag key value pairs."
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "TagValue": {
      "type": "string"
    },
    "TagsNumberResults": {
      "minimum": 50,
      "type": "integer"
    },
    "TypedAttributeValue": {
      "description": "Represents the data for a typed attribute. You can set one, and only one, of the elements. Each attribute in an item is a name-value pair. Attributes have a single value.",
      "properties": {
        "BinaryValue": {
          "$ref": "#/definitions/BinaryAttributeValue",
          "description": "A binary data value."
        },
        "BooleanValue": {
          "$ref": "#/definitions/BooleanAttributeValue",
          "description": "A Boolean data value."
        },
        "DatetimeValue": {
          "$ref": "#/definitions/DatetimeAttributeValue",
          "description": "A date and time value."
        },
        "NumberValue": {
          "$ref": "#/definitions/NumberAttributeValue",
          "description": "A number data value."
        },
        "StringValue": {
          "$ref": "#/definitions/StringAttributeValue",
          "description": "A string data value."
        }
      },
      "type": "object"
    },
    "TypedAttributeValueRange": {
      "description": "A range of attribute values.",
      "properties": {
        "EndMode": {
          "$ref": "#/definitions/RangeMode",
          "description": "Inclusive or exclusive range end."
        },
        "EndValue": {
          "$ref": "#/definitions/TypedAttributeValue",
          "description": "The attribute value to terminate the range at."
        },
        "StartMode": {
          "$ref": "#/definitions/RangeMode",
          "description": "Inclusive or exclusive range start."
        },
        "StartValue": {
          "$ref": "#/definitions/TypedAttributeValue",
          "description": "The value to start the range at."
        }
      },
      "required": [
        "StartMode",
        "EndMode"
      ],
      "type": "object"
    },
    "UnsupportedIndexTypeException": {
      "description": "Indicates the requested index type is not supported.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "UntagResourceRequest": {
      "properties": {
        "ResourceArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN of the resource. Tagging is only supported for directories."
        },
        "TagKeys": {
          "$ref": "#/definitions/TagKeyList",
          "description": "Keys of the tag that needs to be removed from the resource."
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateActionType": {
      "enum": [
        "CREATE_OR_UPDATE",
        "DELETE"
      ],
      "type": "string"
    },
    "UpdateFacetRequest": {
      "properties": {
        "AttributeUpdates": {
          "$ref": "#/definitions/FacetAttributeUpdateList",
          "description": "List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by AttributeAction, which specifies the type of update operation to perform. "
        },
        "Name": {
          "$ref": "#/definitions/FacetName",
          "description": " "
        },
        "ObjectType": {
          "$ref": "#/definitions/ObjectType",
          "description": "Object type associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateFacetResponse": {
      "properties": {},
      "type": "object"
    },
    "UpdateObjectAttributesRequest": {
      "properties": {
        "AttributeUpdates": {
          "$ref": "#/definitions/ObjectAttributeUpdateList",
          "description": "Attributes update structure."
        },
        "ObjectReference": {
          "$ref": "#/definitions/ObjectReference",
          "description": "Reference that identifies the object."
        }
      },
      "required": [
        "ObjectReference",
        "AttributeUpdates"
      ],
      "type": "object"
    },
    "UpdateObjectAttributesResponse": {
      "properties": {
        "ObjectIdentifier": {
          "$ref": "#/definitions/ObjectIdentifier",
          "description": " <code>ObjectIdentifier</code> of the updated object."
        }
      },
      "type": "object"
    },
    "UpdateSchemaRequest": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/SchemaName",
          "description": "Name of the schema."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "UpdateSchemaResponse": {
      "properties": {
        "SchemaArn": {
          "$ref": "#/definitions/Arn",
          "description": "ARN associated with the updated schema. For more information, see <a>arns</a>."
        }
      },
      "type": "object"
    },
    "ValidationException": {
      "description": "Indicates your request is malformed in some manner. See the exception message.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ExceptionMessage"
        }
      },
      "type": "object"
    },
    "Version": {
      "maxLength": 10,
      "minLength": 1,
      "pattern": "^[a-zA-Z0-9._-]*$",
      "type": "string"
    }
  },
  "actions": [
    {
      "id": "BatchRead",
      "title": "BatchRead",
      "description": "Performs all the read operations in a batch. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/BatchReadRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/BatchReadResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "BatchWrite",
      "title": "BatchWrite",
      "description": "Performs all the write operations in a batch. Either all the operations succeed or none. Batch writes supports only object-related operations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/BatchWriteRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/BatchWriteResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DeleteDirectory",
      "title": "DeleteDirectory",
      "description": "Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteDirectoryRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteDirectoryResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "CreateDirectory",
      "title": "CreateDirectory",
      "description": "Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateDirectoryRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateDirectoryResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DisableDirectory",
      "title": "DisableDirectory",
      "description": "Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DisableDirectoryRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DisableDirectoryResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "EnableDirectory",
      "title": "EnableDirectory",
      "description": "Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/EnableDirectoryRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/EnableDirectoryResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "GetDirectory",
      "title": "GetDirectory",
      "description": "Retrieves metadata about a directory.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GetDirectoryRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/GetDirectoryResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListDirectories",
      "title": "ListDirectories",
      "description": "Lists directories created within an account.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListDirectoriesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListDirectoriesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "UpdateFacet",
      "title": "UpdateFacet",
      "description": "<p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateFacetRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateFacetResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListFacetAttributes",
      "title": "ListFacetAttributes",
      "description": "Retrieves attributes attached to the facet.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListFacetAttributesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListFacetAttributesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "CreateFacet",
      "title": "CreateFacet",
      "description": "Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateFacetRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateFacetResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DeleteFacet",
      "title": "DeleteFacet",
      "description": "Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s associated with the facet will be deleted. Only development schema facets are allowed deletion.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteFacetRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteFacetResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListFacetNames",
      "title": "ListFacetNames",
      "description": "Retrieves the names of facets that exist in a schema.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListFacetNamesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListFacetNamesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "CreateIndex",
      "title": "CreateIndex",
      "description": "Creates an index object. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html\">Indexing</a> for more information.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateIndexRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateIndexResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "AttachToIndex",
      "title": "AttachToIndex",
      "description": "Attaches the specified object to the specified index.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AttachToIndexRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/AttachToIndexResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DetachFromIndex",
      "title": "DetachFromIndex",
      "description": "Detaches the specified object from the specified index.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DetachFromIndexRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetachFromIndexResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListIndex",
      "title": "ListIndex",
      "description": "Lists objects attached to the specified index.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListIndexRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListIndexResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "CreateObject",
      "title": "CreateObject",
      "description": "Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and LinkName is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "AttachObject",
      "title": "AttachObject",
      "description": "<p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AttachObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/AttachObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListObjectAttributes",
      "title": "ListObjectAttributes",
      "description": "Lists all attributes associated with an object. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListObjectAttributesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListObjectAttributesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListObjectChildren",
      "title": "ListObjectChildren",
      "description": "Returns a paginated list of child objects associated with a given object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListObjectChildrenRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListObjectChildrenResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DeleteObject",
      "title": "DeleteObject",
      "description": "Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DetachObject",
      "title": "DetachObject",
      "description": "Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DetachObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetachObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "AddFacetToObject",
      "title": "AddFacetToObject",
      "description": "Adds a new <a>Facet</a> to an object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AddFacetToObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/AddFacetToObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "RemoveFacetFromObject",
      "title": "RemoveFacetFromObject",
      "description": "Removes the specified facet from the specified object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RemoveFacetFromObjectRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RemoveFacetFromObjectResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListAttachedIndices",
      "title": "ListAttachedIndices",
      "description": "Lists indices attached to an object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListAttachedIndicesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListAttachedIndicesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "GetObjectInformation",
      "title": "GetObjectInformation",
      "description": "Retrieves metadata about an object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GetObjectInformationRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/GetObjectInformationResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListObjectParents",
      "title": "ListObjectParents",
      "description": "Lists parent objects associated with a given object in pagination fashion.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListObjectParentsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListObjectParentsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListObjectParentPaths",
      "title": "ListObjectParentPaths",
      "description": "<p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure\">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to directory root are ignored from the target object.</p>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListObjectParentPathsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListObjectParentPathsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListObjectPolicies",
      "title": "ListObjectPolicies",
      "description": "Returns policies attached to an object in pagination fashion.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListObjectPoliciesRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListObjectPoliciesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "UpdateObjectAttributes",
      "title": "UpdateObjectAttributes",
      "description": "Updates a given object's attributes.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateObjectAttributesRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateObjectAttributesResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "AttachPolicy",
      "title": "AttachPolicy",
      "description": "Attaches a policy object to a regular object. An object can have a limited number of attached policies.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AttachPolicyRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/AttachPolicyResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListPolicyAttachments",
      "title": "ListPolicyAttachments",
      "description": "Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListPolicyAttachmentsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListPolicyAttachmentsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DetachPolicy",
      "title": "DetachPolicy",
      "description": "Detaches a policy from an object.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DetachPolicyRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetachPolicyResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "LookupPolicy",
      "title": "LookupPolicy",
      "description": "Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/LookupPolicyRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/LookupPolicyResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "DeleteSchema",
      "title": "DeleteSchema",
      "description": "Deletes a given schema. Schemas in a development and published state can only be deleted. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteSchemaRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteSchemaResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListAppliedSchemaArns",
      "title": "ListAppliedSchemaArns",
      "description": "Lists schemas applied to a directory.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListAppliedSchemaArnsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListAppliedSchemaArnsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ApplySchema",
      "title": "ApplySchema",
      "description": "Copies input published schema into <a>Directory</a> with same name and version as that of published schema .",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ApplySchemaRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ApplySchemaResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "CreateSchema",
      "title": "CreateSchema",
      "description": "<p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateSchemaRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateSchemaResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListDevelopmentSchemaArns",
      "title": "ListDevelopmentSchemaArns",
      "description": "Retrieves the ARNs of schemas in the development state.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListDevelopmentSchemaArnsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListDevelopmentSchemaArnsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "PutSchemaFromJson",
      "title": "PutSchemaFromJson",
      "description": "Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat\">JSON Schema Format</a> for more information.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PutSchemaFromJsonRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PutSchemaFromJsonResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "PublishSchema",
      "title": "PublishSchema",
      "description": "Publishes a development schema with a version. If description and attributes are specified, PublishSchema overrides the development schema description and attributes. If not, the development schema description and attributes are used.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PublishSchemaRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PublishSchemaResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListPublishedSchemaArns",
      "title": "ListPublishedSchemaArns",
      "description": "Retrieves published schema ARNs.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListPublishedSchemaArnsRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListPublishedSchemaArnsResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "UpdateSchema",
      "title": "UpdateSchema",
      "description": "Updates the schema name with a new name. Only development schema names can be updated.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateSchemaRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateSchemaResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "ListTagsForResource",
      "title": "ListTagsForResource",
      "description": "Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListTagsForResourceRequest"
          },
          "MaxResults": {
            "type": "string",
            "description": "Pagination limit"
          },
          "NextToken": {
            "type": "string",
            "description": "Pagination token"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListTagsForResourceResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "TagResource",
      "title": "TagResource",
      "description": "API for adding tags to a resource.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/TagResourceRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/TagResourceResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    },
    {
      "id": "UntagResource",
      "title": "UntagResource",
      "description": "API for removing tags from a resource.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UntagResourceRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UntagResourceResponse"
      },
      "security": {
        "amazonaws_clouddirectory": {
          "integration": "amazonaws_clouddirectory"
        }
      }
    }
  ]
}