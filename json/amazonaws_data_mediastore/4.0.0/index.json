{
  "id": "amazonaws_data_mediastore",
  "title": "AWS Elemental MediaStore Data Plane",
  "description": "An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.",
  "security": {
    "amazonaws_data_mediastore": {
      "integration": "amazonaws_data_mediastore",
      "fields": {
        "accessKeyId": "",
        "secretAccessKey": "",
        "region": "AWS region (if applicable)"
      }
    }
  },
  "logo": {
    "backgroundColor": "#FFFFFF",
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/amazonaws_data_mediastore.jpeg"
  },
  "actionCount": 2,
  "definitions": {
    "ContainerNotFoundException": {
      "description": "The specified container was not found for the specified account.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ErrorMessage"
        }
      },
      "type": "object",
      "title": "ContainerNotFoundException"
    },
    "ContentRangePattern": {
      "pattern": "^bytes=\\d+\\-\\d+/\\d+$",
      "type": "string",
      "title": "ContentRangePattern"
    },
    "ContentType": {
      "pattern": "^[\\w\\-\\/\\.]{1,255}$",
      "type": "string",
      "title": "ContentType"
    },
    "DeleteObjectRequest": {
      "properties": {},
      "type": "object",
      "title": "DeleteObjectRequest"
    },
    "DeleteObjectResponse": {
      "properties": {},
      "type": "object",
      "title": "DeleteObjectResponse"
    },
    "DescribeObjectRequest": {
      "properties": {},
      "type": "object",
      "title": "DescribeObjectRequest"
    },
    "DescribeObjectResponse": {
      "properties": {},
      "type": "object",
      "title": "DescribeObjectResponse"
    },
    "ETag": {
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[0-9A-Fa-f]+",
      "type": "string",
      "title": "ETag"
    },
    "ErrorMessage": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[ \\w:\\.\\?-]+",
      "type": "string",
      "title": "ErrorMessage"
    },
    "GetObjectRequest": {
      "properties": {},
      "type": "object",
      "title": "GetObjectRequest"
    },
    "GetObjectResponse": {
      "properties": {
        "Body": {
          "$ref": "#/definitions/PayloadBlob",
          "description": "<p>The path to the file outside of the container. The file name can include or omit an extension. </p> <p>Example 1: If the file is stored on a remote server that has been mounted to the workstation on which the REST API command is being run, the path could be the absolute path <code> \\mount\\assets\\mlaw.avi</code> or the relative path <code>..\\..\\mount\\assets\\movies\\premium\\mlaw.avi</code>.</p> <p>Example 2: If the file is stored on a remote server that is not mounted, the path could be <code>https:\\\\192.0.2.15\\movies\\premium\\mlaw.avi</code>.</p>"
        }
      },
      "type": "object",
      "title": "GetObjectResponse"
    },
    "InternalServerError": {
      "description": "The service is temporarily unavailable.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ErrorMessage"
        }
      },
      "type": "object",
      "title": "InternalServerError"
    },
    "Item": {
      "description": "A metadata entry for a folder or object.",
      "properties": {
        "ContentLength": {
          "$ref": "#/definitions/NonNegativeLong",
          "description": "The length of the item in bytes."
        },
        "ContentType": {
          "$ref": "#/definitions/ContentType",
          "description": "The content type of the item."
        },
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "The ETag that represents a unique instance of the item."
        },
        "LastModified": {
          "$ref": "#/definitions/TimeStamp",
          "description": "The date and time that the item was last modified."
        },
        "Name": {
          "$ref": "#/definitions/ItemName",
          "description": "The name of the item."
        },
        "Type": {
          "$ref": "#/definitions/ItemType",
          "description": "The item type (folder or object)."
        }
      },
      "type": "object",
      "title": "Item"
    },
    "ItemList": {
      "items": {
        "$ref": "#/definitions/Item"
      },
      "type": "array",
      "title": "ItemList"
    },
    "ItemName": {
      "pattern": "[A-Za-z0-9_\\.\\-\\~]+",
      "type": "string",
      "title": "ItemName"
    },
    "ItemType": {
      "enum": [
        "OBJECT",
        "FOLDER"
      ],
      "type": "string",
      "title": "ItemType"
    },
    "ListItemsRequest": {
      "properties": {},
      "type": "object",
      "title": "ListItemsRequest"
    },
    "ListItemsResponse": {
      "properties": {
        "Items": {
          "$ref": "#/definitions/ItemList",
          "description": "Metadata entries for the folders and objects at the requested path."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationToken",
          "description": "The <code>NextToken</code> used to request the next page of results using <code>ListItems</code>."
        }
      },
      "type": "object",
      "title": "ListItemsResponse"
    },
    "ListLimit": {
      "maximum": 1000,
      "minimum": 1,
      "type": "integer",
      "title": "ListLimit"
    },
    "ListPathNaming": {
      "maxLength": 900,
      "minLength": 0,
      "pattern": "/?(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}(?:[A-Za-z0-9_\\.\\-\\~]+)?/?",
      "type": "string",
      "title": "ListPathNaming"
    },
    "NonNegativeLong": {
      "minimum": 0,
      "type": "integer",
      "title": "NonNegativeLong"
    },
    "ObjectNotFoundException": {
      "description": "Could not perform an operation on an object that does not exist.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ErrorMessage"
        }
      },
      "type": "object",
      "title": "ObjectNotFoundException"
    },
    "PaginationToken": {
      "type": "string",
      "title": "PaginationToken"
    },
    "PathNaming": {
      "maxLength": 900,
      "minLength": 1,
      "pattern": "(?:[A-Za-z0-9_\\.\\-\\~]+/){0,10}[A-Za-z0-9_\\.\\-\\~]+",
      "type": "string",
      "title": "PathNaming"
    },
    "PayloadBlob": {
      "type": "string",
      "title": "PayloadBlob"
    },
    "PutObjectRequest": {
      "properties": {
        "Body": {
          "$ref": "#/definitions/PayloadBlob",
          "description": "<p>The path to the file outside of the container. The file name can include or omit an extension. </p> <p>Example 1: If the file is stored on a remote server that has been mounted to the workstation on which the REST API command is being run, the path could be the absolute path <code> \\mount\\assets\\mlaw.avi</code> or the relative path <code>..\\..\\mount\\assets\\movies\\premium\\mlaw.avi</code>.</p> <p>Example 2: If the file is stored on a remote server that is not mounted, the path could be <code>https:\\\\192.0.2.15\\movies\\premium\\mlaw.avi</code>.</p>"
        }
      },
      "required": [
        "Body"
      ],
      "type": "object",
      "title": "PutObjectRequest"
    },
    "PutObjectResponse": {
      "properties": {
        "ContentSHA256": {
          "$ref": "#/definitions/SHA256Hash",
          "description": "The SHA256 digest of the object that is persisted."
        },
        "ETag": {
          "$ref": "#/definitions/ETag",
          "description": "Unique identifier of the object in the container."
        },
        "StorageClass": {
          "$ref": "#/definitions/StorageClass",
          "description": "The storage class where the object was persisted. Should be “Temporal”."
        }
      },
      "type": "object",
      "title": "PutObjectResponse"
    },
    "RangePattern": {
      "pattern": "^bytes=(?:\\d+\\-\\d*|\\d*\\-\\d+)$",
      "type": "string",
      "title": "RangePattern"
    },
    "RequestedRangeNotSatisfiableException": {
      "description": "The requested content range is not valid.",
      "properties": {
        "Message": {
          "$ref": "#/definitions/ErrorMessage"
        }
      },
      "type": "object",
      "title": "RequestedRangeNotSatisfiableException"
    },
    "SHA256Hash": {
      "maxLength": 64,
      "minLength": 64,
      "pattern": "[0-9A-Fa-f]{64}",
      "type": "string",
      "title": "SHA256Hash"
    },
    "StorageClass": {
      "enum": [
        "TEMPORAL"
      ],
      "maxLength": 16,
      "minLength": 1,
      "type": "string",
      "title": "StorageClass"
    },
    "StringPrimitive": {
      "type": "string",
      "title": "StringPrimitive"
    },
    "TimeStamp": {
      "format": "date-time",
      "type": "string",
      "title": "TimeStamp"
    },
    "statusCode": {
      "type": "integer",
      "title": "statusCode"
    }
  },
  "actions": [
    {
      "id": "ListItems",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/ListItemsRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListItemsResponse"
      },
      "security": {
        "amazonaws_data_mediastore": {
          "integration": "amazonaws_data_mediastore"
        }
      }
    },
    {
      "id": "PutObject",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Path": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/PutObjectRequest"
          }
        ],
        "required": [
          "Path"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PutObjectResponse"
      },
      "security": {
        "amazonaws_data_mediastore": {
          "integration": "amazonaws_data_mediastore"
        }
      }
    }
  ],
  "tags": [
    "cloud",
    "aws"
  ]
}