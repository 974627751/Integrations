{
  "title": "Square Connect",
  "description": "Client library for accessing the Square Connect APIs",
  "definitions": {
    "Address": {
      "description": "Represents a physical address.",
      "properties": {
        "address_line_1": {
          "description": "The first line of the address.\n\nFields that start with `address_line` provide the address's most specific\ndetails, like street number, street name, and building name. They do *not*\nprovide less specific details like city, state/province, or country (these\ndetails are provided in other fields).",
          "type": "string"
        },
        "address_line_2": {
          "description": "The second line of the address, if any.",
          "type": "string"
        },
        "address_line_3": {
          "description": "The third line of the address, if any.",
          "type": "string"
        },
        "administrative_district_level_1": {
          "description": "A civil entity within the address's country. In the US, this\nis the state.",
          "type": "string"
        },
        "administrative_district_level_2": {
          "description": "A civil entity within the address's `administrative_district_level_1`.\nIn the US, this is the county.",
          "type": "string"
        },
        "administrative_district_level_3": {
          "description": "A civil entity within the address's `administrative_district_level_2`,\nif any.",
          "type": "string"
        },
        "country": {
          "description": "The address's country, in ISO 3166-1-alpha-2 format.",
          "enum": [
            "ZZ",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CU",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IR",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KP",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SD",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SY",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "type": "string"
        },
        "first_name": {
          "description": "Optional first name when it's representing recipient.",
          "type": "string"
        },
        "last_name": {
          "description": "Optional last name when it's representing recipient.",
          "type": "string"
        },
        "locality": {
          "description": "The city or town of the address.",
          "type": "string"
        },
        "organization": {
          "description": "Optional organization name when it's representing recipient.",
          "type": "string"
        },
        "postal_code": {
          "description": "The address's postal code.",
          "type": "string"
        },
        "sublocality": {
          "description": "A civil region within the address's `locality`, if any.",
          "type": "string"
        },
        "sublocality_2": {
          "description": "A civil region within the address's `sublocality`, if any.",
          "type": "string"
        },
        "sublocality_3": {
          "description": "A civil region within the address's `sublocality_2`, if any.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CaptureTransactionRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations/LOCATION_ID/transactions/TRANSACTION_ID/capture"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CaptureTransaction/CaptureTransactionRequest.csharp",
        "php": "/sdk_samples/CaptureTransaction/CaptureTransactionRequest.php",
        "python": "/sdk_samples/CaptureTransaction/CaptureTransactionRequest.python",
        "ruby": "/sdk_samples/CaptureTransaction/CaptureTransactionRequest.ruby"
      }
    },
    "CaptureTransactionResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.",
      "example": {},
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CaptureTransaction/CaptureTransactionResponse.csharp",
        "php": "/sdk_samples/CaptureTransaction/CaptureTransactionResponse.php",
        "python": "/sdk_samples/CaptureTransaction/CaptureTransactionResponse.python",
        "ruby": "/sdk_samples/CaptureTransaction/CaptureTransactionResponse.ruby"
      }
    },
    "Card": {
      "description": "Represents the non-confidential details of a credit card.",
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/Address",
          "description": "The card's billing address. This value is present only if this object\nrepresents a customer's card on file."
        },
        "card_brand": {
          "description": "The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand)\nfor all possible values.",
          "enum": [
            "OTHER_BRAND",
            "VISA",
            "MASTERCARD",
            "AMERICAN_EXPRESS",
            "DISCOVER",
            "DISCOVER_DINERS",
            "JCB",
            "CHINA_UNIONPAY",
            "SQUARE_GIFT_CARD"
          ],
          "type": "string"
        },
        "cardholder_name": {
          "description": "The cardholder name. This value is present only if this object\nrepresents a customer's card on file.",
          "type": "string"
        },
        "exp_month": {
          "description": "The month of the card's expiration date. This value is always between\n`1` and `12`, inclusive.",
          "format": "int64",
          "type": "integer"
        },
        "exp_year": {
          "description": "The four-digit year of the card's expiration date.",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "The card's unique ID, if any.",
          "type": "string"
        },
        "last_4": {
          "description": "The last 4 digits of the card's number.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CardBrand": {
      "description": "Indicates a credit card's brand, such as `VISA`.",
      "enum": [
        "OTHER_BRAND",
        "VISA",
        "MASTERCARD",
        "AMERICAN_EXPRESS",
        "DISCOVER",
        "DISCOVER_DINERS",
        "JCB",
        "CHINA_UNIONPAY",
        "SQUARE_GIFT_CARD"
      ],
      "type": "string"
    },
    "ChargeRequest": {
      "description": "Defines the parameters that can be included in the body of\na request to the [Charge](#endpoint-charge) endpoint.",
      "example": {
        "request_body": {
          "amount_money": {
            "amount": 5000,
            "currency": "USD"
          },
          "billing_address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "card_nonce": "card_nonce_from_square_123",
          "delay_capture": false,
          "idempotency_key": "74ae1696-b1e3-4328-af6d-f1e04d947a13",
          "note": "some optional note",
          "reference_id": "some optional reference id",
          "shipping_address": {
            "address_line_1": "123 Main St",
            "administrative_district_level_1": "CA",
            "country": "US",
            "locality": "San Francisco",
            "postal_code": "94114"
          }
        },
        "request_url": "/v2/locations/LOCATION_ID/transactions"
      },
      "properties": {
        "amount_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money to charge.\n\nNote that you specify the amount in the\n__smallest denomination of the applicable currency__. For example, US dollar\namounts are specified in cents. See\n[Working with monetary amounts](#workingwithmonetaryamounts) for details.\n\nThe value of `currency` must match the currency associated with the business\nthat is charging the card."
        },
        "billing_address": {
          "$ref": "#/definitions/Address",
          "description": "The buyer's billing address. This value is optional, but this transaction\nis ineligible for chargeback protection if neither this parameter nor\n`shipping_address` is provided."
        },
        "buyer_email_address": {
          "description": "The buyer's email address, if available. This value is optional,\nbut this transaction is ineligible for chargeback protection if it is not\nprovided.",
          "type": "string"
        },
        "card_nonce": {
          "description": "A nonce generated from the `SqPaymentForm` that represents the card\nto charge.\n\nThe application that provides a nonce to this endpoint must be the\n_same application_ that generated the nonce with the `SqPaymentForm`.\nOtherwise, the nonce is invalid.\n\nDo not provide a value for this field if you provide a value for\n`customer_card_id`.",
          "type": "string"
        },
        "customer_card_id": {
          "description": "The ID of the customer card on file to charge. Do\nnot provide a value for this field if you provide a value for `card_nonce`.\n\nIf you provide this value, you _must_ also provide a value for\n`customer_id`.",
          "type": "string"
        },
        "customer_id": {
          "description": "The ID of the customer to associate this transaction with. This field\nis required if you provide a value for `customer_card_id`, and optional\notherwise.",
          "type": "string"
        },
        "delay_capture": {
          "description": "If `true`, the request will only perform an Auth on the provided\ncard. You can then later perform either a Capture (with the\n[CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void\n(with the [VoidTransation](#endpoint-voidtransaction) endpoint).\n\nDefault value: `false`",
          "type": "boolean"
        },
        "idempotency_key": {
          "description": "A value you specify that uniquely identifies this\ntransaction among transactions you've created.\n\nIf you're unsure whether a particular transaction succeeded,\nyou can reattempt it with the same idempotency key without\nworrying about double-charging the buyer.\n\nSee [Idempotency keys](#idempotencykeys) for more information.",
          "type": "string"
        },
        "note": {
          "description": "An optional note to associate with the transaction.\n\nThis value cannot exceed 60 characters.",
          "type": "string"
        },
        "reference_id": {
          "description": "An optional ID you can associate with the transaction for your own\npurposes (such as to associate the transaction with an entity ID in your\nown database).\n\nThis value cannot exceed 40 characters.",
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "description": "The buyer's shipping address, if available. This value is optional,\nbut this transaction is ineligible for chargeback protection if neither this\nparameter nor `billing_address` is provided."
        }
      },
      "required": [
        "idempotency_key",
        "amount_money"
      ],
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/Charge/ChargeRequest.csharp",
        "php": "/sdk_samples/Charge/ChargeRequest.php",
        "python": "/sdk_samples/Charge/ChargeRequest.python",
        "ruby": "/sdk_samples/Charge/ChargeRequest.ruby"
      }
    },
    "ChargeResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [Charge](#endpoint-charge) endpoint.\n\nOne of `errors` or `transaction` is present in a given response (never both).",
      "example": {
        "transaction": {
          "created_at": "2016-03-10T22:57:56Z",
          "id": "KnL67ZIwXCPtzOrqj0HrkxMF",
          "location_id": "18YC4JDH91E1H",
          "product": "EXTERNAL_API",
          "reference_id": "some optional reference id",
          "tenders": [
            {
              "amount_money": {
                "amount": 5000,
                "currency": "USD"
              },
              "card_details": {
                "card": {
                  "card_brand": "VISA",
                  "last_4": "1111"
                },
                "entry_method": "KEYED",
                "status": "CAPTURED"
              },
              "created_at": "2016-03-10T22:57:56Z",
              "id": "MtZRYYdDrYNQbOvV7nbuBvMF",
              "location_id": "18YC4JDH91E1H",
              "note": "some optional note",
              "transaction_id": "KnL67ZIwXCPtzOrqj0HrkxMF",
              "type": "CARD"
            }
          ]
        }
      },
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "transaction": {
          "$ref": "#/definitions/Transaction",
          "description": "The created transaction."
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/Charge/ChargeResponse.csharp",
        "php": "/sdk_samples/Charge/ChargeResponse.php",
        "python": "/sdk_samples/Charge/ChargeResponse.python",
        "ruby": "/sdk_samples/Charge/ChargeResponse.ruby"
      }
    },
    "Checkout": {
      "description": "Square Checkout lets merchants accept online payments for supported\npayment types using a checkout workflow hosted on squareup.com.",
      "properties": {
        "ask_for_shipping_address": {
          "description": "If `true`, Square Checkout will collect shipping information on your\nbehalf and store that information with the transaction information in your\nSquare Dashboard.\n\nDefault is `false`.",
          "type": "boolean"
        },
        "checkout_page_url": {
          "description": "The URL that the buyer's browser should be redirected to after the\ncheckout is completed.",
          "type": "string"
        },
        "created_at": {
          "description": "The time when the checkout was created, in RFC 3339 format.",
          "type": "string"
        },
        "id": {
          "description": "ID generated by Square Checkout when a new checkout is requested.",
          "type": "string"
        },
        "merchant_support_email": {
          "description": "The email address to display on the Square Checkout confirmation page\nand confirmation email that the buyer can use to contact the merchant.\n\nIf this value is not set, the confirmation page and email will display the\nprimary email address associated with the merchant's Square account.\n\nDefault is unset.",
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "Order to be checked out."
        },
        "pre_populate_buyer_email": {
          "description": "If provided, the buyer's email is pre-populated on the checkout page\nas an editable text field.\n\nDefault is unset.",
          "type": "string"
        },
        "pre_populate_shipping_address": {
          "$ref": "#/definitions/Address",
          "description": "If provided, the buyer's shipping info is pre-populated on the\ncheckout page as editable text fields.\n\nDefault is unset."
        },
        "redirect_url": {
          "description": "The URL to redirect to after checkout is completed with `checkoutId`,\nSquare's `orderId`, `transactionId`, and `referenceId` appended as URL\nparameters. For example, if the provided redirect_url is\n`http://www.example.com/order-complete`, a successful transaction redirects\nthe customer to:\n\n`http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`\n\nIf you do not provide a redirect URL, Square Checkout will display an order\nconfirmation page on your behalf; however Square strongly recommends that\nyou provide a redirect URL so you can verify the transaction results and\nfinalize the order through your existing/normal confirmation workflow.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Country": {
      "description": "Indicates the country associated with another entity, such as a business.\nValues are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).",
      "enum": [
        "ZZ",
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BQ",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CW",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HM",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NF",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PW",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "UM",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW"
      ],
      "type": "string"
    },
    "CreateCheckoutRequest": {
      "description": "Defines the parameters that can be included in the body of\na request to the [CreateCheckout](#endpoint-createcheckout) endpoint.",
      "example": {
        "request_body": {
          "ask_for_shipping_address": true,
          "idempotency_key": "74ae1696-b1e3-4328-af6d-f1e04d947a13",
          "merchant_support_email": "merchant+support@website.com",
          "order": {
            "line_items": [
              {
                "base_price_money": {
                  "amount": 1599,
                  "currency": "USD"
                },
                "name": "line-item-1",
                "quantity": "1"
              },
              {
                "base_price_money": {
                  "amount": 799,
                  "currency": "USD"
                },
                "name": "line-item-2",
                "quantity": "2"
              }
            ],
            "reference_id": "my-order-001"
          },
          "pre_populate_buyer_email": "buyer@email.com",
          "pre_populate_shipping_address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "first_name": "Jane",
            "last_name": "Doe",
            "locality": "New York",
            "postal_code": "10003"
          },
          "redirect_url": "https://merchant.website.com/order-confirm"
        },
        "request_url": "/v2/locations/LOCATION_ID/checkouts"
      },
      "properties": {
        "ask_for_shipping_address": {
          "description": "If `true`, Square Checkout will collect shipping information on your\nbehalf and store that information with the transaction information in your\nSquare Dashboard.\n\nDefault is `false`.",
          "type": "boolean"
        },
        "idempotency_key": {
          "description": "A unique string that identifies this checkout among others\nyou've created. It can be any valid string but must be unique for every\norder sent to Square Checkout for a given location ID.\n\nThe idempotency key is used to avoid processing the same order more than\nonce. If you're unsure whether a particular checkout was created\nsuccessfully, you can reattempt it with the same idempotency key and all the\nsame other parameters without worrying about creating duplicates.\n\nWe recommend using a random number/string generator native to the language\nyou are working in to generate strings for your idempotency keys.\n\nSee [Idempotency keys](#idempotencykeys) for more information.",
          "maxLength": 192,
          "minLength": 1,
          "type": "string"
        },
        "merchant_support_email": {
          "description": "The email address to display on the Square Checkout confirmation page\nand confirmation email that the buyer can use to contact the merchant.\n\nIf this value is not set, the confirmation page and email will display the\nprimary email address associated with the merchant's Square account.\n\nDefault is unset.",
          "maxLength": 254,
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/CreateOrderRequestOrder",
          "description": "The order including line items to be checked out."
        },
        "pre_populate_buyer_email": {
          "description": "If provided, the buyer's email is pre-populated on the checkout page\nas an editable text field.\n\nDefault is unset.",
          "maxLength": 254,
          "type": "string"
        },
        "pre_populate_shipping_address": {
          "$ref": "#/definitions/Address",
          "description": "If provided, the buyer's shipping info is pre-populated on the\ncheckout page as editable text fields.\n\nDefault is unset."
        },
        "redirect_url": {
          "description": "The URL to redirect to after checkout is completed with `checkoutId`,\nSquare's `orderId`, `transactionId`, and `referenceId` appended as URL\nparameters. For example, if the provided redirect_url is\n`http://www.example.com/order-complete`, a successful transaction redirects\nthe customer to:\n\n`http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`\n\nIf you do not provide a redirect URL, Square Checkout will display an order\nconfirmation page on your behalf; however Square strongly recommends that\nyou provide a redirect URL so you can verify the transaction results and\nfinalize the order through your existing/normal confirmation workflow.\n\nDefault is unset.",
          "type": "string"
        }
      },
      "required": [
        "idempotency_key",
        "order"
      ],
      "type": "object"
    },
    "CreateCheckoutResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CreateCheckout](#endpoint-createcheckout) endpoint.",
      "example": {
        "checkout": {
          "ask_for_shipping_address": true,
          "checkout_page_url": "https://connect.squareup.com/v2/checkout?c=CAISEHGimXh-C3RIT4og1a6u1qw&l=CYTKRM7R7JMV8",
          "created_at": "2017-01-18T22:25:54Z",
          "id": "CAISEHGimXh-C3RIT4og1a6u1qw",
          "merchant_support_email": "merchant+support@website.com",
          "order": {
            "id": "CAISEJOSTTqtofh-wiJrEXpkEAg",
            "line_items": [
              {
                "base_price_money": {
                  "amount": 1599,
                  "currency": "USD"
                },
                "id": "51fa1d80-0720-5b3f-6804-a18f7861d2c7",
                "name": "line-item-1",
                "quantity": "1",
                "total_money": {
                  "amount": 1599,
                  "currency": "USD"
                }
              },
              {
                "base_price_money": {
                  "amount": 799,
                  "currency": "USD"
                },
                "id": "0d53440b-b9f4-5271-7555-cb43c7af9575",
                "name": "line-item-2",
                "quantity": "2",
                "total_money": {
                  "amount": 1598,
                  "currency": "USD"
                }
              }
            ],
            "location_id": "CYTKRM7R7JMV8",
            "reference_id": "my-order-001",
            "total_money": {
              "amount": 3197,
              "currency": "USD"
            }
          },
          "pre_populate_buyer_email": "buyer@email.com",
          "pre_populate_shipping_address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "first_name": "Jane",
            "last_name": "Doe",
            "locality": "New York",
            "postal_code": "10003"
          }
        }
      },
      "properties": {
        "checkout": {
          "$ref": "#/definitions/Checkout",
          "description": "The newly created checkout.\nIf the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key."
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CreateCustomerCardRequest": {
      "description": "Defines the fields that are included in the request body of a request\nto the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.",
      "example": {
        "request_body": {
          "billing_address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "card_nonce": "YOUR_CARD_NONCE",
          "cardholder_name": "Amelia Earhart"
        },
        "request_url": "/v2/CUSTOMER_ID"
      },
      "properties": {
        "billing_address": {
          "$ref": "#/definitions/Address",
          "description": "Address information for the card on file. Only the `postal_code`\nfield is required for payments in the US and Canada."
        },
        "card_nonce": {
          "description": "A card nonce representing the credit card to link to the customer.\n\nCard nonces are generated by the `SqPaymentForm` that buyers enter\ntheir card information into. See\n[Embedding the payment form](/articles/adding-payment-form/) for\nmore information.",
          "type": "string"
        },
        "cardholder_name": {
          "description": "The cardholder's name.",
          "type": "string"
        }
      },
      "required": [
        "card_nonce"
      ],
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateCustomerCard/CreateCustomerCardRequest.csharp",
        "php": "/sdk_samples/CreateCustomerCard/CreateCustomerCardRequest.php",
        "python": "/sdk_samples/CreateCustomerCard/CreateCustomerCardRequest.python",
        "ruby": "/sdk_samples/CreateCustomerCard/CreateCustomerCardRequest.ruby"
      }
    },
    "CreateCustomerCardResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.\n\nOne of `errors` or `card` is present in a given response (never both).",
      "example": {
        "card": {
          "billing_address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "card_brand": "VISA",
          "cardholder_name": "Amelia Earhart",
          "exp_month": 11,
          "exp_year": 2018,
          "id": "icard-card_id",
          "last_4": "1111"
        }
      },
      "properties": {
        "card": {
          "$ref": "#/definitions/Card",
          "description": "The created card on file."
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateCustomerCard/CreateCustomerCardResponse.csharp",
        "php": "/sdk_samples/CreateCustomerCard/CreateCustomerCardResponse.php",
        "python": "/sdk_samples/CreateCustomerCard/CreateCustomerCardResponse.python",
        "ruby": "/sdk_samples/CreateCustomerCard/CreateCustomerCardResponse.ruby"
      }
    },
    "CreateCustomerRequest": {
      "description": "Defines the body parameters that can be provided in a request to the\n[CreateCustomer](#endpoint-createcustomer) endpoint.",
      "example": {
        "request_body": {
          "address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "email_address": "Amelia.Earhart@example.com",
          "family_name": "Earhart",
          "given_name": "Amelia",
          "note": "a customer",
          "phone_number": "1-212-555-4240",
          "reference_id": "YOUR_REFERENCE_ID"
        },
        "request_url": "/v2/customers"
      },
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "description": "The customer's physical address."
        },
        "company_name": {
          "description": "The name of the customer's company.",
          "type": "string"
        },
        "email_address": {
          "description": "The customer's email address.",
          "type": "string"
        },
        "family_name": {
          "description": "The customer's family (i.e., last) name.",
          "type": "string"
        },
        "given_name": {
          "description": "The customer's given (i.e., first) name.",
          "type": "string"
        },
        "nickname": {
          "description": "A nickname for the customer.",
          "type": "string"
        },
        "note": {
          "description": "An optional note to associate with the customer.",
          "type": "string"
        },
        "phone_number": {
          "description": "The customer's phone number.",
          "type": "string"
        },
        "reference_id": {
          "description": "An optional second ID you can set to associate the customer with an\nentity in another system.",
          "type": "string"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateCustomer/CreateCustomerRequest.csharp",
        "php": "/sdk_samples/CreateCustomer/CreateCustomerRequest.php",
        "python": "/sdk_samples/CreateCustomer/CreateCustomerRequest.python",
        "ruby": "/sdk_samples/CreateCustomer/CreateCustomerRequest.ruby"
      }
    },
    "CreateCustomerResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CreateCustomer](#endpoint-createcustomer) endpoint.\n\nOne of `errors` or `customer` is present in a given response (never both).",
      "example": {
        "customer": {
          "address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "created_at": "2016-03-23T20:21:54.859Z",
          "email_address": "Amelia.Earhart@example.com",
          "family_name": "Earhart",
          "given_name": "Amelia",
          "id": "JDKYHBWT1D4F8MFH63DBMEN8Y4",
          "note": "a customer",
          "phone_number": "1-212-555-4240",
          "reference_id": "YOUR_REFERENCE_ID",
          "updated_at": "2016-03-23T20:21:54.859Z"
        }
      },
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The created customer."
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateCustomer/CreateCustomerResponse.csharp",
        "php": "/sdk_samples/CreateCustomer/CreateCustomerResponse.php",
        "python": "/sdk_samples/CreateCustomer/CreateCustomerResponse.python",
        "ruby": "/sdk_samples/CreateCustomer/CreateCustomerResponse.ruby"
      }
    },
    "CreateOrderRequest": {
      "description": "Defines the parameters that can be included in the body of\na request to the [CreateOrder](#endpoint-createorder) endpoint.",
      "example": {
        "request_body": {
          "idempotency_key": "8193148c-9586-11e6-99f9-28cfe92138cf",
          "order": {
            "line_items": [
              {
                "base_price_money": {
                  "amount": 1599,
                  "currency": "USD"
                },
                "name": "Awesome product",
                "quantity": "1"
              },
              {
                "base_price_money": {
                  "amount": 2000,
                  "currency": "USD"
                },
                "name": "Another awesome product",
                "quantity": "3"
              }
            ],
            "reference_id": "my-order-001"
          }
        },
        "request_url": "/v2/locations/LOCATION_ID/orders"
      },
      "properties": {
        "idempotency_key": {
          "description": "A value you specify that uniquely identifies this\norder among orders you've created.\n\nIf you're unsure whether a particular order was created successfully,\nyou can reattempt it with the same idempotency key without\nworrying about creating duplicate orders.\n\nSee [Idempotency keys](#idempotencykeys) for more information.",
          "maxLength": 192,
          "minLength": 1,
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "The order to be created."
        }
      },
      "required": [
        "idempotency_key",
        "order"
      ],
      "type": "object"
    },
    "CreateOrderRequestLineItem": {
      "description": "Represents a line item to include in an order. Each line item describes\na different product to purchase, with its own quantity and price details.",
      "properties": {
        "base_price_money": {
          "$ref": "#/definitions/Money",
          "description": "The base price for a single unit of the line item's associated\nvariation. If a line item represents a Custom Amount instead of a\nparticular product, this field indicates that amount."
        },
        "name": {
          "description": "The name of the line item. This value cannot exceed 500 characters.",
          "maxLength": 500,
          "minLength": 1,
          "type": "string"
        },
        "quantity": {
          "description": "The quantity to purchase, as a string representation of a number.\nCurrently, only integer values are supported.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "quantity",
        "base_price_money"
      ],
      "type": "object"
    },
    "CreateOrderRequestOrder": {
      "description": "The object describes the order.",
      "properties": {
        "line_items": {
          "description": "The line items to associate with this order.\n\nEach line item represents a different product (or a custom monetary amount)\nto include in a purchase.",
          "items": {
            "$ref": "#/definitions/CreateOrderRequestLineItem"
          },
          "type": "array"
        },
        "reference_id": {
          "description": "An optional ID you can associate with the order for your own\npurposes (such as to associate the order with an entity ID in your\nown database).\n\nThis value cannot exceed 40 characters.",
          "maxLength": 40,
          "type": "string"
        }
      },
      "required": [
        "line_items"
      ],
      "type": "object"
    },
    "CreateRefundRequest": {
      "description": "Defines the body parameters that can be included in\na request to the [CreateRefund](#endpoint-createrefund) endpoint.",
      "example": {
        "request_body": {
          "amount_money": {
            "amount": 100,
            "currency": "USD"
          },
          "idempotency_key": "YOUR_IDEMPOTENCY_KEY",
          "reason": "a reason",
          "tender_id": "TENDER_ID"
        },
        "request_url": "/v2/locations/LOCATION_ID/transactions/TRANSACTION_ID/refund"
      },
      "properties": {
        "amount_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money to refund.\n\nNote that you specify the amount in the\n__smallest denomination of the applicable currency__. For example, US dollar\namounts are specified in cents. See\n[Working with monetary amounts](#workingwithmonetaryamounts) for details.\n\nThis amount cannot exceed the amount that was originally charged to the\ntender that corresponds to `tender_id`."
        },
        "idempotency_key": {
          "description": "A value you specify that uniquely identifies this\nrefund among refunds you've created for the tender.\n\nIf you're unsure whether a particular refund succeeded,\nyou can reattempt it with the same idempotency key without\nworrying about duplicating the refund.\n\nSee [Idempotency keys](#idempotencykeys) for more information.",
          "type": "string"
        },
        "reason": {
          "description": "A description of the reason for the refund.\n\nDefault value: `Refund via API`",
          "type": "string"
        },
        "tender_id": {
          "description": "The ID of the tender to refund.\n\nA [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods\nof payment) associated with it, and you refund each tender separately with\nthe Connect API.",
          "type": "string"
        }
      },
      "required": [
        "idempotency_key",
        "tender_id",
        "amount_money"
      ],
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateRefund/CreateRefundRequest.csharp",
        "php": "/sdk_samples/CreateRefund/CreateRefundRequest.php",
        "python": "/sdk_samples/CreateRefund/CreateRefundRequest.python",
        "ruby": "/sdk_samples/CreateRefund/CreateRefundRequest.ruby"
      }
    },
    "CreateRefundResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CreateRefund](#endpoint-createrefund) endpoint.\n\nOne of `errors` or `refund` is present in a given response (never both).",
      "example": {
        "refund": {
          "amount_money": {
            "amount": 100,
            "currency": "USD"
          },
          "created_at": "2016-02-12T00:28:18Z",
          "id": "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
          "location_id": "18YC4JDH91E1H",
          "reason": "some reason",
          "status": "PENDING",
          "tender_id": "TENDER_ID",
          "transaction_id": "TRANSACTION_ID"
        }
      },
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "refund": {
          "$ref": "#/definitions/Refund",
          "description": "The created refund."
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/CreateRefund/CreateRefundResponse.csharp",
        "php": "/sdk_samples/CreateRefund/CreateRefundResponse.php",
        "python": "/sdk_samples/CreateRefund/CreateRefundResponse.python",
        "ruby": "/sdk_samples/CreateRefund/CreateRefundResponse.ruby"
      }
    },
    "Currency": {
      "description": "Indicates the associated currency for an amount of money. Values correspond\nto [ISO 4217](https://wikipedia.org/wiki/ISO_4217).",
      "enum": [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BOV",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYR",
        "BZD",
        "CAD",
        "CDF",
        "CHE",
        "CHF",
        "CHW",
        "CLF",
        "CLP",
        "CNY",
        "COP",
        "COU",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LTL",
        "LVL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MXV",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SRD",
        "SSP",
        "STD",
        "SVC",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "USN",
        "USS",
        "UYI",
        "UYU",
        "UZS",
        "VEF",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XAG",
        "XAU",
        "XBA",
        "XBB",
        "XBC",
        "XBD",
        "XCD",
        "XDR",
        "XOF",
        "XPD",
        "XPF",
        "XPT",
        "XTS",
        "XXX",
        "YER",
        "ZAR",
        "ZMK",
        "ZMW",
        "BTC"
      ],
      "type": "string"
    },
    "Customer": {
      "description": "Represents one of a business's customers, which can have one or more\ncards on file associated with it.",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "description": "The customer's physical address."
        },
        "cards": {
          "description": "The non-confidential details of the customer's cards on file.",
          "items": {
            "$ref": "#/definitions/Card"
          },
          "type": "array"
        },
        "company_name": {
          "description": "The name of the customer's company.",
          "type": "string"
        },
        "created_at": {
          "description": "The time when the customer was created, in RFC 3339 format.",
          "type": "string"
        },
        "email_address": {
          "description": "The customer's email address.",
          "type": "string"
        },
        "family_name": {
          "description": "The customer's family (i.e., last) name.",
          "type": "string"
        },
        "given_name": {
          "description": "The customer's given (i.e., first) name.",
          "type": "string"
        },
        "groups": {
          "description": "The groups the customer belongs to.",
          "items": {
            "$ref": "#/definitions/CustomerGroupInfo"
          },
          "type": "array"
        },
        "id": {
          "description": "The customer's unique ID.",
          "type": "string"
        },
        "nickname": {
          "description": "The customer's nickname.",
          "type": "string"
        },
        "note": {
          "description": "A note to associate with the customer.",
          "type": "string"
        },
        "phone_number": {
          "description": "The customer's phone number.",
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/CustomerPreferences",
          "description": "The customer's preferences."
        },
        "reference_id": {
          "description": "A second ID you can set to associate the customer with an\nentity in another system.",
          "type": "string"
        },
        "updated_at": {
          "description": "The time when the customer was last updated, in RFC 3339 format.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "created_at",
        "updated_at"
      ],
      "type": "object"
    },
    "CustomerGroupInfo": {
      "description": "Contains some brief information about a customer group with its identifier included.",
      "properties": {
        "id": {
          "description": "The ID of the customer group.",
          "type": "string"
        },
        "name": {
          "description": "The name of the customer group.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "CustomerPreferences": {
      "description": "Represents a particular customer's preferences.",
      "properties": {
        "email_unsubscribed": {
          "description": "The customer has unsubscribed from receiving marketing campaign emails.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DeleteCustomerCardRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/customers/CUSTOMER_ID"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardRequest.csharp",
        "php": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardRequest.php",
        "python": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardRequest.python",
        "ruby": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardRequest.ruby"
      }
    },
    "DeleteCustomerCardResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint.",
      "example": {},
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardResponse.csharp",
        "php": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardResponse.php",
        "python": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardResponse.python",
        "ruby": "/sdk_samples/DeleteCustomerCard/DeleteCustomerCardResponse.ruby"
      }
    },
    "DeleteCustomerRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/customers/CUSTOMER_ID"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/DeleteCustomer/DeleteCustomerRequest.csharp",
        "php": "/sdk_samples/DeleteCustomer/DeleteCustomerRequest.php",
        "python": "/sdk_samples/DeleteCustomer/DeleteCustomerRequest.python",
        "ruby": "/sdk_samples/DeleteCustomer/DeleteCustomerRequest.ruby"
      }
    },
    "DeleteCustomerResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [DeleteCustomer](#endpoint-deletecustomer) endpoint.",
      "example": {},
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/DeleteCustomer/DeleteCustomerResponse.csharp",
        "php": "/sdk_samples/DeleteCustomer/DeleteCustomerResponse.php",
        "python": "/sdk_samples/DeleteCustomer/DeleteCustomerResponse.python",
        "ruby": "/sdk_samples/DeleteCustomer/DeleteCustomerResponse.ruby"
      }
    },
    "Error": {
      "description": "Represents an error encountered during a request to the Connect API.\n\nSee [Handling errors](#handlingerrors) for more information.",
      "properties": {
        "category": {
          "description": "The error's high-level category. See [ErrorCategory](#type-errorcategory)\nfor possible values.",
          "enum": [
            "API_ERROR",
            "AUTHENTICATION_ERROR",
            "INVALID_REQUEST_ERROR",
            "RATE_LIMIT_ERROR",
            "PAYMENT_METHOD_ERROR",
            "REFUND_ERROR"
          ],
          "type": "string"
        },
        "code": {
          "description": "The error's specific code. See [ErrorCode](#type-errorcode) for possible\nvalues",
          "enum": [
            "INTERNAL_SERVER_ERROR",
            "UNAUTHORIZED",
            "ACCESS_TOKEN_EXPIRED",
            "ACCESS_TOKEN_REVOKED",
            "FORBIDDEN",
            "INSUFFICIENT_SCOPES",
            "APPLICATION_DISABLED",
            "V1_APPLICATION",
            "V1_ACCESS_TOKEN",
            "CARD_PROCESSING_NOT_ENABLED",
            "BAD_REQUEST",
            "MISSING_REQUIRED_PARAMETER",
            "INCORRECT_TYPE",
            "INVALID_TIME",
            "INVALID_TIME_RANGE",
            "INVALID_VALUE",
            "INVALID_CURSOR",
            "UNKNOWN_QUERY_PARAMETER",
            "CONFLICTING_PARAMETERS",
            "EXPECTED_JSON_BODY",
            "INVALID_SORT_ORDER",
            "VALUE_REGEX_MISMATCH",
            "VALUE_TOO_SHORT",
            "VALUE_TOO_LONG",
            "VALUE_TOO_LOW",
            "VALUE_TOO_HIGH",
            "VALUE_EMPTY",
            "ARRAY_EMPTY",
            "EXPECTED_BOOLEAN",
            "EXPECTED_INTEGER",
            "EXPECTED_FLOAT",
            "EXPECTED_STRING",
            "EXPECTED_OBJECT",
            "EXPECTED_ARRAY",
            "EXPECTED_BASE64_ENCODED_BYTE_ARRAY",
            "INVALID_ARRAY_VALUE",
            "INVALID_ENUM_VALUE",
            "INVALID_CONTENT_TYPE",
            "INVALID_FORM_VALUE",
            "ONE_INSTRUMENT_EXPECTED",
            "NO_FIELDS_SET",
            "CARD_EXPIRED",
            "INVALID_EXPIRATION",
            "INVALID_EXPIRATION_YEAR",
            "INVALID_EXPIRATION_DATE",
            "UNSUPPORTED_CARD_BRAND",
            "INVALID_CARD",
            "DELAYED_TRANSACTION_EXPIRED",
            "DELAYED_TRANSACTION_CANCELED",
            "DELAYED_TRANSACTION_CAPTURED",
            "DELAYED_TRANSACTION_FAILED",
            "CARD_TOKEN_EXPIRED",
            "CARD_TOKEN_USED",
            "AMOUNT_TOO_HIGH",
            "UNSUPPORTED_INSTRUMENT_TYPE",
            "REFUND_AMOUNT_INVALID",
            "REFUND_ALREADY_PENDING",
            "PAYMENT_NOT_REFUNDABLE",
            "INVALID_CARD_DATA",
            "IDEMPOTENCY_KEY_REUSED",
            "UNEXPECTED_VALUE",
            "CARD_DECLINED",
            "VERIFY_CVV_FAILURE",
            "VERIFY_AVS_FAILURE",
            "CARD_DECLINED_CALL_ISSUER",
            "NOT_FOUND",
            "REQUEST_TIMEOUT",
            "CONFLICT",
            "REQUEST_ENTITY_TOO_LARGE",
            "UNSUPPORTED_MEDIA_TYPE",
            "RATE_LIMITED",
            "NOT_IMPLEMENTED",
            "SERVICE_UNAVAILABLE"
          ],
          "type": "string"
        },
        "detail": {
          "description": "A human-readable description of the error for debugging purposes.",
          "type": "string"
        },
        "field": {
          "description": "The name of the field provided in the original request that the error\npertains to, if any.",
          "type": "string"
        }
      },
      "required": [
        "category",
        "code"
      ],
      "type": "object"
    },
    "ErrorCategory": {
      "description": "Indicates which high-level category of error has occurred during a\nrequest to the Connect API.",
      "enum": [
        "API_ERROR",
        "AUTHENTICATION_ERROR",
        "INVALID_REQUEST_ERROR",
        "RATE_LIMIT_ERROR",
        "PAYMENT_METHOD_ERROR",
        "REFUND_ERROR"
      ],
      "type": "string"
    },
    "ErrorCode": {
      "description": "Indicates specific errors that can occur during a request to the\nConnect API.",
      "enum": [
        "INTERNAL_SERVER_ERROR",
        "UNAUTHORIZED",
        "ACCESS_TOKEN_EXPIRED",
        "ACCESS_TOKEN_REVOKED",
        "FORBIDDEN",
        "INSUFFICIENT_SCOPES",
        "APPLICATION_DISABLED",
        "V1_APPLICATION",
        "V1_ACCESS_TOKEN",
        "CARD_PROCESSING_NOT_ENABLED",
        "BAD_REQUEST",
        "MISSING_REQUIRED_PARAMETER",
        "INCORRECT_TYPE",
        "INVALID_TIME",
        "INVALID_TIME_RANGE",
        "INVALID_VALUE",
        "INVALID_CURSOR",
        "UNKNOWN_QUERY_PARAMETER",
        "CONFLICTING_PARAMETERS",
        "EXPECTED_JSON_BODY",
        "INVALID_SORT_ORDER",
        "VALUE_REGEX_MISMATCH",
        "VALUE_TOO_SHORT",
        "VALUE_TOO_LONG",
        "VALUE_TOO_LOW",
        "VALUE_TOO_HIGH",
        "VALUE_EMPTY",
        "ARRAY_EMPTY",
        "EXPECTED_BOOLEAN",
        "EXPECTED_INTEGER",
        "EXPECTED_FLOAT",
        "EXPECTED_STRING",
        "EXPECTED_OBJECT",
        "EXPECTED_ARRAY",
        "EXPECTED_BASE64_ENCODED_BYTE_ARRAY",
        "INVALID_ARRAY_VALUE",
        "INVALID_ENUM_VALUE",
        "INVALID_CONTENT_TYPE",
        "INVALID_FORM_VALUE",
        "ONE_INSTRUMENT_EXPECTED",
        "NO_FIELDS_SET",
        "CARD_EXPIRED",
        "INVALID_EXPIRATION",
        "INVALID_EXPIRATION_YEAR",
        "INVALID_EXPIRATION_DATE",
        "UNSUPPORTED_CARD_BRAND",
        "INVALID_CARD",
        "DELAYED_TRANSACTION_EXPIRED",
        "DELAYED_TRANSACTION_CANCELED",
        "DELAYED_TRANSACTION_CAPTURED",
        "DELAYED_TRANSACTION_FAILED",
        "CARD_TOKEN_EXPIRED",
        "CARD_TOKEN_USED",
        "AMOUNT_TOO_HIGH",
        "UNSUPPORTED_INSTRUMENT_TYPE",
        "REFUND_AMOUNT_INVALID",
        "REFUND_ALREADY_PENDING",
        "PAYMENT_NOT_REFUNDABLE",
        "INVALID_CARD_DATA",
        "IDEMPOTENCY_KEY_REUSED",
        "UNEXPECTED_VALUE",
        "CARD_DECLINED",
        "VERIFY_CVV_FAILURE",
        "VERIFY_AVS_FAILURE",
        "CARD_DECLINED_CALL_ISSUER",
        "NOT_FOUND",
        "REQUEST_TIMEOUT",
        "CONFLICT",
        "REQUEST_ENTITY_TOO_LARGE",
        "UNSUPPORTED_MEDIA_TYPE",
        "RATE_LIMITED",
        "NOT_IMPLEMENTED",
        "SERVICE_UNAVAILABLE"
      ],
      "type": "string"
    },
    "ListCustomersRequest": {
      "description": "Defines the query parameters that can be provided in a request to the\n[ListCustomers](#endpoint-listcustomers) endpoint.",
      "example": {
        "request_url": "https://connect.squareup.com/v2/customers"
      },
      "properties": {
        "cursor": {
          "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListCustomers/ListCustomersRequest.csharp",
        "php": "/sdk_samples/ListCustomers/ListCustomersRequest.php",
        "python": "/sdk_samples/ListCustomers/ListCustomersRequest.python",
        "ruby": "/sdk_samples/ListCustomers/ListCustomersRequest.ruby"
      }
    },
    "ListCustomersResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [ListCustomers](#endpoint-listcustomers) endpoint.\n\nOne of `errors` or `customers` is present in a given response (never both).",
      "example": {
        "customers": [
          {
            "address": {
              "address_line_1": "500 Electric Ave",
              "address_line_2": "Suite 600",
              "administrative_district_level_1": "NY",
              "country": "US",
              "locality": "New York",
              "postal_code": "10003"
            },
            "created_at": "2016-03-23T20:21:54.859Z",
            "email_address": "Amelia.Earhart@example.com",
            "family_name": "Earhart",
            "given_name": "Amelia",
            "groups": [
              {
                "id": "16894e93-96eb-4ced-b24b-f71d42bf084c",
                "name": "Aviation Enthusiasts"
              }
            ],
            "id": "JDKYHBWT1D4F8MFH63DBMEN8Y4",
            "note": "a customer",
            "phone_number": "1-212-555-4240",
            "reference_id": "YOUR_REFERENCE_ID",
            "updated_at": "2016-03-23T20:21:55Z"
          }
        ]
      },
      "properties": {
        "cursor": {
          "description": "A pagination cursor to retrieve the next set of results for your\noriginal query to the endpoint. This value is present only if the request\nsucceeded and additional results are available.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        },
        "customers": {
          "description": "An array of `Customer` objects that match your query.",
          "items": {
            "$ref": "#/definitions/Customer"
          },
          "type": "array"
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListCustomers/ListCustomersResponse.csharp",
        "php": "/sdk_samples/ListCustomers/ListCustomersResponse.php",
        "python": "/sdk_samples/ListCustomers/ListCustomersResponse.python",
        "ruby": "/sdk_samples/ListCustomers/ListCustomersResponse.ruby"
      }
    },
    "ListLocationsRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListLocations/ListLocationsRequest.csharp",
        "php": "/sdk_samples/ListLocations/ListLocationsRequest.php",
        "python": "/sdk_samples/ListLocations/ListLocationsRequest.python",
        "ruby": "/sdk_samples/ListLocations/ListLocationsRequest.ruby"
      }
    },
    "ListLocationsResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [ListLocations](#endpoint-listlocations) endpoint.\n\nOne of `errors` or `locations` is present in a given response (never both).",
      "example": {
        "locations": [
          {
            "address": {
              "address_line_1": "123 Main St",
              "administrative_district_level_1": "CA",
              "country": "US",
              "locality": "San Francisco",
              "postal_code": "94114"
            },
            "capabilities": [
              "CREDIT_CARD_PROCESSING"
            ],
            "id": "18YC4JDH91E1H",
            "name": "your location name",
            "timezone": "America/Los_Angeles"
          }
        ]
      },
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "locations": {
          "description": "The business's locations.",
          "items": {
            "$ref": "#/definitions/Location"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListLocations/ListLocationsResponse.csharp",
        "php": "/sdk_samples/ListLocations/ListLocationsResponse.php",
        "python": "/sdk_samples/ListLocations/ListLocationsResponse.python",
        "ruby": "/sdk_samples/ListLocations/ListLocationsResponse.ruby"
      }
    },
    "ListRefundsRequest": {
      "description": "Defines the query parameters that can be included in\na request to the [ListRefunds](#endpoint-listrefunds) endpoint.",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations/LOCATION_ID/refunds?begin_time=2016-01-15T00:00:00Z&end_time=2016-01-31T00:00:00Z"
      },
      "properties": {
        "begin_time": {
          "description": "The beginning of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time minus one year.",
          "type": "string"
        },
        "cursor": {
          "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        },
        "end_time": {
          "description": "The end of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which results are listed in the response (`ASC` for\noldest first, `DESC` for newest first).\n\nDefault value: `DESC`",
          "enum": [
            "DESC",
            "ASC"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListRefunds/ListRefundsRequest.csharp",
        "php": "/sdk_samples/ListRefunds/ListRefundsRequest.php",
        "python": "/sdk_samples/ListRefunds/ListRefundsRequest.python",
        "ruby": "/sdk_samples/ListRefunds/ListRefundsRequest.ruby"
      }
    },
    "ListRefundsResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [ListRefunds](#endpoint-listrefunds) endpoint.\n\nOne of `errors` or `refunds` is present in a given response (never both).",
      "example": {
        "refunds": [
          {
            "amount_money": {
              "amount": 100,
              "currency": "USD"
            },
            "created_at": "2016-02-12T00:28:18Z",
            "id": "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
            "location_id": "18YC4JDH91E1H",
            "reason": "some reason",
            "status": "APPROVED",
            "tender_id": "TENDER_ID",
            "transaction_id": "TRANSACTION_ID"
          }
        ]
      },
      "properties": {
        "cursor": {
          "description": "A pagination cursor for retrieving the next set of results,\nif any remain. Provide this value as the `cursor` parameter in a subsequent\nrequest to this endpoint.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "refunds": {
          "description": "An array of refunds that match your query.",
          "items": {
            "$ref": "#/definitions/Refund"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListRefunds/ListRefundsResponse.csharp",
        "php": "/sdk_samples/ListRefunds/ListRefundsResponse.php",
        "python": "/sdk_samples/ListRefunds/ListRefundsResponse.python",
        "ruby": "/sdk_samples/ListRefunds/ListRefundsResponse.ruby"
      }
    },
    "ListTransactionsRequest": {
      "description": "Defines the query parameters that can be included in\na request to the [ListTransactions](#endpoint-listtransactions) endpoint.",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations/LOCATION_ID/transactions?begin_time=2016-01-15T00:00:00Z&end_time=2016-01-31T00:00:00Z"
      },
      "properties": {
        "begin_time": {
          "description": "The beginning of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time minus one year.",
          "type": "string"
        },
        "cursor": {
          "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        },
        "end_time": {
          "description": "The end of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which results are listed in the response (`ASC` for\noldest first, `DESC` for newest first).\n\nDefault value: `DESC`",
          "enum": [
            "DESC",
            "ASC"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListTransactions/ListTransactionsRequest.csharp",
        "php": "/sdk_samples/ListTransactions/ListTransactionsRequest.php",
        "python": "/sdk_samples/ListTransactions/ListTransactionsRequest.python",
        "ruby": "/sdk_samples/ListTransactions/ListTransactionsRequest.ruby"
      }
    },
    "ListTransactionsResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [ListTransactions](#endpoint-listtransactions) endpoint.\n\nOne of `errors` or `transactions` is present in a given response (never both).",
      "example": {
        "transactions": [
          {
            "created_at": "2016-03-10T22:57:56Z",
            "id": "KnL67ZIwXCPtzOrqj0HrkxMF",
            "location_id": "18YC4JDH91E1H",
            "product": "EXTERNAL_API",
            "reference_id": "some optional reference id",
            "tenders": [
              {
                "amount_money": {
                  "amount": 5000,
                  "currency": "USD"
                },
                "card_details": {
                  "card": {
                    "card_brand": "VISA",
                    "last_4": "1111"
                  },
                  "entry_method": "KEYED",
                  "status": "CAPTURED"
                },
                "created_at": "2016-03-10T22:57:56Z",
                "id": "MtZRYYdDrYNQbOvV7nbuBvMF",
                "location_id": "18YC4JDH91E1H",
                "note": "some optional note",
                "processing_fee_money": {
                  "amount": 138,
                  "currency": "USD"
                },
                "transaction_id": "KnL67ZIwXCPtzOrqj0HrkxMF",
                "type": "CARD"
              }
            ]
          }
        ]
      },
      "properties": {
        "cursor": {
          "description": "A pagination cursor for retrieving the next set of results,\nif any remain. Provide this value as the `cursor` parameter in a subsequent\nrequest to this endpoint.\n\nSee [Paginating results](#paginatingresults) for more information.",
          "type": "string"
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "transactions": {
          "description": "An array of transactions that match your query.",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/ListTransactions/ListTransactionsResponse.csharp",
        "php": "/sdk_samples/ListTransactions/ListTransactionsResponse.php",
        "python": "/sdk_samples/ListTransactions/ListTransactionsResponse.python",
        "ruby": "/sdk_samples/ListTransactions/ListTransactionsResponse.ruby"
      }
    },
    "Location": {
      "description": "Represents one of a business's locations.",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "description": "The location's physical address."
        },
        "capabilities": {
          "description": "Indicates which Square features are enabled for the location.\n\nSee [LocationCapability](#type-locationcapability) for possible values.",
          "items": {
            "enum": [
              "CREDIT_CARD_PROCESSING"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "The location's unique ID.",
          "type": "string"
        },
        "name": {
          "description": "The location's name.",
          "type": "string"
        },
        "timezone": {
          "description": "The [IANA Timezone Database](https://www.iana.org/time-zones)\nidentifier for the location's timezone.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocationCapability": {
      "description": "Indicates account capabilities that a business's location might or\nmight not have enabled.",
      "enum": [
        "CREDIT_CARD_PROCESSING"
      ],
      "type": "string"
    },
    "Money": {
      "description": "Represents an amount of money.\n\n__Important:__ Unlike version 1 of the Connect API, __all monetary amounts\nreturned by v2 endpoints are positive.__ (In v1, monetary amounts are negative\nif they represent money being paid _by_ a merchant, instead of money being\npaid _to_ a merchant.)",
      "properties": {
        "amount": {
          "description": "The amount of money, in the smallest denomination of the\ncurrency indicated by `currency`. For example, when `currency` is `USD`,\n`amount` is in cents.",
          "format": "int64",
          "type": "integer"
        },
        "currency": {
          "description": "The type of currency, in __ISO 4217 format__. For example, the currency\ncode for US dollars is `USD`.\n\nSee [Currency](#type-currency) for possible values.",
          "enum": [
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AUD",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BOV",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BYR",
            "BZD",
            "CAD",
            "CDF",
            "CHE",
            "CHF",
            "CHW",
            "CLF",
            "CLP",
            "CNY",
            "COP",
            "COU",
            "CRC",
            "CUC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EGP",
            "ERN",
            "ETB",
            "EUR",
            "FJD",
            "FKP",
            "GBP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KPW",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MMK",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MXV",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO",
            "NOK",
            "NPR",
            "NZD",
            "OMR",
            "PAB",
            "PEN",
            "PGK",
            "PHP",
            "PKR",
            "PLN",
            "PYG",
            "QAR",
            "RON",
            "RSD",
            "RUB",
            "RWF",
            "SAR",
            "SBD",
            "SCR",
            "SDG",
            "SEK",
            "SGD",
            "SHP",
            "SLL",
            "SOS",
            "SRD",
            "SSP",
            "STD",
            "SVC",
            "SYP",
            "SZL",
            "THB",
            "TJS",
            "TMT",
            "TND",
            "TOP",
            "TRY",
            "TTD",
            "TWD",
            "TZS",
            "UAH",
            "UGX",
            "USD",
            "USN",
            "USS",
            "UYI",
            "UYU",
            "UZS",
            "VEF",
            "VND",
            "VUV",
            "WST",
            "XAF",
            "XAG",
            "XAU",
            "XBA",
            "XBB",
            "XBC",
            "XBD",
            "XCD",
            "XDR",
            "XOF",
            "XPD",
            "XPF",
            "XPT",
            "XTS",
            "XXX",
            "YER",
            "ZAR",
            "ZMK",
            "ZMW",
            "BTC"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Order": {
      "description": "Contains all information related to a single order to process with Square,\nincluding line items that specify the products to purchase",
      "properties": {
        "id": {
          "description": "The order's unique ID.\n\nThis value is not present if the order was not created with the\n[CreateOrder](#endpoint-createorder) endpoint.",
          "type": "string"
        },
        "line_items": {
          "description": "The line items included in the order. Every order has at least one\nline item.",
          "items": {
            "$ref": "#/definitions/OrderLineItem"
          },
          "type": "array"
        },
        "location_id": {
          "description": "The ID of the merchant location this order is associated with.",
          "type": "string"
        },
        "reference_id": {
          "description": "A client specified identifier to associate an entity in another system\nwith this order.",
          "type": "string"
        },
        "total_money": {
          "$ref": "#/definitions/Money",
          "description": "The total amount of money to collect for the order."
        }
      },
      "type": "object"
    },
    "OrderLineItem": {
      "description": "Represents a line item in an order. Each line item describes a different\nproduct to purchase, with its own quantity and price details.",
      "properties": {
        "base_price_money": {
          "$ref": "#/definitions/Money",
          "description": "The base price for a single unit of the line item's associated\nvariation.\n\nIf a line item represents a Custom Amount instead of a particular product,\nthis field indicates that amount."
        },
        "id": {
          "description": "The line item's ID, unique only within this order.",
          "type": "string"
        },
        "name": {
          "description": "The name of the line item.",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of the product to purchase. Currently, this string must\nhave an integer value.",
          "type": "string"
        },
        "total_money": {
          "$ref": "#/definitions/Money",
          "description": "The total amount of money to collect for this line item."
        }
      },
      "type": "object"
    },
    "Refund": {
      "description": "Represents a refund processed for a Square transaction.",
      "properties": {
        "amount_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money refunded to the buyer."
        },
        "created_at": {
          "description": "The time when the refund was created, in RFC 3339 format.",
          "type": "string"
        },
        "id": {
          "description": "The refund's unique ID.",
          "type": "string"
        },
        "location_id": {
          "description": "The ID of the refund's associated location.",
          "type": "string"
        },
        "processing_fee_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of Square processing fee money refunded to the *merchant*."
        },
        "reason": {
          "description": "The reason for the refund being issued.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,\nor `FAILED`).",
          "enum": [
            "PENDING",
            "APPROVED",
            "REJECTED",
            "FAILED"
          ],
          "type": "string"
        },
        "tender_id": {
          "description": "The ID of the refunded tender.",
          "type": "string"
        },
        "transaction_id": {
          "description": "The ID of the transaction that the refunded tender is part of.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "location_id",
        "transaction_id",
        "tender_id",
        "reason",
        "amount_money",
        "status"
      ],
      "type": "object"
    },
    "RefundStatus": {
      "description": "Indicates a refund's current status.",
      "enum": [
        "PENDING",
        "APPROVED",
        "REJECTED",
        "FAILED"
      ],
      "type": "string"
    },
    "RetrieveCustomerRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/customers/CUSTOMER_ID"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/RetrieveCustomer/RetrieveCustomerRequest.csharp",
        "php": "/sdk_samples/RetrieveCustomer/RetrieveCustomerRequest.php",
        "python": "/sdk_samples/RetrieveCustomer/RetrieveCustomerRequest.python",
        "ruby": "/sdk_samples/RetrieveCustomer/RetrieveCustomerRequest.ruby"
      }
    },
    "RetrieveCustomerResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [RetrieveCustomer](#endpoint-retrievecustomer) endpoint.\n\nOne of `errors` or `customer` is present in a given response (never both).",
      "example": {
        "customer": {
          "address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "created_at": "2016-03-23T20:21:54.859Z",
          "email_address": "Amelia.Earhart@example.com",
          "family_name": "Earhart",
          "given_name": "Amelia",
          "groups": [
            {
              "id": "16894e93-96eb-4ced-b24b-f71d42bf084c",
              "name": "Aviation Enthusiasts"
            }
          ],
          "id": "JDKYHBWT1D4F8MFH63DBMEN8Y4",
          "note": "a customer",
          "phone_number": "1-212-555-4240",
          "reference_id": "YOUR_REFERENCE_ID",
          "updated_at": "2016-03-23T20:21:54.859Z"
        }
      },
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The requested customer."
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/RetrieveCustomer/RetrieveCustomerResponse.csharp",
        "php": "/sdk_samples/RetrieveCustomer/RetrieveCustomerResponse.php",
        "python": "/sdk_samples/RetrieveCustomer/RetrieveCustomerResponse.python",
        "ruby": "/sdk_samples/RetrieveCustomer/RetrieveCustomerResponse.ruby"
      }
    },
    "RetrieveTransactionRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations/LOCATION_ID/transactions/TRANSACTION_ID"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/RetrieveTransaction/RetrieveTransactionRequest.csharp",
        "php": "/sdk_samples/RetrieveTransaction/RetrieveTransactionRequest.php",
        "python": "/sdk_samples/RetrieveTransaction/RetrieveTransactionRequest.python",
        "ruby": "/sdk_samples/RetrieveTransaction/RetrieveTransactionRequest.ruby"
      }
    },
    "RetrieveTransactionResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.\n\nOne of `errors` or `transaction` is present in a given response (never both).",
      "example": {
        "transaction": {
          "created_at": "2016-03-10T22:57:56Z",
          "id": "KnL67ZIwXCPtzOrqj0HrkxMF",
          "location_id": "18YC4JDH91E1H",
          "product": "EXTERNAL_API",
          "reference_id": "some optional reference id",
          "tenders": [
            {
              "amount_money": {
                "amount": 5000,
                "currency": "USD"
              },
              "card_details": {
                "card": {
                  "card_brand": "VISA",
                  "last_4": "1111"
                },
                "entry_method": "KEYED",
                "status": "CAPTURED"
              },
              "created_at": "2016-03-10T22:57:56Z",
              "id": "MtZRYYdDrYNQbOvV7nbuBvMF",
              "location_id": "18YC4JDH91E1H",
              "note": "some optional note",
              "processing_fee_money": {
                "amount": 138,
                "currency": "USD"
              },
              "transaction_id": "KnL67ZIwXCPtzOrqj0HrkxMF",
              "type": "CARD"
            }
          ]
        }
      },
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        },
        "transaction": {
          "$ref": "#/definitions/Transaction",
          "description": "The requested transaction."
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/RetrieveTransaction/RetrieveTransactionResponse.csharp",
        "php": "/sdk_samples/RetrieveTransaction/RetrieveTransactionResponse.php",
        "python": "/sdk_samples/RetrieveTransaction/RetrieveTransactionResponse.python",
        "ruby": "/sdk_samples/RetrieveTransaction/RetrieveTransactionResponse.ruby"
      }
    },
    "SortOrder": {
      "description": "The order (e.g., chronological or alphabetical) in which results from a request are returned.",
      "enum": [
        "DESC",
        "ASC"
      ],
      "type": "string"
    },
    "Tender": {
      "description": "Represents a tender (i.e., a method of payment) used in a Square transaction.",
      "properties": {
        "amount_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of the tender."
        },
        "card_details": {
          "$ref": "#/definitions/TenderCardDetails",
          "description": "The details of the card tender.\n\nThis value is present only if the value of `type` is `CARD`."
        },
        "cash_details": {
          "$ref": "#/definitions/TenderCashDetails",
          "description": "The details of the cash tender.\n\nThis value is present only if the value of `type` is `CASH`."
        },
        "created_at": {
          "description": "The time when the tender was created, in RFC 3339 format.",
          "type": "string"
        },
        "customer_id": {
          "description": "If the tender is associated with a customer or represents a customer's card on file,\nthis is the ID of the associated customer.",
          "type": "string"
        },
        "id": {
          "description": "The tender's unique ID.",
          "type": "string"
        },
        "location_id": {
          "description": "The ID of the transaction's associated location.",
          "type": "string"
        },
        "note": {
          "description": "An optional note associated with the tender at the time of payment.",
          "type": "string"
        },
        "processing_fee_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of any Square processing fees applied to the tender.\n\nThis field is not immediately populated when a new transaction is created.\nIt is usually available after about ten seconds."
        },
        "transaction_id": {
          "description": "The ID of the tender's associated transaction.",
          "type": "string"
        },
        "type": {
          "description": "The type of tender, such as `CARD` or `CASH`.",
          "enum": [
            "CARD",
            "CASH",
            "THIRD_PARTY_CARD",
            "SQUARE_GIFT_CARD",
            "NO_SALE",
            "OTHER"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TenderCardDetails": {
      "description": "Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`",
      "properties": {
        "card": {
          "$ref": "#/definitions/Card",
          "description": "The credit card's non-confidential details."
        },
        "entry_method": {
          "description": "The method used to enter the card's details for the transaction.",
          "enum": [
            "SWIPED",
            "KEYED",
            "EMV",
            "ON_FILE",
            "CONTACTLESS"
          ],
          "type": "string"
        },
        "status": {
          "description": "The credit card payment's current state (such as `AUTHORIZED` or\n`CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus)\nfor possible values.",
          "enum": [
            "AUTHORIZED",
            "CAPTURED",
            "VOIDED",
            "FAILED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TenderCardDetailsEntryMethod": {
      "description": "Indicates the method used to enter the card's details.",
      "enum": [
        "SWIPED",
        "KEYED",
        "EMV",
        "ON_FILE",
        "CONTACTLESS"
      ],
      "type": "string"
    },
    "TenderCardDetailsStatus": {
      "description": "Indicates the card transaction's current status.",
      "enum": [
        "AUTHORIZED",
        "CAPTURED",
        "VOIDED",
        "FAILED"
      ],
      "type": "string"
    },
    "TenderCashDetails": {
      "description": "Represents the details of a tender with `type` `CASH`.",
      "properties": {
        "buyer_tendered_money": {
          "$ref": "#/definitions/Money",
          "description": "The total amount of cash provided by the buyer, before change is given."
        },
        "change_back_money": {
          "$ref": "#/definitions/Money",
          "description": "The amount of change returned to the buyer."
        }
      },
      "type": "object"
    },
    "TenderType": {
      "description": "Indicates a tender's type.",
      "enum": [
        "CARD",
        "CASH",
        "THIRD_PARTY_CARD",
        "SQUARE_GIFT_CARD",
        "NO_SALE",
        "OTHER"
      ],
      "type": "string"
    },
    "Transaction": {
      "description": "Represents a transaction processed with Square, either with the\nConnect API or with Square Register.\n\nThe `tenders` field of this object lists all methods of payment used to pay in\nthe transaction.",
      "properties": {
        "client_id": {
          "description": "If the transaction was created in the Square Register app, this value\nis the ID generated for the transaction by Square Register.\n\nThis ID has no relationship to the transaction's canonical `id`, which is\ngenerated by Square's backend servers. This value is generated for bookkeeping\npurposes, in case the transaction cannot immediately be completed (for example,\nif the transaction is processed in offline mode).\n\nIt is not currently possible with the Connect API to perform a transaction\nlookup by this value.",
          "type": "string"
        },
        "created_at": {
          "description": "The time when the transaction was created, in RFC 3339 format.",
          "type": "string"
        },
        "id": {
          "description": "The transaction's unique ID, issued by Square payments servers.",
          "type": "string"
        },
        "location_id": {
          "description": "The ID of the transaction's associated location.",
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "The order associated with this transaction, if any."
        },
        "product": {
          "description": "The Square product that processed the transaction.",
          "enum": [
            "REGISTER",
            "EXTERNAL_API",
            "BILLING",
            "APPOINTMENTS",
            "INVOICES",
            "ONLINE_STORE",
            "PAYROLL",
            "OTHER"
          ],
          "type": "string"
        },
        "reference_id": {
          "description": "If the transaction was created with the [Charge](#endpoint-charge)\nendpoint, this value is the same as the value provided for the `reference_id`\nparameter in the request to that endpoint. Otherwise, it is not set.",
          "type": "string"
        },
        "refunds": {
          "description": "Refunds that have been applied to any tender in the transaction.",
          "items": {
            "$ref": "#/definitions/Refund"
          },
          "type": "array"
        },
        "shipping_address": {
          "$ref": "#/definitions/Address",
          "description": "The shipping address provided in the request, if any."
        },
        "tenders": {
          "description": "The tenders used to pay in the transaction.",
          "items": {
            "$ref": "#/definitions/Tender"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TransactionProduct": {
      "description": "Indicates the Square product used to process a transaction.",
      "enum": [
        "REGISTER",
        "EXTERNAL_API",
        "BILLING",
        "APPOINTMENTS",
        "INVOICES",
        "ONLINE_STORE",
        "PAYROLL",
        "OTHER"
      ],
      "type": "string"
    },
    "UpdateCustomerRequest": {
      "description": "Defines the body parameters that can be provided in a request to the\n[UpdateCustomer](#endpoint-updatecustomer) endpoint.",
      "example": {
        "request_body": {
          "email_address": "New.Amelia.Earhart@example.com",
          "note": "updated customer note",
          "phone_number": ""
        },
        "request_url": "/v2/customers/CUSTOMER_ID"
      },
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "description": "The customer's physical address."
        },
        "company_name": {
          "description": "The name of the customer's company.",
          "type": "string"
        },
        "email_address": {
          "description": "The customer's email address.",
          "type": "string"
        },
        "family_name": {
          "description": "The customer's family (i.e., last) name.",
          "type": "string"
        },
        "given_name": {
          "description": "The customer's given (i.e., first) name.",
          "type": "string"
        },
        "nickname": {
          "description": "A nickname for the customer.",
          "type": "string"
        },
        "note": {
          "description": "An optional note to associate with the customer.",
          "type": "string"
        },
        "phone_number": {
          "description": "The customer's phone number.",
          "type": "string"
        },
        "reference_id": {
          "description": "An optional second ID you can set to associate the customer with an\nentity in another system.",
          "type": "string"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/UpdateCustomer/UpdateCustomerRequest.csharp",
        "php": "/sdk_samples/UpdateCustomer/UpdateCustomerRequest.php",
        "python": "/sdk_samples/UpdateCustomer/UpdateCustomerRequest.python",
        "ruby": "/sdk_samples/UpdateCustomer/UpdateCustomerRequest.ruby"
      }
    },
    "UpdateCustomerResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.\n\nOne of `errors` or `customer` is present in a given response (never both).",
      "example": {
        "customer": {
          "address": {
            "address_line_1": "500 Electric Ave",
            "address_line_2": "Suite 600",
            "administrative_district_level_1": "NY",
            "country": "US",
            "locality": "New York",
            "postal_code": "10003"
          },
          "created_at": "2016-03-23T20:21:54.859Z",
          "email_address": "New.Amelia.Earhart@example.com",
          "family_name": "Earhart",
          "given_name": "Amelia",
          "groups": [
            {
              "id": "16894e93-96eb-4ced-b24b-f71d42bf084c",
              "name": "Aviation Enthusiasts"
            }
          ],
          "id": "JDKYHBWT1D4F8MFH63DBMEN8Y4",
          "note": "updated customer note",
          "reference_id": "YOUR_REFERENCE_ID",
          "updated_at": "2016-03-25T20:21:55Z"
        }
      },
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The updated customer."
        },
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/UpdateCustomer/UpdateCustomerResponse.csharp",
        "php": "/sdk_samples/UpdateCustomer/UpdateCustomerResponse.php",
        "python": "/sdk_samples/UpdateCustomer/UpdateCustomerResponse.python",
        "ruby": "/sdk_samples/UpdateCustomer/UpdateCustomerResponse.ruby"
      }
    },
    "VoidTransactionRequest": {
      "description": "",
      "example": {
        "request_url": "https://connect.squareup.com/v2/locations/LOCATION_ID/transactions/TRANSACTION_ID/void"
      },
      "properties": {},
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/VoidTransaction/VoidTransactionRequest.csharp",
        "php": "/sdk_samples/VoidTransaction/VoidTransactionRequest.php",
        "python": "/sdk_samples/VoidTransaction/VoidTransactionRequest.python",
        "ruby": "/sdk_samples/VoidTransaction/VoidTransactionRequest.ruby"
      }
    },
    "VoidTransactionResponse": {
      "description": "Defines the fields that are included in the response body of\na request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.",
      "example": {},
      "properties": {
        "errors": {
          "description": "Any errors that occurred during the request.",
          "items": {
            "$ref": "#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-sq-sdk-sample-code": {
        "csharp": "/sdk_samples/VoidTransaction/VoidTransactionResponse.csharp",
        "php": "/sdk_samples/VoidTransaction/VoidTransactionResponse.php",
        "python": "/sdk_samples/VoidTransaction/VoidTransactionResponse.python",
        "ruby": "/sdk_samples/VoidTransaction/VoidTransactionResponse.ruby"
      }
    }
  },
  "actions": [
    {
      "id": "ListCustomers",
      "title": "ListCustomers",
      "description": "Lists a business's customers.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "cursor": {
            "type": "string",
            "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListCustomersResponse"
      }
    },
    {
      "id": "CreateCustomer",
      "title": "CreateCustomer",
      "description": "Creates a new customer for a business, which can have associated cards on file.\n\nYou must provide __at least one__ of the following values in your request to this\nendpoint:\n\n- `given_name`\n- `family_name`\n- `company_name`\n- `email_address`\n- `phone_number`\n\nThis endpoint does not accept an idempotency key. If you accidentally create\na duplicate customer, you can delete it with the\n[DeleteCustomer](#endpoint-deletecustomer) endpoint.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "body": {
            "$ref": "#/definitions/CreateCustomerRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateCustomerResponse"
      }
    },
    {
      "id": "DeleteCustomer",
      "title": "DeleteCustomer",
      "description": "Deletes a customer from a business, along with any linked cards on file.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer to delete."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteCustomerResponse"
      }
    },
    {
      "id": "RetrieveCustomer",
      "title": "RetrieveCustomer",
      "description": "Returns details for a single customer.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer to retrieve."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RetrieveCustomerResponse"
      }
    },
    {
      "id": "UpdateCustomer",
      "title": "UpdateCustomer",
      "description": "Updates the details of an existing customer.\n\nYou cannot edit a customer's cards on file with this endpoint. To make changes\nto a card on file, you must delete the existing card on file with the\n[DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the\n[CreateCustomerCard](#endpoint-createcustomercard) endpoint.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer to update."
          },
          "body": {
            "$ref": "#/definitions/UpdateCustomerRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateCustomerResponse"
      }
    },
    {
      "id": "CreateCustomerCard",
      "title": "CreateCustomerCard",
      "description": "Adds a card on file to an existing customer.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer to link the card on file to."
          },
          "body": {
            "$ref": "#/definitions/CreateCustomerCardRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateCustomerCardResponse"
      }
    },
    {
      "id": "DeleteCustomerCard",
      "title": "DeleteCustomerCard",
      "description": "Removes a card on file from a customer.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the customer that the card on file belongs to."
          },
          "card_id": {
            "type": "string",
            "description": "The ID of the card on file to delete."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteCustomerCardResponse"
      }
    },
    {
      "id": "ListLocations",
      "title": "ListLocations",
      "description": "Provides the details for all of a business's locations.\n\nMost other Connect API endpoints have a required `location_id` path parameter.\nThe `id` field of the [`Location`](#type-location) objects returned by this\nendpoint correspond to that `location_id` parameter.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListLocationsResponse"
      }
    },
    {
      "id": "CreateCheckout",
      "title": "CreateCheckout",
      "description": "Creates a [Checkout](#type-checkout) response that links a\n`checkoutId` and `checkout_page_url` that customers can be directed to in\norder to provide their payment information using a payment processing\nworkflow hosted on connect.squareup.com.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the business location to associate the checkout with."
          },
          "body": {
            "$ref": "#/definitions/CreateCheckoutRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateCheckoutResponse"
      }
    },
    {
      "id": "ListRefunds",
      "title": "ListRefunds",
      "description": "Lists refunds for one of a business's locations.\n\nRefunds with a `status` of `PENDING` are not currently included in this\nendpoint's response.\n\nMax results per [page](#paginatingresults): 50",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the location to list refunds for."
          },
          "begin_time": {
            "type": "string",
            "description": "The beginning of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time minus one year."
          },
          "end_time": {
            "type": "string",
            "description": "The end of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time."
          },
          "sort_order": {
            "type": "string",
            "description": "The order in which results are listed in the response (`ASC` for\noldest first, `DESC` for newest first).\n\nDefault value: `DESC`",
            "enum": [
              "DESC",
              "ASC"
            ]
          },
          "cursor": {
            "type": "string",
            "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListRefundsResponse"
      }
    },
    {
      "id": "ListTransactions",
      "title": "ListTransactions",
      "description": "Lists transactions for a particular location.\n\nMax results per [page](#paginatingresults): 50",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the location to list transactions for."
          },
          "begin_time": {
            "type": "string",
            "description": "The beginning of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time minus one year."
          },
          "end_time": {
            "type": "string",
            "description": "The end of the requested reporting period, in RFC 3339 format.\n\nSee [Date ranges](#dateranges) for details on date inclusivity/exclusivity.\n\nDefault value: The current time."
          },
          "sort_order": {
            "type": "string",
            "description": "The order in which results are listed in the response (`ASC` for\noldest first, `DESC` for newest first).\n\nDefault value: `DESC`",
            "enum": [
              "DESC",
              "ASC"
            ]
          },
          "cursor": {
            "type": "string",
            "description": "A pagination cursor returned by a previous call to this endpoint.\nProvide this to retrieve the next set of results for your original query.\n\nSee [Paginating results](#paginatingresults) for more information."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListTransactionsResponse"
      }
    },
    {
      "id": "Charge",
      "title": "Charge",
      "description": "Charges a card represented by a card nonce or a customer's card on file.\n\nYour request to this endpoint must include _either_:\n\n- A value for the `card_nonce` parameter (to charge a card nonce generated\nwith the `SqPaymentForm`)\n- Values for the `customer_card_id` and `customer_id` parameters (to charge\na customer's card on file)\n\nIn order for an e-commerce payment to potentially qualify for\n[Square chargeback protection](https://squareup.com/help/article/5394), you\n_must_ provide values for the following parameters in your request:\n\n- `buyer_email_address`\n- At least one of `billing_address` or `shipping_address`\n\nWhen this response is returned, the amount of Square's processing fee might not yet be\ncalculated. To obtain the processing fee, wait about ten seconds and call\n[RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money`\nfield of each [Tender included](#type-tender) in the transaction.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the location to associate the created transaction with."
          },
          "body": {
            "$ref": "#/definitions/ChargeRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ChargeResponse"
      }
    },
    {
      "id": "RetrieveTransaction",
      "title": "RetrieveTransaction",
      "description": "Retrieves details for a single transaction.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the transaction's associated location."
          },
          "transaction_id": {
            "type": "string",
            "description": "The ID of the transaction to retrieve."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RetrieveTransactionResponse"
      }
    },
    {
      "id": "CaptureTransaction",
      "title": "CaptureTransaction",
      "description": "Captures a transaction that was created with the [Charge](#endpoint-charge)\nendpoint with a `delay_capture` value of `true`.\n\nSee [Delayed capture transactions](/articles/delayed-capture-transactions/)\nfor more information.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": ""
          },
          "transaction_id": {
            "type": "string",
            "description": ""
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CaptureTransactionResponse"
      }
    },
    {
      "id": "CreateRefund",
      "title": "CreateRefund",
      "description": "Initiates a refund for a previously charged tender.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": "The ID of the original transaction's associated location."
          },
          "transaction_id": {
            "type": "string",
            "description": "The ID of the original transaction that includes the tender to refund."
          },
          "body": {
            "$ref": "#/definitions/CreateRefundRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateRefundResponse"
      }
    },
    {
      "id": "VoidTransaction",
      "title": "VoidTransaction",
      "description": "Cancels a transaction that was created with the [Charge](#endpoint-charge)\nendpoint with a `delay_capture` value of `true`.\n\nSee [Delayed capture transactions](/articles/delayed-capture-transactions/)\nfor more information.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string",
            "description": "The value to provide in the Authorization header of\nyour request. This value should follow the format `Bearer YOUR_ACCESS_TOKEN_HERE`."
          },
          "location_id": {
            "type": "string",
            "description": ""
          },
          "transaction_id": {
            "type": "string",
            "description": ""
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/VoidTransactionResponse"
      }
    }
  ]
}