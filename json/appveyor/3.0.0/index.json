{
  "id": "appveyor",
  "title": "AppVeyor",
  "description": "AppVeyor is a hosted continuous integration service which runs on Microsoft\nWindows.  The AppVeyor REST API provides a RESTful way to interact with the\nAppVeyor service.  This includes managing projects, builds, deployments,\nand the teams that build them.\n\nAdditional help and discussion of the AppVeyor REST API is available at\nhttp://help.appveyor.com/discussions\n\nThis Swagger definition is an **unofficial** description of the AppVeyor\nREST API maintained at https://github.com/kevinoid/appveyor-swagger\nPlease report any issues or suggestions for this Swagger definition at\nhttps://github.com/kevinoid/appveyor-swagger/issues/new\n\n#### API Conventions\n\nFields which are missing from update operations (`PUT` requests) are\ntypically reset to their default values.  So although most fields are not\ntechnically required, they should usually be specified in practice.\n",
  "security": {
    "appveyor": {
      "integration": "appveyor",
      "fields": {
        "apiToken": "API token can be acquired from https://ci.appveyor.com/api-token\nThis value must be passed to the server in the `Authorization` header as `\"Bearer <token>\"`.  Since [bearer token authentication support is not explicitly supported in OpenAPI 2.0](https://github.com/OAI/OpenAPI-Specification/issues/583), client code will vary.  Clients created with [swagger-codegen](https://github.com/swagger-api/swagger-codegen) should set `apiKeyPrefix` to `\"Bearer\"` and set `apiKey` to the token.  Other clients may need to set `apiKey` to the string `\"Bearer <token>\"`.\nNote that this should be [fixed in OpenAPI 3.0](https://github.com/OAI/OpenAPI-Specification/pull/807)), whenever that becomes available and supported."
      }
    }
  },
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/appveyor.png"
  },
  "actionCount": 45,
  "definitions": {
    "AccessRightName": {
      "enum": [
        "Delete",
        "Deploy",
        "RunBuild",
        "Update",
        "View"
      ],
      "type": "string",
      "title": "AccessRightName"
    },
    "AceAccessRight": {
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "name": {
          "$ref": "#/definitions/AccessRightName"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "title": "AceAccessRight"
    },
    "AceAccessRightDefinition": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/AccessRightName"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "title": "AceAccessRightDefinition"
    },
    "Artifact": {
      "properties": {
        "name": {
          "minLength": 0,
          "title": "Deployment name",
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ArtifactType"
        }
      },
      "required": [
        "path",
        "name"
      ],
      "type": "object",
      "title": "Artifact"
    },
    "ArtifactType": {
      "enum": [
        "WebDeployPackage"
      ],
      "type": "string",
      "title": "ArtifactType"
    },
    "Build": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildLookupModel"
        },
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "authorName": {
              "type": "string"
            },
            "authorUsername": {
              "type": "string"
            },
            "buildNumber": {
              "minimum": 0,
              "type": "integer"
            },
            "commitId": {
              "type": "string"
            },
            "committed": {
              "format": "date-time",
              "type": "string"
            },
            "committerName": {
              "type": "string"
            },
            "committerUsername": {
              "type": "string"
            },
            "finished": {
              "format": "date-time",
              "type": "string"
            },
            "isTag": {
              "type": "boolean"
            },
            "jobs": {
              "description": "Always empty in getProjectHistory and startDeployment responses.",
              "items": {
                "$ref": "#/definitions/BuildJob"
              },
              "type": "array"
            },
            "messageExtended": {
              "type": "string"
            },
            "messages": {
              "items": {
                "$ref": "#/definitions/BuildMessage"
              },
              "type": "array"
            },
            "pullRequestId": {
              "minimum": 1,
              "type": "integer"
            },
            "pullRequestName": {
              "type": "string"
            },
            "started": {
              "format": "date-time",
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/Status"
            }
          },
          "type": "object"
        }
      ],
      "title": "Build"
    },
    "BuildCloudName": {
      "enum": [
        "gce",
        "pro-vs2013",
        "pro-win2016",
        "pro-vs2017",
        "ubuntu"
      ],
      "type": "string",
      "title": "BuildCloudName"
    },
    "BuildJob": {
      "allOf": [
        {
          "$ref": "#/definitions/Job"
        },
        {
          "properties": {
            "allowFailure": {
              "type": "boolean"
            },
            "artifactsCount": {
              "minimum": 0,
              "type": "integer"
            },
            "compilationErrorsCount": {
              "minimum": 0,
              "type": "integer"
            },
            "compilationMessagesCount": {
              "minimum": 0,
              "type": "integer"
            },
            "compilationWarningsCount": {
              "minimum": 0,
              "type": "integer"
            },
            "failedTestsCount": {
              "minimum": 0,
              "type": "integer"
            },
            "messagesCount": {
              "minimum": 0,
              "type": "integer"
            },
            "osType": {
              "$ref": "#/definitions/OSType"
            },
            "passedTestsCount": {
              "minimum": 0,
              "type": "integer"
            },
            "testsCount": {
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "title": "BuildJob"
    },
    "BuildLookupModel": {
      "properties": {
        "branch": {
          "type": "string"
        },
        "buildId": {
          "minimum": 0,
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "BuildLookupModel"
    },
    "BuildMessage": {
      "properties": {
        "category": {
          "$ref": "#/definitions/BuildMessageCategory"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "BuildMessage"
    },
    "BuildMessageCategory": {
      "enum": [
        "information",
        "warning"
      ],
      "type": "string",
      "title": "BuildMessageCategory"
    },
    "BuildMode": {
      "enum": [
        "msbuild",
        "none",
        "script"
      ],
      "type": "string",
      "title": "BuildMode"
    },
    "BuildNotificationFrequency": {
      "enum": [
        "all",
        "myCommits",
        "none"
      ],
      "type": "string",
      "title": "BuildNotificationFrequency"
    },
    "BuildStartRequest": {
      "example": {
        "accountName": "your-account-name",
        "branch": "master",
        "environmentVariables": {
          "another_var": "another value",
          "my_var": "value"
        },
        "projectSlug": "project-slug-from-url"
      },
      "properties": {
        "accountName": {
          "minLength": 1,
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commitId": {
          "type": "string"
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "projectSlug": {
          "minLength": 1,
          "type": "string"
        },
        "pullRequestId": {
          "description": "Can not be used with `branch` or `commitId`",
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "accountName",
        "projectSlug"
      ],
      "type": "object",
      "title": "BuildStartRequest"
    },
    "BuildWorkerImage": {
      "properties": {
        "buildCloudName": {
          "$ref": "#/definitions/BuildCloudName"
        },
        "buildWorkerImageId": {
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/BuildWorkerImageName"
        },
        "osType": {
          "$ref": "#/definitions/OSType"
        }
      },
      "required": [
        "buildWorkerImageId",
        "name"
      ],
      "type": "object",
      "title": "BuildWorkerImage"
    },
    "BuildWorkerImageName": {
      "enum": [
        "Previous Visual Studio 2013",
        "Previous Visual Studio 2015",
        "Previous Visual Studio 2017",
        "Ubuntu",
        "Visual Studio 2013",
        "Visual Studio 2015",
        "Visual Studio 2017",
        "Visual Studio 2017 Preview",
        "WMF 5"
      ],
      "type": "string",
      "title": "BuildWorkerImageName"
    },
    "CollaboratorAddition": {
      "description": "Technically `roleId` has default value 0 and is not required, but\nsince role 0 never exists it would always cause a 404 response.\n",
      "example": {
        "email": "john@smith.com",
        "roleId": 3040
      },
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "roleId": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "email",
        "roleId"
      ],
      "type": "object",
      "title": "CollaboratorAddition"
    },
    "CollaboratorUpdate": {
      "description": "Technically `userId` and `roleId` have default value 0 and are not\nrequired, but since user 0 and role 0 never exist it would always cause\na 404 response.\n",
      "example": {
        "roleId": 3040,
        "userId": 2018
      },
      "properties": {
        "roleId": {
          "minimum": 0,
          "type": "integer"
        },
        "userId": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "userId",
        "roleId"
      ],
      "type": "object",
      "title": "CollaboratorUpdate"
    },
    "DeployMode": {
      "enum": [
        "providers",
        "none",
        "script"
      ],
      "type": "string",
      "title": "DeployMode"
    },
    "Deployment": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentLookupModel"
        },
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "build": {
              "$ref": "#/definitions/Build"
            },
            "environment": {
              "$ref": "#/definitions/DeploymentEnvironment"
            },
            "jobs": {
              "items": {
                "$ref": "#/definitions/DeploymentJob"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "title": "Deployment"
    },
    "DeploymentCancellation": {
      "example": {
        "deploymentId": 123
      },
      "properties": {
        "deploymentId": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "deploymentId"
      ],
      "type": "object",
      "title": "DeploymentCancellation"
    },
    "DeploymentEnvironment": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEnvironmentLookupModel"
        },
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "accountId": {
              "type": "integer"
            },
            "projectsMode": {
              "description": "0 is \"Any project can be deployed to the environment\"\n1 is \"Only selected projects can be deployed to the environment\"\n2 is \"All except selected projects can be deployed to the environment\"",
              "enum": [
                0,
                1,
                2
              ],
              "type": "integer"
            },
            "securityDescriptor": {
              "$ref": "#/definitions/SecurityDescriptor"
            }
          },
          "type": "object"
        }
      ],
      "title": "DeploymentEnvironment"
    },
    "DeploymentEnvironmentAddition": {
      "example": {
        "name": "production",
        "provider": "FTP",
        "settings": {
          "environmentVariables": [
            {
              "name": "my-var",
              "value": {
                "isEncrypted": false,
                "value": "123"
              }
            }
          ],
          "providerSettings": [
            {
              "name": "server",
              "value": {
                "isEncrypted": false,
                "value": "ftp.myserver.com"
              }
            },
            {
              "name": "username",
              "value": {
                "isEncrypted": false,
                "value": "ftp-user"
              }
            },
            {
              "name": "password",
              "value": {
                "isEncrypted": true,
                "value": "password"
              }
            }
          ]
        }
      },
      "properties": {
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/DeploymentProviderType"
        },
        "settings": {
          "$ref": "#/definitions/DeploymentEnvironmentSettings"
        }
      },
      "required": [
        "name",
        "provider",
        "settings"
      ],
      "type": "object",
      "title": "DeploymentEnvironmentAddition"
    },
    "DeploymentEnvironmentDeploymentsResults": {
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/EnvironmentDeploymentModel"
          },
          "type": "array"
        },
        "environment": {
          "$ref": "#/definitions/DeploymentEnvironment"
        }
      },
      "required": [
        "environment",
        "deployments"
      ],
      "type": "object",
      "title": "DeploymentEnvironmentDeploymentsResults"
    },
    "DeploymentEnvironmentLookupModel": {
      "properties": {
        "deploymentEnvironmentId": {
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/DeploymentProviderType"
        }
      },
      "type": "object",
      "title": "DeploymentEnvironmentLookupModel"
    },
    "DeploymentEnvironmentProject": {
      "properties": {
        "isSelected": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "projectId",
        "name",
        "isSelected"
      ],
      "type": "object",
      "title": "DeploymentEnvironmentProject"
    },
    "DeploymentEnvironmentSettings": {
      "properties": {
        "environmentVariables": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        },
        "notifications": {
          "items": {
            "$ref": "#/definitions/NotificationProviderSettings"
          },
          "type": "array"
        },
        "providerSettings": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "DeploymentEnvironmentSettings"
    },
    "DeploymentEnvironmentSettingsResults": {
      "properties": {
        "environment": {
          "$ref": "#/definitions/DeploymentEnvironmentWithSettings"
        }
      },
      "type": "object",
      "title": "DeploymentEnvironmentSettingsResults"
    },
    "DeploymentEnvironmentWithSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEnvironment"
        },
        {
          "properties": {
            "environmentAccessKey": {
              "type": "string"
            },
            "projects": {
              "description": "Projects available for selection in UI.\nOnly present in response from getEnvironmentSettings.\n",
              "items": {
                "$ref": "#/definitions/DeploymentEnvironmentProject"
              },
              "type": "array"
            },
            "selectedProjects": {
              "description": "Project IDs of selected projects",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "type": "array"
            },
            "settings": {
              "$ref": "#/definitions/DeploymentEnvironmentSettings"
            }
          },
          "type": "object"
        }
      ],
      "example": {
        "deploymentEnvironmentId": 3018,
        "environmentAccessKey": "gi3ttevuk7123",
        "name": "production",
        "settings": {
          "environmentVariables": [
            {
              "name": "my-var",
              "value": {
                "isEncrypted": false,
                "value": "123"
              }
            }
          ],
          "provider": "FTP",
          "providerSettings": [
            {
              "name": "server",
              "value": {
                "isEncrypted": false,
                "value": "ftp.myserver.com"
              }
            },
            {
              "name": "username",
              "value": {
                "isEncrypted": false,
                "value": "ftp-user"
              }
            },
            {
              "name": "password",
              "value": {
                "isEncrypted": true,
                "value": "password"
              }
            }
          ]
        }
      },
      "title": "DeploymentEnvironmentWithSettings"
    },
    "DeploymentJob": {
      "allOf": [
        {
          "$ref": "#/definitions/Job"
        },
        {
          "properties": {
            "messagesCount": {
              "minimum": 0,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "title": "DeploymentJob"
    },
    "DeploymentLookupModel": {
      "properties": {
        "build": {
          "$ref": "#/definitions/BuildLookupModel"
        },
        "deploymentId": {
          "minimum": 0,
          "type": "integer"
        },
        "finished": {
          "format": "date-time",
          "type": "string"
        },
        "started": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "type": "object",
      "title": "DeploymentLookupModel"
    },
    "DeploymentNotificationFrequency": {
      "enum": [
        "all",
        "none"
      ],
      "type": "string",
      "title": "DeploymentNotificationFrequency"
    },
    "DeploymentProvider": {
      "properties": {
        "onBranch": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "onEnvironmentVariables": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        },
        "provider": {
          "$ref": "#/definitions/DeploymentProviderType"
        },
        "providerSettings": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        }
      },
      "required": [
        "provider"
      ],
      "type": "object",
      "title": "DeploymentProvider"
    },
    "DeploymentProviderType": {
      "enum": [
        "Agent",
        "AzureBlob",
        "AzureCS",
        "AzureWebJob",
        "BinTray",
        "FTP",
        "GitHub",
        "NuGet",
        "S3",
        "SqlDatabase",
        "WebDeploy",
        "Webhook"
      ],
      "type": "string",
      "title": "DeploymentProviderType"
    },
    "DeploymentStartRequest": {
      "example": {
        "accountName": "your-account-name",
        "buildJobId": "sfke9239ydzf",
        "buildVersion": "1.2.0",
        "environmentName": "environment-to-deploy",
        "environmentVariables": {
          "another_var": "another value",
          "server": "myserver.com"
        },
        "projectSlug": "project-slug-from-url"
      },
      "properties": {
        "accountName": {
          "minLength": 1,
          "type": "string"
        },
        "buildJobId": {
          "description": "Optional job id with artifacts if build contains multiple jobs.",
          "type": "string"
        },
        "buildVersion": {
          "description": "Build to deploy",
          "minLength": 1,
          "type": "string"
        },
        "environmentName": {
          "minLength": 1,
          "type": "string"
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "projectSlug": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "environmentName",
        "accountName",
        "projectSlug",
        "buildVersion"
      ],
      "type": "object",
      "title": "DeploymentStartRequest"
    },
    "EncryptRequest": {
      "example": {
        "plainValue": "encryptme"
      },
      "properties": {
        "plainValue": {
          "default": "",
          "type": "string"
        }
      },
      "type": "object",
      "title": "EncryptRequest"
    },
    "EnvironmentDeploymentModel": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentLookupModel"
        },
        {
          "properties": {
            "project": {
              "$ref": "#/definitions/ProjectLookupModel"
            }
          },
          "type": "object"
        }
      ],
      "title": "EnvironmentDeploymentModel"
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string"
        },
        "modelState": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "When present, this property is a map of property names in the format\n`request.<capitalized name>` to an `Array` of validation error\nmessage strings for the property.\n",
          "type": "object"
        }
      },
      "required": [
        "message"
      ],
      "type": "object",
      "title": "Error"
    },
    "GroupName": {
      "enum": [
        "Account",
        "BuildEnvironment",
        "Environments",
        "Projects",
        "Roles",
        "User",
        "Users"
      ],
      "type": "string",
      "title": "GroupName"
    },
    "GroupPermissions": {
      "properties": {
        "name": {
          "$ref": "#/definitions/GroupName"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/PermissionState"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "permissions"
      ],
      "type": "object",
      "title": "GroupPermissions"
    },
    "HostEntry": {
      "properties": {
        "host": {
          "minLength": 1,
          "type": "string"
        },
        "ip": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "host",
        "ip"
      ],
      "type": "object",
      "title": "HostEntry"
    },
    "HttpMethodRestricted": {
      "enum": [
        "GET",
        "POST"
      ],
      "type": "string",
      "title": "HttpMethodRestricted"
    },
    "Job": {
      "allOf": [
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "finished": {
              "format": "date-time",
              "type": "string"
            },
            "jobId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "started": {
              "format": "date-time",
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/Status"
            }
          },
          "type": "object"
        }
      ],
      "title": "Job"
    },
    "MSBuildVerbosity": {
      "enum": [
        "quiet",
        "minimal",
        "normal",
        "detailed"
      ],
      "type": "string",
      "title": "MSBuildVerbosity"
    },
    "NotificationProviderSettings": {
      "properties": {
        "provider": {
          "$ref": "#/definitions/NotificationProviderType"
        },
        "settings": {
          "$ref": "#/definitions/NotificationSettings"
        }
      },
      "required": [
        "provider",
        "settings"
      ],
      "type": "object",
      "title": "NotificationProviderSettings"
    },
    "NotificationProviderType": {
      "enum": [
        "Campfire",
        "Email",
        "GitHubPullRequest",
        "HipChat",
        "Slack",
        "Webhook",
        "VSOTeamRoom"
      ],
      "type": "string",
      "title": "NotificationProviderType"
    },
    "NotificationSettings": {
      "description": "This type is the union of the settings types for each of the various\nnotification types supported by the API.  The properties correspond to\nthe following notification types:\n\n#### All Types\n- onBuildSuccess\n- onBuildFailure\n- onBuildStatusChanged\n\n#### Campfire\n- account\n- authToken\n- room\n- template\n\n#### Email\n- subjectTemplate\n- bodyTemplate\n- recipients\n- recipientsValue\n\n#### GitHubPullRequest\n- authToken\n- template\n\n#### HipChat\n- authToken\n- from\n- room\n- template\n- serverUrl\n\n#### Slack\n- incomingWebhookUrl\n- authToken\n- channel\n- template\n\n#### Webhook\n- method\n- url\n- headers\n- headersValue\n- addCustomRequestBody\n- customRequestBodyContentType\n- customRequestBody\n\n#### VSOTeamRoom\n- vsoAccount\n- username\n- password\n- room\n- template\n",
      "properties": {
        "$type": {
          "$ref": "#/definitions/NotificationSettingsType"
        },
        "account": {
          "type": "string"
        },
        "addCustomRequestBody": {
          "type": "boolean"
        },
        "authToken": {
          "$ref": "#/definitions/StoredValue"
        },
        "bodyTemplate": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "customRequestBody": {
          "type": "string"
        },
        "customRequestBodyContentType": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "headers": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        },
        "headersValue": {
          "type": "string"
        },
        "incomingWebhookUrl": {
          "format": "uri",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/HttpMethodRestricted"
        },
        "onBuildFailure": {
          "type": "boolean"
        },
        "onBuildStatusChanged": {
          "type": "boolean"
        },
        "onBuildSuccess": {
          "type": "boolean"
        },
        "password": {
          "$ref": "#/definitions/StoredValue"
        },
        "recipients": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "recipientsValue": {
          "type": "string"
        },
        "room": {
          "type": "string"
        },
        "serverUrl": {
          "format": "uri",
          "type": "string"
        },
        "subjectTemplate": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "url": {
          "format": "uri",
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vsoAccount": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "NotificationSettings"
    },
    "NotificationSettingsType": {
      "enum": [
        "Appveyor.Models.CampfireNotificationSettings, Appveyor.Models",
        "Appveyor.Models.EmailNotificationSettings, Appveyor.Models",
        "Appveyor.Models.GitHubPullRequestNotificationSettings, Appveyor.Models",
        "Appveyor.Models.HipChatNotificationSettings, Appveyor.Models",
        "Appveyor.Models.SlackNotificationSettings, Appveyor.Models",
        "Appveyor.Models.WebhookNotificationSettings, Appveyor.Models",
        "Appveyor.Models.VSOTeamRoomNotificationSettings, Appveyor.Models"
      ],
      "type": "string",
      "title": "NotificationSettingsType"
    },
    "NuGetFeed": {
      "allOf": [
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "accountId": {
              "minimum": 0,
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "projectId": {
              "minimum": 0,
              "type": "integer"
            },
            "publishingEnabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "title": "NuGetFeed"
    },
    "OSServiceName": {
      "enum": [
        "iis",
        "mongodb",
        "msmq",
        "mssql2008r2sp2",
        "mssql2008r2sp2rs",
        "mssql2012sp1",
        "mssql2012sp1rs",
        "mssql2014",
        "mssql2014rs",
        "mssql2016",
        "mysql",
        "postgresql"
      ],
      "type": "string",
      "title": "OSServiceName"
    },
    "OSType": {
      "enum": [
        "Ubuntu",
        "Windows"
      ],
      "type": "string",
      "title": "OSType"
    },
    "PermissionName": {
      "description": "Available permission names.  The names correspond to the following groups:\n#### AccountPermission\n- ManageApplicationAuthorizations\n- UpdateAccountDetails\n- UpdateBillingDetails\n#### BuildEnvironmentPermission\n- ConfigureBuildEnvironment\n#### EnvironmentsPermission\n- DeployToEnvironment\n- ManageEnvironments\n- UpdateEnvironmentSettings\n#### ProjectsPermission\n- ManageProjects\n- RunProjectBuild\n- UpdateProjectSettings\n#### RolesPermission\n- AddRole\n- DeleteRole\n- UpdateRoleDetails\n#### UserPermission\n- ConfigureApiKeys\n#### UsersPermission\n- AddUser\n- DeleteUser\n- UpdateUserDetails\n",
      "enum": [
        "ManageApplicationAuthorizations",
        "UpdateAccountDetails",
        "UpdateBillingDetails",
        "ConfigureBuildEnvironment",
        "DeployToEnvironment",
        "ManageEnvironments",
        "UpdateEnvironmentSettings",
        "ManageProjects",
        "RunProjectBuild",
        "UpdateProjectSettings",
        "AddRole",
        "DeleteRole",
        "UpdateRoleDetails",
        "ConfigureApiKeys",
        "AddUser",
        "DeleteUser",
        "UpdateUserDetails"
      ],
      "type": "string",
      "title": "PermissionName"
    },
    "PermissionState": {
      "properties": {
        "allowed": {
          "description": "State of the named permission.  `true` to allow, `false` to deny,\nmissing to inherit.\n",
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/PermissionName"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "title": "PermissionState"
    },
    "PlatformName": {
      "enum": [
        "ARM",
        "Any CPU",
        "x64",
        "x86"
      ],
      "type": "string",
      "title": "PlatformName"
    },
    "Project": {
      "allOf": [
        {
          "$ref": "#/definitions/ProjectLookupModel"
        },
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "accountId": {
              "minimum": 0,
              "readOnly": true,
              "type": "integer"
            },
            "alwaysBuildClosedPullRequests": {
              "type": "boolean"
            },
            "builds": {
              "description": "Only non-empty for response from getProjects.",
              "items": {
                "$ref": "#/definitions/Build"
              },
              "readOnly": true,
              "type": "array"
            },
            "enableDeploymentInPullRequests": {
              "type": "boolean"
            },
            "enableSecureVariablesInPullRequests": {
              "type": "boolean"
            },
            "enableSecureVariablesInPullRequestsFromSameRepo": {
              "type": "boolean"
            },
            "isPrivate": {
              "type": "boolean"
            },
            "nuGetFeed": {
              "$ref": "#/definitions/NuGetFeed",
              "description": "Not present in response from addProject."
            },
            "repositoryBranch": {
              "description": "Not present in response from addProject.",
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            },
            "repositoryScm": {
              "$ref": "#/definitions/RepositoryScm"
            },
            "repositoryType": {
              "$ref": "#/definitions/RepositoryProvider"
            },
            "rollingBuilds": {
              "type": "boolean"
            },
            "rollingBuildsDoNotCancelRunningBuilds": {
              "type": "boolean"
            },
            "saveBuildCacheInPullRequests": {
              "type": "boolean"
            },
            "securityDescriptor": {
              "$ref": "#/definitions/SecurityDescriptor",
              "description": "Not present in response from addProject. Not always present in response from getProjects (only after updateProject or startBuild?)."
            },
            "skipBranchesWithoutAppveyorYml": {
              "type": "boolean"
            },
            "tags": {
              "type": "string"
            }
          },
          "required": [
            "repositoryName"
          ],
          "type": "object"
        }
      ],
      "title": "Project"
    },
    "ProjectAddition": {
      "description": "`repositoryAuthentication` is only used for git, mercurial, subversion `repositoryProvider`.",
      "example": {
        "repositoryName": "FeodorFitsner/demo-app",
        "repositoryProvider": "gitHub"
      },
      "properties": {
        "repositoryAuthentication": {
          "$ref": "#/definitions/RepositoryAuthenticationType"
        },
        "repositoryName": {
          "description": "URL when repositoryProvider is git, mercurial, subversion username/project when repositoryProvider is gitHub",
          "minLength": 1,
          "type": "string"
        },
        "repositoryPassword": {
          "description": "Required if repositoryAuthentication is credentials",
          "format": "password",
          "type": "string"
        },
        "repositoryProvider": {
          "$ref": "#/definitions/RepositoryProvider"
        },
        "repositoryUsername": {
          "description": "Required if repositoryAuthentication is credentials",
          "type": "string"
        }
      },
      "required": [
        "repositoryProvider",
        "repositoryName"
      ],
      "type": "object",
      "title": "ProjectAddition"
    },
    "ProjectBranchesMode": {
      "enum": [
        "exclude",
        "include"
      ],
      "type": "string",
      "title": "ProjectBranchesMode"
    },
    "ProjectBuildNumberUpdate": {
      "example": {
        "nextBuildNumber": 35
      },
      "properties": {
        "nextBuildNumber": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "nextBuildNumber"
      ],
      "type": "object",
      "title": "ProjectBuildNumberUpdate"
    },
    "ProjectBuildResults": {
      "properties": {
        "build": {
          "$ref": "#/definitions/Build"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "type": "object",
      "title": "ProjectBuildResults"
    },
    "ProjectConfiguration": {
      "properties": {
        "afterBuildScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "afterDeployScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "afterTestScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "artifacts": {
          "items": {
            "$ref": "#/definitions/Artifact"
          },
          "type": "array"
        },
        "assemblyFileVersionFormat": {
          "type": "string"
        },
        "assemblyInfoFile": {
          "type": "string"
        },
        "assemblyInformationalVersionFormat": {
          "type": "string"
        },
        "assemblyVersionFormat": {
          "type": "string"
        },
        "beforeBuildScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "beforeDeployScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "beforePackageScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "beforeTestScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "branchesMode": {
          "$ref": "#/definitions/ProjectBranchesMode"
        },
        "buildCloud": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "buildMode": {
          "$ref": "#/definitions/BuildMode"
        },
        "buildScripts": {
          "description": "Only set/used when `buildMode` is `script`.",
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "cacheEntries": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "cloneDepth": {
          "minimum": 1,
          "type": "integer"
        },
        "cloneFolder": {
          "type": "string"
        },
        "cloneScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "configuration": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "configureNuGetAccountSource": {
          "type": "boolean"
        },
        "configureNuGetProjectSource": {
          "type": "boolean"
        },
        "deployMode": {
          "$ref": "#/definitions/DeployMode"
        },
        "deployScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "deployments": {
          "items": {
            "$ref": "#/definitions/DeploymentProvider"
          },
          "type": "array"
        },
        "disableNuGetPublishOnPullRequests": {
          "type": "boolean"
        },
        "doNotIncrementBuildNumberOnPullRequests": {
          "type": "boolean"
        },
        "dotnetCsprojAssemblyVersionFormat": {
          "type": "string"
        },
        "dotnetCsprojFile": {
          "type": "string"
        },
        "dotnetCsprojFileVersionFormat": {
          "type": "string"
        },
        "dotnetCsprojInformationalVersionFormat": {
          "type": "string"
        },
        "dotnetCsprojPackageVersionFormat": {
          "type": "string"
        },
        "dotnetCsprojVersionFormat": {
          "type": "string"
        },
        "environmentVariables": {
          "items": {
            "$ref": "#/definitions/StoredNameValue"
          },
          "type": "array"
        },
        "environmentVariablesMatrix": {
          "items": {
            "$ref": "#/definitions/StoredNameValueMatrix"
          },
          "type": "array"
        },
        "excludeBranches": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "forceHttpsClone": {
          "type": "boolean"
        },
        "hostsEntries": {
          "items": {
            "$ref": "#/definitions/HostEntry"
          },
          "type": "array"
        },
        "hotFixScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "includeBranches": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "includeNuGetReferences": {
          "type": "boolean"
        },
        "initScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "installScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "matrixAllowFailures": {
          "description": "Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs",
          "items": {
            "$ref": "#/definitions/StoredNameValueMatrix"
          },
          "type": "array"
        },
        "matrixExclude": {
          "items": {
            "$ref": "#/definitions/StoredNameValueMatrix"
          },
          "type": "array"
        },
        "matrixFastFinish": {
          "type": "boolean"
        },
        "maxJobs": {
          "minimum": 1,
          "type": "integer"
        },
        "msBuildInParallel": {
          "type": "boolean"
        },
        "msBuildProjectFileName": {
          "type": "string"
        },
        "msBuildVerbosity": {
          "$ref": "#/definitions/MSBuildVerbosity"
        },
        "notifications": {
          "items": {
            "$ref": "#/definitions/NotificationProviderSettings"
          },
          "type": "array"
        },
        "onBuildErrorScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "onBuildFinishScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "onBuildSuccessScripts": {
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "onlyCommitsFiles": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "operatingSystem": {
          "items": {
            "properties": {
              "value": {
                "$ref": "#/definitions/BuildWorkerImageName"
              }
            },
            "required": [
              "value"
            ],
            "type": "object"
          },
          "title": "Build worker image",
          "type": "array"
        },
        "packageAzureCloudServiceProjects": {
          "type": "boolean"
        },
        "packageNuGetProjects": {
          "type": "boolean"
        },
        "packageNuGetSymbols": {
          "type": "boolean"
        },
        "packageWebApplicationProjects": {
          "type": "boolean"
        },
        "packageWebApplicationProjectsXCopy": {
          "type": "boolean"
        },
        "patchAssemblyInfo": {
          "type": "boolean"
        },
        "patchDotnetCsproj": {
          "type": "boolean"
        },
        "platform": {
          "items": {
            "properties": {
              "value": {
                "$ref": "#/definitions/PlatformName"
              }
            },
            "required": [
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "services": {
          "items": {
            "properties": {
              "value": {
                "$ref": "#/definitions/OSServiceName"
              }
            },
            "required": [
              "value"
            ],
            "type": "object"
          },
          "title": "OS services to start during the build process",
          "type": "array"
        },
        "shallowClone": {
          "type": "boolean"
        },
        "skipBranchWithPullRequests": {
          "type": "boolean"
        },
        "skipCommitsFiles": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "skipNonTags": {
          "type": "boolean"
        },
        "skipTags": {
          "type": "boolean"
        },
        "testAssemblies": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "testCategories": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "testCategoriesMatrix": {
          "items": {
            "properties": {
              "categories": {
                "items": {
                  "$ref": "#/definitions/StringValueObject"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "testCategoriesMode": {
          "enum": [
            "exclude",
            "include"
          ],
          "type": "string"
        },
        "testMode": {
          "$ref": "#/definitions/TestMode"
        },
        "testScripts": {
          "description": "Only set/used when `testMode` is `script`.",
          "items": {
            "$ref": "#/definitions/Script"
          },
          "type": "array"
        },
        "xamarinRegisterAndroidProduct": {
          "type": "boolean"
        },
        "xamarinRegisterIosProduct": {
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "ProjectConfiguration"
    },
    "ProjectDeployment": {
      "properties": {
        "deployment": {
          "$ref": "#/definitions/Deployment"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "required": [
        "project",
        "deployment"
      ],
      "type": "object",
      "title": "ProjectDeployment"
    },
    "ProjectDeploymentModel": {
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentLookupModel"
        },
        {
          "properties": {
            "environment": {
              "$ref": "#/definitions/DeploymentEnvironmentLookupModel"
            }
          },
          "type": "object"
        }
      ],
      "title": "ProjectDeploymentModel"
    },
    "ProjectDeploymentsResults": {
      "properties": {
        "deployments": {
          "items": {
            "$ref": "#/definitions/ProjectDeploymentModel"
          },
          "type": "array"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "type": "object",
      "title": "ProjectDeploymentsResults"
    },
    "ProjectHistory": {
      "properties": {
        "builds": {
          "items": {
            "$ref": "#/definitions/Build"
          },
          "type": "array"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "type": "object",
      "title": "ProjectHistory"
    },
    "ProjectLookupModel": {
      "properties": {
        "accountName": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "minimum": 0,
          "type": "integer"
        },
        "slug": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "projectId"
      ],
      "type": "object",
      "title": "ProjectLookupModel"
    },
    "ProjectSettingsResults": {
      "example": {
        "build": {
          "project": "MySolution.sln",
          "publish_wap": true,
          "verbosity": "minimal"
        },
        "version": "1.0.{build}"
      },
      "properties": {
        "buildClouds": {
          "items": {
            "$ref": "#/definitions/StringValueObject"
          },
          "type": "array"
        },
        "defaultImageName": {
          "type": "string"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/BuildWorkerImage"
          },
          "type": "array"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "settings": {
          "$ref": "#/definitions/ProjectWithConfiguration"
        }
      },
      "type": "object",
      "title": "ProjectSettingsResults"
    },
    "ProjectWithConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/Project"
        },
        {
          "example": {
            "accountId": 2,
            "accountName": "appvyr",
            "builds": [],
            "configuration": {
              "afterBuildScripts": [],
              "afterDeployScripts": [],
              "afterTestScripts": [],
              "artifacts": [],
              "assemblyFileVersionFormat": "{version}",
              "assemblyInfoFile": "**\\AssemblyInfo.*",
              "assemblyInformationalVersionFormat": "{version}",
              "assemblyVersionFormat": "{version}",
              "beforeBuildScripts": [],
              "beforeDeployScripts": [],
              "beforeTestScripts": [],
              "buildMode": "msbuild",
              "buildScripts": [],
              "configuration": [],
              "deployMode": "providers",
              "deployScripts": [],
              "deployments": [],
              "environmentVariables": [],
              "environmentVariablesMatrix": [],
              "excludeBranches": [],
              "hostsEntries": [],
              "includeBranches": [],
              "initScripts": [],
              "installScripts": [],
              "matrixAllowFailures": [],
              "matrixFastFinish": false,
              "msBuildVerbosity": "minimal",
              "notifications": [],
              "onBuildErrorScripts": [],
              "onBuildSuccessScripts": [],
              "operatingSystem": [],
              "packageAzureCloudServiceProjects": false,
              "packageNuGetProjects": false,
              "packageWebApplicationProjects": false,
              "packageWebApplicationProjectsXCopy": false,
              "patchAssemblyInfo": false,
              "platform": [],
              "services": [],
              "shallowClone": false,
              "testAssemblies": [],
              "testCategories": [],
              "testCategoriesMatrix": [],
              "testMode": "auto",
              "testScripts": []
            },
            "created": "2014-08-16T00:52:15.6604826+00:00",
            "ignoreAppveyorYml": false,
            "isPrivate": false,
            "name": "demo-app",
            "nextBuildNumber": 1,
            "nuGetFeed": {
              "created": "2014-08-16T00:52:16.9886427+00:00",
              "id": "demo-app-tw5iw2wk3bl1",
              "name": "Project demo-app",
              "publishingEnabled": false
            },
            "projectId": 43682,
            "repositoryBranch": "master",
            "repositoryName": "FeodorFitsner/demo-app",
            "repositoryScm": "git",
            "repositoryType": "gitHub",
            "securityDescriptor": {
              "accessRightDefinitions": [
                {
                  "description": "View",
                  "name": "View"
                },
                {
                  "description": "Run build",
                  "name": "RunBuild"
                },
                {
                  "description": "Update settings",
                  "name": "Update"
                },
                {
                  "description": "Delete project",
                  "name": "Delete"
                }
              ],
              "roleAces": [
                {
                  "accessRights": [
                    {
                      "allowed": true,
                      "name": "View"
                    },
                    {
                      "allowed": true,
                      "name": "RunBuild"
                    },
                    {
                      "allowed": true,
                      "name": "Update"
                    },
                    {
                      "allowed": true,
                      "name": "Delete"
                    }
                  ],
                  "isAdmin": true,
                  "name": "Administrator",
                  "roleId": 4
                },
                {
                  "accessRights": [
                    {
                      "name": "View"
                    },
                    {
                      "name": "RunBuild"
                    },
                    {
                      "name": "Update"
                    },
                    {
                      "name": "Delete"
                    }
                  ],
                  "isAdmin": false,
                  "name": "User",
                  "roleId": 5
                }
              ]
            },
            "skipBranchesWithoutAppveyorYml": false,
            "slug": "demo-app-335",
            "versionFormat": "1.0.{build}",
            "webhookId": "rca5vb5qqu",
            "webhookUrl": "https://ci.appveyor.com/api/github/webhook?id=rca5vb5qqu"
          },
          "properties": {
            "buildPriority": {
              "minimum": 1,
              "type": "integer"
            },
            "configuration": {
              "$ref": "#/definitions/ProjectConfiguration"
            },
            "customYmlName": {
              "type": "string"
            },
            "ignoreAppveyorYml": {
              "type": "boolean"
            },
            "nextBuildNumber": {
              "type": "integer"
            },
            "repositoryAuthentication": {
              "$ref": "#/definitions/RepositoryAuthenticationType"
            },
            "repositoryUsername": {
              "type": "string"
            },
            "scheduleCrontabExpression": {
              "description": "Build schedule as an NCrontab Expression.  See https://github.com/atifaziz/NCrontab/wiki/Crontab-Expression",
              "externalDocs": {
                "url": "https://appveyor-staging.azurewebsites.net/docs/build-configuration/#scheduled-builds"
              },
              "type": "string"
            },
            "sshPublicKey": {
              "type": "string"
            },
            "statusBadgeId": {
              "type": "string"
            },
            "versionFormat": {
              "minLength": 7,
              "pattern": "[{]build[}]",
              "type": "string"
            },
            "webhookId": {
              "type": "string"
            },
            "webhookUrl": {
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "versionFormat",
            "configuration"
          ],
          "type": "object"
        }
      ],
      "type": "object",
      "title": "ProjectWithConfiguration"
    },
    "RepositoryAuthenticationType": {
      "enum": [
        "credentials",
        "ssh"
      ],
      "type": "string",
      "title": "RepositoryAuthenticationType"
    },
    "RepositoryProvider": {
      "enum": [
        "bitBucket",
        "git",
        "gitHub",
        "gitLab",
        "kiln",
        "mercurial",
        "stash",
        "subversion",
        "vso"
      ],
      "type": "string",
      "title": "RepositoryProvider"
    },
    "RepositoryScm": {
      "enum": [
        "git",
        "mercurial",
        "subversion"
      ],
      "type": "string",
      "title": "RepositoryScm"
    },
    "Role": {
      "allOf": [
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "properties": {
            "isSystem": {
              "readOnly": true,
              "type": "boolean"
            },
            "name": {
              "minLength": 1,
              "type": "string"
            },
            "roleId": {
              "minimum": 0,
              "type": "integer"
            }
          },
          "required": [
            "roleId",
            "name"
          ],
          "type": "object"
        }
      ],
      "description": "Technically `roleId` has default value 0 and is not required, but\nsince role 0 never exists it would always cause a 404 response.\n",
      "title": "Role"
    },
    "RoleAce": {
      "properties": {
        "accessRights": {
          "items": {
            "$ref": "#/definitions/AceAccessRight"
          },
          "type": "array"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roleId": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object",
      "title": "RoleAce"
    },
    "RoleAddition": {
      "example": {
        "name": "My Role"
      },
      "properties": {
        "name": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "title": "RoleAddition"
    },
    "RoleWithGroups": {
      "allOf": [
        {
          "$ref": "#/definitions/Role"
        },
        {
          "properties": {
            "groups": {
              "items": {
                "$ref": "#/definitions/GroupPermissions"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "example": {
        "created": "2014-03-18T20:12:08.4749886+00:00",
        "groups": [
          {
            "name": "Projects",
            "permissions": [
              {
                "allowed": true,
                "description": "Create, delete projects, update project settings",
                "name": "ManageProjects"
              },
              {
                "allowed": true,
                "description": "Update project settings",
                "name": "UpdateProjectSettings"
              },
              {
                "allowed": false,
                "description": "Run project builds",
                "name": "RunProjectBuild"
              },
              {
                "allowed": false,
                "description": "Delete project builds",
                "name": "DeleteProjectBuilds"
              }
            ]
          },
          {
            "name": "Environments",
            "permissions": [
              {
                "allowed": false,
                "description": "Create, delete projects, update environment settings",
                "name": "ManageEnvironments"
              },
              {
                "allowed": false,
                "description": "Update environment settings",
                "name": "UpdateEnvironmentSettings"
              },
              {
                "allowed": false,
                "description": "Deploy to environment",
                "name": "DeployToEnvironment"
              }
            ]
          },
          {
            "name": "Account",
            "permissions": [
              {
                "allowed": false,
                "description": "Update account details",
                "name": "UpdateAccountDetails"
              }
            ]
          },
          {
            "name": "Users",
            "permissions": [
              {
                "allowed": false,
                "description": "Add new user",
                "name": "AddUser"
              },
              {
                "allowed": false,
                "description": "Update user details",
                "name": "UpdateUserDetails"
              },
              {
                "allowed": false,
                "description": "Delete user",
                "name": "DeleteUser"
              }
            ]
          },
          {
            "name": "Roles",
            "permissions": [
              {
                "allowed": false,
                "description": "Add new role",
                "name": "AddRole"
              },
              {
                "allowed": false,
                "description": "Update role details",
                "name": "UpdateRoleDetails"
              },
              {
                "allowed": false,
                "description": "Delete role",
                "name": "DeleteRole"
              }
            ]
          },
          {
            "name": "User",
            "permissions": [
              {
                "allowed": false,
                "description": "Generate API keys",
                "name": "ConfigureApiKeys"
              }
            ]
          }
        ],
        "isSystem": false,
        "name": "My Role",
        "roleId": 3040
      },
      "title": "RoleWithGroups"
    },
    "Script": {
      "properties": {
        "language": {
          "$ref": "#/definitions/ScriptLanguage"
        },
        "script": {
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object",
      "title": "Script"
    },
    "ScriptLanguage": {
      "enum": [
        "cmd",
        "ps"
      ],
      "type": "string",
      "title": "ScriptLanguage"
    },
    "SecurityDescriptor": {
      "properties": {
        "accessRightDefinitions": {
          "items": {
            "$ref": "#/definitions/AceAccessRightDefinition"
          },
          "type": "array"
        },
        "roleAces": {
          "items": {
            "$ref": "#/definitions/RoleAce"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "SecurityDescriptor"
    },
    "Status": {
      "enum": [
        "cancelled",
        "cancelling",
        "failed",
        "queued",
        "running",
        "success"
      ],
      "type": "string",
      "title": "Status"
    },
    "StoredNameValue": {
      "properties": {
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/StoredValue"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object",
      "title": "StoredNameValue"
    },
    "StoredNameValueMatrix": {
      "properties": {
        "variables": {
          "$ref": "#/definitions/StoredNameValue"
        }
      },
      "type": "object",
      "title": "StoredNameValueMatrix"
    },
    "StoredValue": {
      "properties": {
        "isEncrypted": {
          "type": "boolean"
        },
        "value": {
          "description": "Encrypted values can be created using the encryptValue operation.\n\nEmpty environment variables are represented by missing (null) value\nrather than an empty string.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "StoredValue"
    },
    "StringValueObject": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "StringValueObject"
    },
    "TestMode": {
      "enum": [
        "auto",
        "none",
        "script"
      ],
      "type": "string",
      "title": "TestMode"
    },
    "Timestamped": {
      "properties": {
        "created": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object",
      "title": "Timestamped"
    },
    "UserAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Timestamped"
        },
        {
          "$ref": "#/definitions/UserAccountSettings"
        },
        {
          "properties": {
            "accountId": {
              "minimum": 0,
              "readOnly": true,
              "type": "integer"
            },
            "accountName": {
              "readOnly": true,
              "type": "string"
            },
            "email": {
              "format": "email",
              "type": "string"
            },
            "fullName": {
              "type": "string"
            },
            "isCollaborator": {
              "readOnly": true,
              "type": "boolean"
            },
            "isOwner": {
              "readOnly": true,
              "type": "boolean"
            },
            "pageSize": {
              "minimum": 0,
              "readOnly": true,
              "type": "integer"
            },
            "password": {
              "format": "password",
              "minLength": 1,
              "type": "string"
            },
            "roleId": {
              "minimum": 0,
              "type": "integer"
            },
            "roleName": {
              "readOnly": true,
              "type": "string"
            },
            "userId": {
              "minimum": 0,
              "type": "integer"
            }
          },
          "required": [
            "fullName",
            "email"
          ],
          "type": "object"
        }
      ],
      "example": {
        "email": "john@smith.com",
        "failedBuildNotification": "all",
        "fullName": "John Smith",
        "notifyWhenBuildStatusChangedOnly": true,
        "roleId": 4,
        "successfulBuildNotification": "all",
        "userId": 3019
      },
      "title": "UserAccount"
    },
    "UserAccountRolesResults": {
      "description": "The roles property contains all roles, not only the role for which the user is a member.",
      "properties": {
        "roles": {
          "items": {
            "$ref": "#/definitions/Role"
          },
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/UserAccount"
        }
      },
      "type": "object",
      "title": "UserAccountRolesResults"
    },
    "UserAccountSettings": {
      "properties": {
        "failedBuildNotification": {
          "$ref": "#/definitions/BuildNotificationFrequency"
        },
        "failedDeploymentNotification": {
          "$ref": "#/definitions/DeploymentNotificationFrequency"
        },
        "notifyWhenBuildStatusChangedOnly": {
          "default": false,
          "description": "Note that this value is `true` on user creation, but behaves as\n`false` when not specified on update.\n",
          "type": "boolean"
        },
        "notifyWhenDeploymentStatusChangedOnly": {
          "default": false,
          "description": "Note that this value is `true` on user creation, but behaves as\n`false` when not specified on update.\n",
          "type": "boolean"
        },
        "successfulBuildNotification": {
          "$ref": "#/definitions/BuildNotificationFrequency"
        },
        "successfulDeploymentNotification": {
          "$ref": "#/definitions/DeploymentNotificationFrequency"
        }
      },
      "required": [
        "successfulBuildNotification",
        "failedBuildNotification",
        "successfulDeploymentNotification",
        "failedDeploymentNotification"
      ],
      "type": "object",
      "title": "UserAccountSettings"
    },
    "UserAddition": {
      "example": {
        "confirmPassword": "password",
        "email": "john@smith.com",
        "fullName": "John Smith",
        "generatePassword": false,
        "password": "password",
        "roleId": 4
      },
      "properties": {
        "confirmPassword": {
          "format": "password",
          "minLength": 1,
          "type": "string"
        },
        "email": {
          "format": "email",
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "generatePassword": {
          "type": "boolean"
        },
        "password": {
          "format": "password",
          "minLength": 1,
          "type": "string"
        },
        "roleId": {
          "description": "Technically `roleId` has default value 0 and is not required, but\nsince role 0 never exists it would always cause a 404 response.\n",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "fullName",
        "email",
        "roleId"
      ],
      "type": "object",
      "title": "UserAddition"
    }
  },
  "actions": [
    {
      "id": "encryptValue",
      "title": "encryptValue",
      "description": "Encrypt a value for use in StoredValue.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/EncryptRequest"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "type": "string"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getBuildLog",
      "title": "getBuildLog",
      "description": "Download build log",
      "inputSchema": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "Build ID (`jobId` property of `BuildJob`)"
          }
        },
        "additionalProperties": false,
        "required": [
          "jobId"
        ]
      },
      "outputSchema": {
        "type": "file"
      }
    },
    {
      "id": "startBuild",
      "title": "startBuild",
      "description": "Start build of branch most recent commit",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/BuildStartRequest"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "cancelBuild",
      "title": "cancelBuild",
      "description": "Cancel build",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          },
          "buildVersion": {
            "type": "string",
            "description": "Build Version (`version` property of `Build`)"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug",
          "buildVersion"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getCollaborators",
      "title": "getCollaborators",
      "description": "Get collaborators",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/UserAccount"
        },
        "type": "array"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "addCollaborator",
      "title": "addCollaborator",
      "description": "Add collaborator",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CollaboratorAddition"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateCollaborator",
      "title": "updateCollaborator",
      "description": "Update collaborator",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CollaboratorUpdate"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "deleteCollaborator",
      "title": "deleteCollaborator",
      "description": "Delete collaborator",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getCollaborator",
      "title": "getCollaborator",
      "description": "Get collaborator",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UserAccountRolesResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "startDeployment",
      "title": "startDeployment",
      "description": "Start deployment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeploymentStartRequest"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Deployment"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "cancelDeployment",
      "title": "cancelDeployment",
      "description": "Cancel deployment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeploymentCancellation"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getDeployment",
      "title": "getDeployment",
      "description": "Get deployment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "deploymentId": {
            "type": "integer",
            "description": "Deployment ID (`deploymentId` property of `Deployment`)",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "deploymentId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectDeployment"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getEnvironments",
      "title": "getEnvironments",
      "description": "Get environments",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/DeploymentEnvironmentLookupModel"
        },
        "type": "array"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "addEnvironment",
      "title": "addEnvironment",
      "description": "Add environment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeploymentEnvironmentAddition"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeploymentEnvironmentWithSettings"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateEnvironment",
      "title": "updateEnvironment",
      "description": "Update environment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeploymentEnvironmentWithSettings"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeploymentEnvironmentWithSettings"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "deleteEnvironment",
      "title": "deleteEnvironment",
      "description": "Delete environment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "deploymentEnvironmentId": {
            "type": "integer",
            "description": "Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`)\n",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "deploymentEnvironmentId"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getEnvironmentDeployments",
      "title": "getEnvironmentDeployments",
      "description": "Get environment deployments",
      "inputSchema": {
        "type": "object",
        "properties": {
          "deploymentEnvironmentId": {
            "type": "integer",
            "description": "Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`)\n",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "deploymentEnvironmentId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeploymentEnvironmentDeploymentsResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getEnvironmentSettings",
      "title": "getEnvironmentSettings",
      "description": "Get environment settings",
      "inputSchema": {
        "type": "object",
        "properties": {
          "deploymentEnvironmentId": {
            "type": "integer",
            "description": "Deployment Environment ID (`deploymentEnvironmentId` property of `DeploymentEnvironment`)\n",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "deploymentEnvironmentId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeploymentEnvironmentSettingsResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getProjects",
      "title": "getProjects",
      "description": "Get projects",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Project"
        },
        "type": "array"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "addProject",
      "title": "addProject",
      "description": "Add project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ProjectAddition"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateProject",
      "title": "updateProject",
      "description": "Update project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ProjectWithConfiguration"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getPublicProjectStatusBadge",
      "title": "getPublicProjectStatusBadge",
      "description": "Get status badge image for a project with a public repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "Repository Branch",
            "minLength": 1
          },
          "svg": {
            "type": "boolean",
            "description": "Return an SVG image instead of PNG?  Exclusive with `retina`.",
            "default": false
          },
          "retina": {
            "type": "boolean",
            "description": "Return a larger image suitable for retina displays?  Exclusive with `svg`.",
            "default": false
          },
          "passingText": {
            "type": "string",
            "description": "Text to show in badge when build is passing.",
            "minLength": 1
          },
          "failingText": {
            "type": "string",
            "description": "Text to show in badge when build is failing.",
            "minLength": 1
          },
          "pendingText": {
            "type": "string",
            "description": "Text to show in badge when build is pending.",
            "minLength": 1
          },
          "badgeRepoProvider": {
            "type": "string",
            "description": "Repository provider supported for badges",
            "enum": [
              "bitBucket",
              "gitHub"
            ]
          },
          "repoAccountName": {
            "type": "string",
            "description": "Account name with repository provider",
            "minLength": 1
          },
          "repoSlug": {
            "type": "string",
            "description": "Slug (URL component) of repository.",
            "minLength": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "badgeRepoProvider",
          "repoAccountName",
          "repoSlug"
        ]
      },
      "outputSchema": {
        "type": "file"
      }
    },
    {
      "id": "getProjectStatusBadge",
      "title": "getProjectStatusBadge",
      "description": "Get project status badge image",
      "inputSchema": {
        "type": "object",
        "properties": {
          "svg": {
            "type": "boolean",
            "description": "Return an SVG image instead of PNG?  Exclusive with `retina`.",
            "default": false
          },
          "retina": {
            "type": "boolean",
            "description": "Return a larger image suitable for retina displays?  Exclusive with `svg`.",
            "default": false
          },
          "passingText": {
            "type": "string",
            "description": "Text to show in badge when build is passing.",
            "minLength": 1
          },
          "failingText": {
            "type": "string",
            "description": "Text to show in badge when build is failing.",
            "minLength": 1
          },
          "pendingText": {
            "type": "string",
            "description": "Text to show in badge when build is pending.",
            "minLength": 1
          },
          "statusBadgeId": {
            "type": "string",
            "description": "ID of the status badge (`statusBadgeId` from `ProjectWithConfiguration`).",
            "minLength": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "statusBadgeId"
        ]
      },
      "outputSchema": {
        "type": "file"
      }
    },
    {
      "id": "getProjectBranchStatusBadge",
      "title": "getProjectBranchStatusBadge",
      "description": "Get project branch status badge image",
      "inputSchema": {
        "type": "object",
        "properties": {
          "svg": {
            "type": "boolean",
            "description": "Return an SVG image instead of PNG?  Exclusive with `retina`.",
            "default": false
          },
          "retina": {
            "type": "boolean",
            "description": "Return a larger image suitable for retina displays?  Exclusive with `svg`.",
            "default": false
          },
          "passingText": {
            "type": "string",
            "description": "Text to show in badge when build is passing.",
            "minLength": 1
          },
          "failingText": {
            "type": "string",
            "description": "Text to show in badge when build is failing.",
            "minLength": 1
          },
          "pendingText": {
            "type": "string",
            "description": "Text to show in badge when build is pending.",
            "minLength": 1
          },
          "statusBadgeId": {
            "type": "string",
            "description": "ID of the status badge (`statusBadgeId` from `ProjectWithConfiguration`).",
            "minLength": 1
          },
          "buildBranch": {
            "type": "string",
            "description": "Build Branch"
          }
        },
        "additionalProperties": false,
        "required": [
          "statusBadgeId",
          "buildBranch"
        ]
      },
      "outputSchema": {
        "type": "file"
      }
    },
    {
      "id": "deleteProject",
      "title": "deleteProject",
      "description": "Delete project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getProjectLastBuild",
      "title": "getProjectLastBuild",
      "description": "Get project last build",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectBuildResults"
      }
    },
    {
      "id": "getProjectLastBuildBranch",
      "title": "getProjectLastBuildBranch",
      "description": "Get project last branch build",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          },
          "buildBranch": {
            "type": "string",
            "description": "Build Branch"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug",
          "buildBranch"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectBuildResults"
      }
    },
    {
      "id": "getProjectBuildByVersion",
      "title": "getProjectBuildByVersion",
      "description": "Get project build by version",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          },
          "buildVersion": {
            "type": "string",
            "description": "Build Version (`version` property of `Build`)"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug",
          "buildVersion"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectBuildResults"
      }
    },
    {
      "id": "deleteProjectBuildCache",
      "title": "deleteProjectBuildCache",
      "description": "Delete project build cache",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getProjectDeployments",
      "title": "getProjectDeployments",
      "description": "Get project deployments",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectDeploymentsResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getProjectHistory",
      "title": "getProjectHistory",
      "description": "Get project history",
      "inputSchema": {
        "type": "object",
        "properties": {
          "recordsNumber": {
            "type": "integer",
            "description": "Number of results to include in the response.",
            "minimum": 0
          },
          "startBuildId": {
            "type": "integer",
            "description": "Maximum `buildId` to include in the results (exclusive).",
            "minimum": 0
          },
          "branch": {
            "type": "string",
            "description": "Repository Branch",
            "minLength": 1
          },
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "recordsNumber",
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHistory"
      }
    },
    {
      "id": "getProjectSettings",
      "title": "getProjectSettings",
      "description": "Get project settings",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectSettingsResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateProjectBuildNumber",
      "title": "updateProjectBuildNumber",
      "description": "Update project build number",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ProjectBuildNumberUpdate"
          },
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getProjectSettingsYaml",
      "title": "getProjectSettingsYaml",
      "description": "Get project settings in YAML",
      "inputSchema": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {
        "type": "string"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateProjectSettingsYaml",
      "title": "updateProjectSettingsYaml",
      "description": "Update project settings in YAML",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "format": "binary",
            "type": "string"
          },
          "accountName": {
            "type": "string",
            "description": "AppVeyor account name (`accountName` property of `UserAccount`)",
            "minLength": 1
          },
          "projectSlug": {
            "type": "string",
            "description": "Project Slug"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "accountName",
          "projectSlug"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getRoles",
      "title": "getRoles",
      "description": "Get roles",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Role"
        },
        "type": "array"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "addRole",
      "title": "addRole",
      "description": "Add role",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RoleAddition"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RoleWithGroups"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateRole",
      "title": "updateRole",
      "description": "Update role",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RoleWithGroups"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RoleWithGroups"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "deleteRole",
      "title": "deleteRole",
      "description": "Delete role",
      "inputSchema": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Role ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "roleId"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getRole",
      "title": "getRole",
      "description": "Get role",
      "inputSchema": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "Role ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "roleId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RoleWithGroups"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getUsers",
      "title": "getUsers",
      "description": "Get users",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/UserAccount"
        },
        "type": "array"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "addUser",
      "title": "addUser",
      "description": "Add user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UserAddition"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "updateUser",
      "title": "updateUser",
      "description": "Update user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UserAccount"
          }
        },
        "additionalProperties": false,
        "required": [
          "body"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "deleteUser",
      "title": "deleteUser",
      "description": "Delete user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {},
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    },
    {
      "id": "getUser",
      "title": "getUser",
      "description": "Get user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "User ID",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UserAccountRolesResults"
      },
      "security": {
        "appveyor": {
          "integration": "appveyor"
        }
      }
    }
  ],
  "tags": [
    "developer tools"
  ]
}