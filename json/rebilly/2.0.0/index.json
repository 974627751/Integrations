{
  "id": "rebilly",
  "title": "Rebilly",
  "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [C#](https://github.com/Rebilly/rebilly-dotnet-client)).\n\n# Authentication\nWhen you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  private key, JSON Web Tokens, and\npublic key.\n- private key: authenticates each request by searching for the presence\nof an HTTP header: REB-APIKEY.\n- JWT: authenticates each request by the HTTP header: Authorization.\n- public key: authenticates by the HTTP header: REB-AUTH (read more on this below).\n\nRebilly also offers JSON Web Tokens (JWT) authentication, where you can control\nthe specific granular permissions and expiration for that JWT.  We call our resource\nfor generating JWT [Sessions](#tag/Sessions).\n\nRebilly also has a client-side authentication scheme that uses an\napiUser and HMAC-SHA1 signature (only for the Tokens resource), so\nthat you may safely create tokens from the client-side without compromising\nyour secret keys.\n\nNever share your secret keys. Keep them guarded and secure.\nThe client-side authentication scheme uses one HTTP header named REB-AUTH.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# PHP SDK\nFor all PHP SDK examples provided in this spec you will need to configure `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n",
  "security": {
    "rebilly": {
      "integration": "rebilly",
      "fields": {
        "ApiKey": "When you sign up for an account, you are given your first API key.\nTo do so please follow this link: https://www.rebilly.com/site/signup/\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future).\n",
        "username": "Your username",
        "password": "Your password",
        "RebAuth": "Only for the Tokens resource.\nThe REB-AUTH value is created in this way\nGenerate a Nonce (random string), and a Timestamp (unix timestamp)\nConcatenate the values of ApiUser, Nonce, and Timestamp (in that order).\nUse that value as the input data when you calculate the <a href=\"http://tools.ietf.org/html/rfc2104\">HMAC-SHA1</a> with your secret key, called the signature.\nForming the four data points into a JSON object.\n\n```json\n{\n  \"REB-APIUSER\": \"abcdefg\",\n  \"REB-NONCE\": \"adfsjtreitou345fgkdafgj\",\n  \"REB-TIMESTAMP\": \"1382591345\",\n  \"REB-SIGNATURE\": \"a234fc95460401cfg09c9d09\"\n}\n```\n\nThen base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header\n"
      }
    }
  },
  "logo": {
    "backgroundColor": "#0033A0",
    "url": "https://api.apis.guru/v2/cache/logo/https_rebilly.github.io_RebillyAPI_rb_apiLogo.svg"
  },
  "tags": [
    "payment",
    "ecommerce"
  ],
  "definitions": {
    "A1Gateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "description": "A1Gateway credentials object",
              "properties": {
                "accountId": {
                  "description": "A1Gateway account ID",
                  "type": "string"
                },
                "password": {
                  "description": "A1Gateway password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "A1Gateway config"
    },
    "AcquirerName": {
      "description": "Acquirer name",
      "enum": [
        "Alipay",
        "AIB",
        "B+S",
        "Bank of America",
        "Bank of Moscow",
        "Bank of Rebilly",
        "Bank One",
        "Beanstream",
        "BMO Harris Bank",
        "Borgun",
        "BraintreePayments",
        "Catalunya Caixa",
        "Chase",
        "ChinaUnionPay",
        "CIM",
        "Credorax",
        "Elavon",
        "EMS",
        "Fifth Third Bank",
        "First Data Buypass",
        "First Data Nashville",
        "First Data North",
        "First Data Omaha",
        "Flexepin",
        "Forte",
        "FundSend",
        "GlobalCollect",
        "Global East",
        "Heartland",
        "HSBC",
        "iCheque",
        "Ilixium",
        "Masapay",
        "Merrick",
        "Mission Valley Bank",
        "Moneris",
        "NATWEST",
        "NMI",
        "OchaPay",
        "Other",
        "Panda Bank",
        "PayPal",
        "PayR",
        "Payvision",
        "Peoples Trust Company",
        "Privatbank",
        "RBC",
        "RBS WorldPay",
        "RealTime",
        "RebillyProcessor",
        "State Bank of Mauritius",
        "Stripe",
        "TBI",
        "TrustPay",
        "TSYS",
        "UPayCard",
        "Vantiv",
        "VoicePay",
        "WeChat Pay",
        "Wells Fargo",
        "Wing Hang Bank",
        "Wirecard",
        "WorldPay"
      ],
      "type": "string"
    },
    "AmexVPC": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "description": "AmexVPC credentials object",
              "properties": {
                "accessCode": {
                  "description": "Access Code",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "Password (used for refund, void and capture)",
                  "format": "password",
                  "type": "string"
                },
                "url": {
                  "description": "Virtual Payment Client URL",
                  "type": "string"
                },
                "user": {
                  "description": "User (used for refund, void and capture)",
                  "type": "string"
                }
              },
              "required": [
                "url",
                "merchantId",
                "accessCode",
                "user",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "AmexVPC config"
    },
    "AmountAdjustment": {
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "none",
            "partial",
            "discount"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "ApiKey": {
      "description": "API secret Key.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "apiUser": {
          "description": "API user name",
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The API key created time"
        },
        "datetimeFormat": {
          "default": "iso8601",
          "description": "Date time format",
          "enum": [
            "mysql",
            "iso8601"
          ],
          "type": "string"
        },
        "description": {
          "description": "API key description",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "secretKey": {
          "description": "API secret key's value",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiTracking": {
      "description": "Tracking API Requests.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "duration": {
          "description": "Request duration in milliseconds",
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "description": "HTTP method",
          "enum": [
            "HEAD",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "type": "string"
        },
        "request": {
          "description": "Request JSON-string",
          "type": "string"
        },
        "requestHeaders": {
          "description": "Request headers array",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "response": {
          "description": "Response JSON-string",
          "type": "string"
        },
        "responseHeaders": {
          "description": "Response headers array",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "HTTP response code",
          "type": "integer"
        },
        "url": {
          "description": "API request address",
          "type": "string"
        },
        "user": {
          "description": "The user who has made a request",
          "properties": {
            "apiKeyId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "email": {
              "description": "The user email",
              "format": "email",
              "type": "string"
            },
            "fingerprint": {
              "description": "The user device fingerprint hash",
              "type": "string"
            },
            "firstName": {
              "description": "The user first name",
              "type": "string"
            },
            "ipAddress": {
              "description": "Client IP address",
              "format": "ipv4",
              "type": "string"
            },
            "isSupport": {
              "description": "If user from support",
              "type": "boolean"
            },
            "lastName": {
              "description": "The user last name",
              "type": "string"
            },
            "userAgent": {
              "description": "The software that is acting on behalf of a user",
              "type": "string"
            },
            "userId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          },
          "readOnly": true,
          "type": "object"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "ApprovalUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "approval_url"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Attachment": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileLink"
            },
            {
              "$ref": "#/definitions/AttachmentResourceLink"
            }
          ],
          "maxItems": 3,
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Creation date/time"
        },
        "description": {
          "description": "The Attachment description",
          "type": "string"
        },
        "fileId": {
          "description": "Linked File object id",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "name": {
          "description": "The Original Attachment name",
          "type": "string"
        },
        "relatedId": {
          "description": "Linked object Id",
          "type": "string"
        },
        "relatedType": {
          "description": "Linked object type",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Latest update date/time"
        }
      },
      "required": [
        "fileId",
        "relatedId",
        "relatedType"
      ],
      "type": "object"
    },
    "AttachmentResourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "AuthenticationOptions": {
      "properties": {
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AuthenticationToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "credentialId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential's ID",
          "readOnly": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token's customer ID",
          "readOnly": true
        },
        "expiredTime": {
          "description": "Token's expired time",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "The token's password (write-only)",
          "format": "password",
          "type": "string"
        },
        "token": {
          "description": "The token identifier string",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "AuthorizeNet": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiLoginId": {
                  "description": "AuthorizeNet Gateway api login ID",
                  "type": "string"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "AuthorizeNet Gateway config"
    },
    "BankAccount": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/ContactLink"
            }
          ],
          "maxItems": 3,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountNumber": {
          "description": "Bank's Account Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountType": {
          "description": "Banks's Account type. Required if bank account is not created from Token",
          "type": "string"
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "contactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Contact ID. Required if bank account is not created from Token"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The bank account identifier string",
          "readOnly": true
        },
        "routingNumber": {
          "description": "Bank's Routing Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "status": {
          "description": "Bank Account status",
          "enum": [
            "active",
            "deactivated"
          ],
          "type": "string"
        },
        "token": {
          "description": "Bank Account Token. Use without any other fields",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account updated time"
        }
      },
      "type": "object"
    },
    "BankAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "bankAccount"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Beanstream": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiPasscode": {
                  "description": "Beanstream Gateway API Passcode",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Beanstream Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Beanstream Gateway config"
    },
    "BillingContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "billingContact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Blacklist": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist created time"
        },
        "expiredTime": {
          "description": "The blacklist expired time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The blacklist identifier string",
          "readOnly": true
        },
        "type": {
          "description": "The blacklist type",
          "enum": [
            "payment-card-id",
            "customer-id",
            "email",
            "ip-address",
            "country",
            "fingerprint",
            "bin"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist updated time"
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BraintreePayments": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantAccountId": {
                  "description": "BraintreePayments merchant account ID",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "BraintreePayments merchant ID",
                  "format": "password",
                  "type": "string"
                },
                "privateKey": {
                  "description": "BraintreePayments Private Key",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "BraintreePayments Public Key",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "BraintreePayments Gateway config"
    },
    "CardinalCommerce": {
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "properties": {
            "merchantId": {
              "description": "Cardinal MerchantId",
              "type": "string"
            },
            "processorId": {
              "description": "Cardinal ProcessorId",
              "type": "string"
            },
            "transactionPwd": {
              "description": "Cardinal TransactionPwd",
              "format": "password",
              "type": "string"
            }
          },
          "required": [
            "merchantId",
            "processorId",
            "transactionPwd"
          ],
          "type": "object"
        }
      ],
      "description": "CardinalCommerce Mpi Credentials"
    },
    "Cashflows": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "authId": {
                  "description": "Cashflows Gateway auth ID",
                  "type": "string"
                },
                "authPassword": {
                  "description": "Cashflows Gateway auth password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Cashflows Gateway config"
    },
    "Cayan": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantKey": {
                  "description": "Cayan Gateway merchant key",
                  "format": "password",
                  "type": "string"
                },
                "merchantName": {
                  "description": "Cayan Gateway merchant name",
                  "type": "string"
                },
                "merchantSiteId": {
                  "description": "Cayan Gateway merchant site ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Cayan Gateway config"
    },
    "Chase": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "coNumber": {
                  "description": "Chase Gateway CO Number used for delimited file reports",
                  "type": "string"
                },
                "divisionId": {
                  "description": "Chase Gateway division ID",
                  "type": "string"
                },
                "partialAuth": {
                  "default": false,
                  "description": "Support for Partial Auths",
                  "type": "boolean"
                },
                "password": {
                  "description": "Chase Gateway Net Connect password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "Chase Gateway Net Connect username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "coNumber",
                "divisionId",
                "partialAuth"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Chase Gateway config"
    },
    "CheckoutPage": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "allowCustomCustomerId": {
          "description": "If to enable your own customer ID in requests",
          "type": "boolean"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page identifier string",
          "readOnly": true
        },
        "isActive": {
          "description": "If checkout page active",
          "type": "boolean"
        },
        "name": {
          "description": "Checkout page name",
          "type": "string"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page plan ID",
          "type": "string"
        },
        "redirectTimeout": {
          "description": "Checkout page redirect timeout",
          "type": "integer"
        },
        "redirectUrl": {
          "description": "Checkout page url",
          "type": "string"
        },
        "uriPath": {
          "description": "Your own custom uri path for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/website/<uriPath>",
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page website ID",
          "type": "string"
        }
      },
      "required": [
        "name",
        "planId",
        "websiteId",
        "uriPath"
      ],
      "type": "object"
    },
    "ChinaUnionPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "China Union Pay Gateway account ID",
                  "type": "string"
                },
                "goods": {
                  "description": "China Union Pay Gateway goods",
                  "type": "string"
                },
                "md5key": {
                  "description": "China Union Pay Gateway md5key",
                  "format": "password",
                  "type": "string"
                },
                "mobilePay": {
                  "description": "China Union Pay Gateway mobile pay param",
                  "type": "string"
                },
                "partyId": {
                  "description": "China Union Pay Gateway party ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "goods",
                "md5key",
                "mobilePay"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "China Union Pay Gateway config"
    },
    "CommonScheduleInstruction": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "auto",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "Condition": {
      "discriminator": "op",
      "properties": {
        "op": {
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "type": "string"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "Contact": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The contact street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The contact street address (second line)",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The contact city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact customer ID"
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The contact phone number",
          "type": "string"
        },
        "postalCode": {
          "description": "The contact postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The contact region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact updated time"
        }
      },
      "type": "object"
    },
    "ContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "contact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Coupon": {
      "description": "Coupons and Discounts",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon created time"
        },
        "description": {
          "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n",
          "type": "string"
        },
        "discount": {
          "$ref": "#/definitions/Discount"
        },
        "expiredTime": {
          "description": "Coupon's expire time (end time)",
          "format": "date-time",
          "type": "string"
        },
        "issuedTime": {
          "description": "Coupon's issued time (start time)",
          "format": "date-time",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code",
          "readOnly": true
        },
        "redemptionsCount": {
          "description": "Coupon's redemptions count",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "restrictions": {
          "description": "Coupon restrictions",
          "items": [
            {
              "$ref": "#/definitions/CouponRestriction"
            }
          ],
          "type": "array"
        },
        "status": {
          "description": "If coupon enabled",
          "enum": [
            "issued",
            "expired"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon updated time."
        }
      },
      "required": [
        "discount",
        "issuedTime"
      ],
      "type": "object"
    },
    "CouponRedemption": {
      "description": "Coupons redemption log",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalRestrictions": {
          "description": "Additional restrictions for coupon's redemptions",
          "items": [
            {
              "$ref": "#/definitions/RedemptionRestriction"
            }
          ],
          "type": "array"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redemption canceled time",
          "readOnly": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "redeemedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redeem time",
          "readOnly": true
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        }
      },
      "type": "object"
    },
    "CouponRestriction": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "type": {
              "description": "Coupon's restriction type",
              "enum": [
                "discounts-per-redemption",
                "redemptions-per-customer",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "minimum-order-amount",
                "total-redemptions"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Coupon restrictions",
      "type": "object"
    },
    "Credential": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential identifier string",
          "readOnly": true
        },
        "password": {
          "description": "The credential's password",
          "format": "password",
          "type": "string"
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "type": "object"
    },
    "Credorax": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantId": {
                  "description": "Credorax Gateway merchant ID",
                  "type": "string"
                },
                "merchantMd5Signature": {
                  "description": "Credorax Gateway md5 signature",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Credorax Gateway config"
    },
    "CustomEvent": {
      "properties": {
        "chronology": {
          "description": "The emitting time of the custom event relatively to the system event",
          "enum": [
            "before",
            "after"
          ],
          "type": "string"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "description": {
          "description": "The custom event description",
          "type": "string"
        },
        "eventType": {
          "description": "The system event type",
          "enum": [
            "subscription-ended",
            "subscription-trial-ended",
            "payment-card-expired",
            "invoice-past-due"
          ],
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The custom event identifier string",
          "readOnly": true
        },
        "rulesCount": {
          "readOnly": true,
          "type": "integer"
        },
        "scheduleInstruction": {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        "title": {
          "description": "The custom event title",
          "type": "string"
        }
      },
      "required": [
        "eventType",
        "title",
        "chronology",
        "scheduleInstruction"
      ],
      "type": "object"
    },
    "CustomEventScheduleInstruction": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\n"
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "name": {
          "description": "The name of the custom field",
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "Customer": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            },
            {
              "$ref": "#/definitions/DefaultPaymentInstrumentLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "email": {
          "description": "The customer email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "The customer first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string",
          "readOnly": true
        },
        "ipAddress": {
          "description": "The customer IP",
          "format": "ipv4",
          "type": "string"
        },
        "lastName": {
          "description": "The customer last name",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer updated time"
        }
      },
      "type": "object"
    },
    "CustomerLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "DataCash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "client": {
                  "description": "DataCash Gateway client",
                  "type": "string"
                },
                "delay": {
                  "default": 0,
                  "description": "Auto Capture delay (in hours)",
                  "minimum": 0,
                  "type": "integer"
                },
                "password": {
                  "description": "DataCash Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "policy": {
                  "default": 2,
                  "description": "Policy",
                  "maximum": 7,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "client",
                "password",
                "policy",
                "delay"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/DataCashMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "DataCash Gateway config"
    },
    "DataCashMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/DataCashMpis"
        }
      ],
      "description": "DataCash Integrated"
    },
    "DataCashMpis": {
      "description": "DataCash Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "DataCashMpi"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "DayOfWeek": {
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "type": "string"
    },
    "DefaultPaymentInstrumentLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "defaultPaymentInstrument"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "DeliveryContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "deliveryContact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Dengi": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "projectId": {
                  "description": "Dengi Gateway project ID",
                  "type": "string"
                },
                "publicKey": {
                  "description": "Dengi Gateway public key",
                  "format": "password",
                  "type": "string"
                },
                "refundKey": {
                  "description": "Dengi Gateway refund key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Dengi Gateway config"
    },
    "Discount": {
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Discount type",
          "enum": [
            "fixed",
            "percent"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Dispute": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "format": "double",
          "type": "number"
        },
        "category": {
          "description": "The dispute's category",
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute created time"
        },
        "currency": {
          "description": "The dispute currency ISO Alpha code",
          "type": "string"
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "readOnly": true,
          "type": "string"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The dispute identifier string",
          "readOnly": true
        },
        "postedTime": {
          "description": "Dispute posted time",
          "format": "date-time",
          "type": "string"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "readOnly": true,
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "enum": [
            "1000",
            "12",
            "2",
            "30",
            "31",
            "35",
            "37",
            "40",
            "41",
            "42",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "62",
            "7",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "79",
            "8",
            "80",
            "81",
            "82",
            "83",
            "85",
            "86",
            "93",
            "00",
            "63",
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38",
            "duplicate",
            "fraudulent",
            "subscription_canceled",
            "product_unacceptable",
            "product_not_received",
            "unrecognized",
            "credit_not_processed",
            "customer_initiated",
            "incorrect_account_details",
            "insufficient_funds",
            "bank_cannot_process",
            "debit_not_authorized",
            "general"
          ],
          "type": "string"
        },
        "resolvedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute resolved time"
        },
        "status": {
          "description": "The dispute's status",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost",
            "unknown"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "type": {
          "description": "The dispute's type",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute updated time"
        }
      },
      "required": [
        "currency",
        "transactionId",
        "postedTime",
        "type",
        "status",
        "reasonCode"
      ],
      "type": "object"
    },
    "DisputeEvidence": {
      "properties": {
        "accessLogs": {
          "description": "The id of a file upload with the access logs showing the customer activity.",
          "type": "string"
        },
        "additionalFile": {
          "description": "Any additional evidence as a file upload id.",
          "type": "string"
        },
        "customerCommunication": {
          "description": "The id of a file upload showing communication with the customer (for example emails).",
          "type": "string"
        },
        "customerSignature": {
          "description": "The id of a file upload showing the signed contract or signed delivery receipt.",
          "type": "string"
        },
        "deliveryProof": {
          "description": "The id of a file upload showing the proof of delivery.",
          "type": "string"
        },
        "explanation": {
          "description": "An explanation relevant to the category of dispute.",
          "type": "string"
        },
        "policy": {
          "description": "The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EMerchantPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "EMerchantPay Gateway api key",
                  "format": "password",
                  "type": "string"
                },
                "clientId": {
                  "description": "EMerchantPay Gateway client ID",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "apiKey"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/EMerchantPayMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "EMerchantPay Gateway config"
    },
    "EMerchantPayMpis": {
      "description": "EMerchantPay Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Email": {
      "properties": {
        "email": {
          "description": "Email",
          "format": "email",
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "EmailNotification": {
      "properties": {
        "bcc": {
          "description": "The hidden recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bodyHtml": {
          "description": "Leave empty to recieve \"text/plain\" email.\nThe template palceholders are allowed.\n",
          "type": "string"
        },
        "bodyText": {
          "description": "Leave empty to use text from \"bodyHtml\" without tags.\nThe template palceholders are allowed.\n",
          "type": "string"
        },
        "cc": {
          "description": "The recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "credentialHash": {
          "description": "SMTP Credential identifier string.",
          "type": "string"
        },
        "recipients": {
          "description": "The recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "sender": {
          "description": "The sender address. The template palceholders are allowed.",
          "type": "string"
        },
        "subject": {
          "description": "The message subject. The template palceholders are allowed.",
          "type": "string"
        }
      },
      "required": [
        "credentialHash",
        "sender",
        "recipients",
        "subject",
        "bodyText",
        "bodyHtml"
      ],
      "type": "object"
    },
    "Error": {
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "maximum": 600,
          "minimum": 100,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EventType": {
      "description": "Rebilly event type",
      "enum": [
        "dispute-created",
        "gateway-account-requested",
        "transaction-processed",
        "subscription-canceled",
        "subscription-renewed",
        "payment-card-expired",
        "payment-declined",
        "transaction-process-requested",
        "risk-score-changed"
      ],
      "readOnly": true,
      "type": "string"
    },
    "File": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The upload date/time"
        },
        "description": {
          "description": "The File description",
          "type": "string"
        },
        "extension": {
          "description": "The File extension",
          "type": "string"
        },
        "height": {
          "description": "Image height, applicable to images only",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "mime": {
          "description": "The mime type",
          "enum": [
            "image/png",
            "image/jpeg",
            "image/gif",
            "application/pdf",
            "audio/mpeg"
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Original File name",
          "type": "string"
        },
        "sha1": {
          "description": "Hash sum of the file",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "description": "The File size in bytes",
          "readOnly": true,
          "type": "integer"
        },
        "tags": {
          "description": "The tags list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The latest update date/time"
        },
        "url": {
          "description": "Write-only. If defined on POST, this would be used as a file source.",
          "type": "string"
        },
        "width": {
          "description": "Image width, applicable to images only",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FileLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "file"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Flexepin": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "Flexepin API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "Flexepin API Secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Flexepin Gateway config"
    },
    "Forte": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "Forte Gateway account ID",
                  "type": "string"
                },
                "apiAccessId": {
                  "description": "Forte Gateway api access ID",
                  "format": "password",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "Forte Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "locationId": {
                  "description": "Forte Gateway location ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Forte Gateway config"
    },
    "FundSend": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "FundSend Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "FundSend Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "FundSend Gateway config"
    },
    "GET": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "GET Gateway account ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "GET Gateway config"
    },
    "GatewayAccount": {
      "discriminator": "gatewayName",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/OnBoardingUrlLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "acquirerName": {
          "$ref": "#/definitions/AcquirerName"
        },
        "cityField": {
          "description": "The gateway account's city field (also known as line 2 descriptor)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account created time"
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "descriptor": {
          "description": "The gateway account's descriptor",
          "type": "string"
        },
        "downtimeEnd": {
          "description": "Gateway account downtime end",
          "format": "date-time",
          "type": "string"
        },
        "downtimeStart": {
          "description": "Gateway account downtime start",
          "format": "date-time",
          "type": "string"
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "excludedDccQuoteCurrencies": {
          "description": "Excluded Dynamic Currency Conversion Quote Currencies",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gatewayName": {
          "$ref": "#/definitions/GatewayName"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The gateway identifier string",
          "readOnly": true
        },
        "merchantCategoryCode": {
          "description": "The gateway account's merchant category code",
          "maximum": 9950,
          "minimum": 742,
          "type": "integer"
        },
        "method": {
          "$ref": "#/definitions/Method",
          "description": "Payment Method"
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "format": "double",
          "minimum": 0,
          "type": "integer"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Organization ID"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "items": {
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China Unionpay"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "The gateway account's status",
          "enum": [
            "active",
            "inactive",
            "pending"
          ],
          "readOnly": true,
          "type": "string"
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account updated time"
        },
        "websites": {
          "description": "Websites IDs",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ],
            "description": "Website ID"
          },
          "type": "array"
        }
      },
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "type": "object"
    },
    "GatewayAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "gatewayAccount"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "GatewayAccountPickInstruction": {
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "gateway-account-weights",
            "gateway-acquirer-weights"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "GatewayName": {
      "description": "The gateway name",
      "enum": [
        "A1Gateway",
        "AmexVPC",
        "AuthorizeNet",
        "Beanstream",
        "BraintreePayments",
        "Cashflows",
        "Cayan",
        "Chase",
        "ChinaUnionPay",
        "Credorax",
        "DataCash",
        "Dengi",
        "EMerchantPay",
        "Flexepin",
        "FundSend",
        "Forte",
        "GET",
        "GlobalCollect",
        "GlobalOne",
        "iCheque",
        "Ilixium",
        "JetPay",
        "Moneris",
        "NMI",
        "OchaPay",
        "Optimal",
        "PandaGateway",
        "Payeezy",
        "PayPal",
        "PayR",
        "Payvision",
        "Plugnpay",
        "Realex",
        "RealTime",
        "RebillyProcessor",
        "Redsys",
        "RPN",
        "Sagepay",
        "Stripe",
        "UPayCard",
        "USAePay",
        "VantivLitle",
        "vegaaH",
        "Walpay",
        "Wirecard",
        "Worldpay"
      ],
      "type": "string"
    },
    "GenericRestriction": {
      "description": "All restriction",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Restriction type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GlobalCollect": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKeyId": {
                  "description": "GlobalCollect Gateway api key ID",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "GlobalCollect Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "GlobalCollect Gateway merchant ID",
                  "type": "string"
                },
                "skipFraudService": {
                  "description": "GlobalCollect skip fraud service",
                  "type": "boolean"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/GlobalCollectMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "GlobalCollect Gateway config"
    },
    "GlobalCollectMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/GlobalCollectMpis"
        }
      ],
      "description": "GlobalCollect Integrated"
    },
    "GlobalCollectMpis": {
      "description": "GlobalCollect Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "GlobalCollectMpi"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "GlobalOne": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "sharedSecret": {
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "GlobalOne Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "GlobalOne Gateway config"
    },
    "GlobalWebhook": {
      "properties": {
        "_links": {
          "description": "Links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List created time"
        },
        "credentialHash": {
          "description": "Hash from Credentials which is used for authentication by the given URL",
          "type": "string"
        },
        "eventsFilter": {
          "default": [],
          "description": "An array of System event type",
          "items": {
            "$ref": "#/definitions/GlobalWebhookEventType"
          },
          "type": "array"
        },
        "headers": {
          "description": "Map of elements with header name - header value association",
          "type": "object"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The webhook identifier string",
          "readOnly": true
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List updated time"
        },
        "url": {
          "description": "URL that will be triggered when the given event occurs.",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "method",
        "url",
        "credentialHash"
      ],
      "type": "object"
    },
    "GlobalWebhookEventType": {
      "description": "Rebilly webhooks event type",
      "enum": [
        "gateway-account-requested",
        "subscription-trial-ended",
        "subscription-activated",
        "subscription-canceled",
        "subscription-renewed",
        "transaction-processed",
        "payment-card-expired",
        "payment-declined",
        "invoice-modified",
        "invoice-created",
        "dispute-created",
        "suspended-payment-completed"
      ],
      "type": "string"
    },
    "Ilixium": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "Ilixium Gateway account ID",
                  "type": "string"
                },
                "digestPassword": {
                  "description": "Ilixium Gateway digest password",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Ilixium Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/IlixiumMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Ilixium Gateway config"
    },
    "IlixiumMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/IlixiumMpis"
        }
      ],
      "description": "Ilixium Integrated"
    },
    "IlixiumMpis": {
      "description": "IlixiumMpis Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "IlixiumMpi"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "properties": {
            "details": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "Invoice": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            },
            {
              "$ref": "#/definitions/OrganizationLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 6,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "abandonedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice abandoned time"
        },
        "amount": {
          "description": "The Invoice's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Invoice's billing contact ID"
        },
        "closedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice closed time"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice created time"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer's ID"
        },
        "deliveryContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Invoice's delivery contact ID"
        },
        "discounts": {
          "description": "Discounts applied",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceDiscount"
              }
            ]
          },
          "type": "array"
        },
        "dueTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice due time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The invoice identifier string",
          "readOnly": true
        },
        "issuedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice issued time"
        },
        "items": {
          "description": "Invoice items array",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "notes": {
          "description": "Notes for the customer which will display on the invoice",
          "type": "string"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The organization's ID",
          "readOnly": true
        },
        "shippingAmount": {
          "description": "The Invoice's shipping amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "taxes": {
          "description": "Taxes applied to this invoice",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceTax"
              }
            ]
          },
          "readOnly": true,
          "type": "array"
        },
        "voidedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice voided time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "type": "object"
    },
    "InvoiceDiscount": {
      "properties": {
        "amount": {
          "description": "Total amount that was discounted by this Coupon",
          "format": "double",
          "type": "number"
        },
        "description": {
          "description": "Discount description",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        },
        "redemptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Redemption ID"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InvoiceIssue": {
      "properties": {
        "issuedTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceItem": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/SubscriptionLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "discountAmount": {
          "description": "Invoice item discount amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "periodEndTime": {
          "description": "End time",
          "format": "date-time",
          "type": "string"
        },
        "periodStartTime": {
          "description": "Start time",
          "format": "date-time",
          "type": "string"
        },
        "productId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product's ID"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "type": {
          "description": "Invoice item's type",
          "enum": [
            "debit",
            "credit"
          ],
          "type": "string"
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "type",
        "unitPrice"
      ],
      "type": "object"
    },
    "InvoiceTax": {
      "properties": {
        "amount": {
          "description": "Tax amount",
          "format": "double",
          "type": "number"
        },
        "description": {
          "description": "Tax description",
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "ItemsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "items"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "JetPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "TerminalID": {
                  "description": "JetPay Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "TerminalID"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "JetPay Gateway config"
    },
    "Layout": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/ItemsLink"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Layout created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The layout identifier string",
          "readOnly": true
        },
        "items": {
          "description": "The array of layout items (planId and starred)",
          "items": {
            "$ref": "#/definitions/LayoutItem"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the layout string",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "LayoutItem": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "order": {
          "description": "Item's order in Layout",
          "readOnly": true,
          "type": "integer"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string"
        },
        "starred": {
          "description": "Boolean if the plan should be starred (special callout presentation)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadSource": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "amount": {
          "description": "The amount that the lead cost",
          "format": "double",
          "type": "number"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "LeadSource created time"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The lead source identifier string",
          "readOnly": true
        },
        "ipAddress": {
          "description": "Customer's IP Address",
          "type": "string"
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "LeadSource updated time"
        }
      },
      "type": "object"
    },
    "LeadSourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "leadSource"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "List": {
      "properties": {
        "_links": {
          "description": "Links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "List ID",
          "readOnly": true
        },
        "name": {
          "description": "List name",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List updated time"
        },
        "values": {
          "description": "List values",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "List version",
          "minimum": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "type": "object"
    },
    "Method": {
      "description": "The payment method",
      "enum": [
        "ach",
        "Alipay",
        "cash",
        "china-unionpay",
        "payment-card",
        "paypal",
        "OchaPay",
        "UPayCard",
        "WeChat Pay",
        "Flexepin"
      ],
      "type": "string"
    },
    "Moneris": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiToken": {
                  "description": "Moneris Gateway api token",
                  "format": "password",
                  "type": "string"
                },
                "storeId": {
                  "description": "Moneris Gateway store ID",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Moneris Gateway config"
    },
    "MpiName": {
      "description": "The Merchant plug-in Name",
      "enum": [
        "PayvisionMpi",
        "WirecardMpi",
        "IlixiumMpi",
        "DataCashMpi",
        "OptimalMpi",
        "GlobalCollectMpi",
        "CardinalCommerce",
        "Other"
      ],
      "type": "string"
    },
    "NMI": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "password": {
                  "description": "NMI Gateway store ID",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "NMI Gateway api token",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "NMI Gateway config"
    },
    "NewLink": {
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ],
      "type": "object"
    },
    "Note": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "archived": {
          "description": "Is the note archived (excluded from List method)",
          "type": "boolean"
        },
        "archivedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note archived time"
        },
        "content": {
          "description": "The note's name",
          "type": "string"
        },
        "createdBy": {
          "description": "The note's creator",
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The note identifier string",
          "readOnly": true
        },
        "relatedId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The note's related resource ID"
        },
        "relatedType": {
          "description": "The note's related resource type",
          "enum": [
            "customer",
            "payment-card",
            "payment-gateway",
            "subscription",
            "transaction"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note updated time"
        }
      },
      "required": [
        "content",
        "relatedType",
        "relatedId"
      ],
      "type": "object"
    },
    "NotesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "notes"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "OchaPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiPassword": {
                  "description": "OchaPay Gateway api password",
                  "format": "password",
                  "type": "string"
                },
                "apiUsername": {
                  "description": "OchaPay Gateway username",
                  "type": "string"
                },
                "secretWord": {
                  "description": "OchaPay Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "OchaPay Gateway config"
    },
    "OnBoardingUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "onBoardingUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "OnOff": {
      "default": "active",
      "enum": [
        "active",
        "inactive"
      ],
      "type": "string"
    },
    "Optimal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountNum": {
                  "description": "Optimal Gateway account number",
                  "type": "string"
                },
                "storeId": {
                  "description": "Optimal Gateway store ID",
                  "type": "string"
                },
                "storePwd": {
                  "description": "Optimal Gateway store password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/OptimalMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Optimal Gateway config"
    },
    "OptimalMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/OptimalMpis"
        }
      ],
      "description": "Optimal Integrated"
    },
    "OptimalMpis": {
      "description": "Optimal Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "OptimalMpi"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Organization": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The organization city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The organization country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp",
          "description": "The organization created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The organization identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The organization name",
          "maxLength": 60,
          "type": "string"
        },
        "postalCode": {
          "description": "The organization postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The organization region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The organization updated time"
        }
      },
      "required": [
        "name",
        "country"
      ],
      "type": "object"
    },
    "OrganizationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "organization"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Other": {
      "allOf": [
        {
          "$ref": "#/definitions/EMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        }
      ],
      "description": "Other"
    },
    "PandaGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiCode": {
                  "description": "Panda Gateway api code",
                  "type": "string"
                },
                "merchantCode": {
                  "description": "Panda Gateway merchant code",
                  "type": "string"
                },
                "signKey": {
                  "description": "Panda Gateway sign key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Panda Gateway config"
    },
    "ParentTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "parentTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PayPal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantIdInPayPal": {
                  "description": "PayPal Gateway merchant id",
                  "type": "string"
                },
                "redirectUrl": {
                  "description": "PayPal Gateway redirect url",
                  "format": "url",
                  "type": "string"
                }
              },
              "required": [
                "merchantIdInPayPal",
                "redirectUrl"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal Gateway config"
    },
    "PayR": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "PayR Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "PayR Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "PayR Gateway config"
    },
    "Payeezy": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "API Secret",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Payeezy Merchant ID",
                  "type": "string"
                },
                "merchantToken": {
                  "description": "Merchant Token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantToken",
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Payeezy Gateway config"
    },
    "Payment": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 4,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "The payment amount",
          "format": "double",
          "type": "integer"
        },
        "billingContactId": {
          "description": "Billing Contact ID",
          "type": "string"
        },
        "createdBy": {
          "description": "The process that created this payment",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment created time"
        },
        "currency": {
          "description": "The payment currency ISO Alpha code",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The payment identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "type": "array"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "result": {
          "description": "Payment result",
          "enum": [
            "approved",
            "declined",
            "canceled",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retriedPaymentId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The retried payment ID",
          "readOnly": true
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "description": "The position in the sequence of retries",
          "readOnly": true,
          "type": "integer"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedBy": {
          "description": "The process that updated this payment",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string"
        }
      },
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "PaymentCard": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            }
          ],
          "maxItems": 3,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "bankCountry": {
          "description": "Payment Card bank country",
          "readOnly": true,
          "type": "string"
        },
        "bankName": {
          "description": "Payment Card bank name",
          "readOnly": true,
          "type": "string"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Billing Contact ID. Required if card is creating not from Token"
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "brand": {
          "description": "Payment Card brand",
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID. Required if card is creating not from Token"
        },
        "cvv": {
          "description": "Card's cvv (card verification value). Required if card is creating not from Token",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month. Required if card is creating not from Token",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year. Required if card is creating not from Token",
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The card identifier string",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "readOnly": true,
          "type": "string"
        },
        "pan": {
          "description": "The card PAN (Primary Account Number). Required if card is creating not from Token",
          "type": "string"
        },
        "safeHash": {
          "description": "The card's hash. Based on bin and last 4 digits of the PAN",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "Payment Card status",
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending"
          ],
          "readOnly": true,
          "type": "string"
        },
        "token": {
          "description": "PaymentCardToken. Use without any other fields",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card updated time"
        }
      },
      "type": "object"
    },
    "PaymentCardLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "paymentCard"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PaymentCardMigrationRequest": {
      "properties": {
        "fromGatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "An ID of Gateway Account cards should be migrated from"
        },
        "paymentCardIds": {
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ],
            "description": "An array of payment card IDs"
          },
          "minItems": 1,
          "type": "array"
        },
        "toGatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "An ID of Gateway Account cards should be migrated to"
        }
      },
      "required": [
        "fromGatewayAccountId",
        "toGatewayAccountId",
        "paymentCardIds"
      ],
      "type": "object"
    },
    "PaymentCardMigrationResponse": {
      "properties": {
        "migratedCards": {
          "description": "Amount of cards that were successfully migrated",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PaymentInstrument": {
      "discriminator": "method",
      "properties": {
        "method": {
          "$ref": "#/definitions/Method"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "PaymentLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "payment"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PaymentRetry": {
      "properties": {
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "enum": [
            "none",
            "change-subscription-renewal-time"
          ],
          "type": "string"
        },
        "afterRetryEndPolicy": {
          "description": "The policy on the retry ends",
          "enum": [
            "none",
            "cancel-subscription"
          ],
          "type": "string"
        },
        "attempts": {
          "items": {
            "properties": {
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              },
              "scheduleInstruction": {
                "$ref": "#/definitions/CommonScheduleInstruction"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterRetryEndPolicy"
      ],
      "type": "object"
    },
    "PaymentToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "Customer's billing address 1",
          "type": "string"
        },
        "address2": {
          "description": "Customer's billing address 2",
          "type": "string"
        },
        "city": {
          "description": "Billing address city",
          "type": "string"
        },
        "country": {
          "description": "Billing country - Two letter code",
          "type": "string"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "firstName": {
          "description": "First name on payment card",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "Last name on payment card",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/Method",
          "description": "Payment Method"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentTokenInstrument"
        },
        "phoneNumber": {
          "description": "Phone number",
          "type": "string"
        },
        "postalCode": {
          "description": "Billing postal code",
          "type": "string"
        },
        "region": {
          "description": "Billing region",
          "type": "string"
        }
      },
      "required": [
        "method",
        "paymentInstrument",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "PaymentTokenInstrument": {
      "description": "Payment Token instrument object",
      "properties": {
        "accountNumber": {
          "description": "AccountNumber",
          "type": "integer"
        },
        "accountType": {
          "description": "Account Type",
          "type": "string"
        },
        "bankName": {
          "description": "Bank name",
          "type": "string"
        },
        "cvv": {
          "description": "The CVV/CVC of the payment card",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year",
          "type": "integer"
        },
        "pan": {
          "description": "The card PAN (Primary Account Number)",
          "type": "string"
        },
        "routingNumber": {
          "description": "Routing Number",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Payvision": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "avs": {
                  "description": "Payvision Gateway avs",
                  "type": "boolean"
                },
                "delay": {
                  "description": "Payvision Gateway delay",
                  "type": "integer"
                },
                "memberGuid": {
                  "description": "Payvision Gateway member guid",
                  "format": "password",
                  "type": "string"
                },
                "memberId": {
                  "description": "Payvision Gateway member id",
                  "type": "string"
                }
              },
              "required": [
                "memberId",
                "avs",
                "delay",
                "memberGuid"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/PayvisionMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Payvision Gateway config"
    },
    "PayvisionMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        }
      ],
      "description": "Payvision Integrated"
    },
    "PayvisionMpis": {
      "description": "Payvision Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PayvisionMpi",
            "CardinalCommerce",
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Plan": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "contractTermLength": {
          "description": "The length that corresponds with the contractTermUnit",
          "type": "integer"
        },
        "contractTermUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan created time"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "currencySign": {
          "description": "Currency sign",
          "type": "string"
        },
        "description": {
          "description": "The plan description",
          "type": "string"
        },
        "expiredTime": {
          "description": "Time when the plan is not longer valid",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan (default to true)",
          "type": "boolean"
        },
        "maxQuantity": {
          "description": "Maximum quantity per order (NULL if no maximum)",
          "type": "integer"
        },
        "minQuantity": {
          "description": "Minimum quantity per order, defaults to 1",
          "type": "integer"
        },
        "name": {
          "description": "The plan name",
          "type": "string"
        },
        "recurringAmount": {
          "description": "The amount that recurs according to the schedule",
          "format": "double",
          "type": "number"
        },
        "recurringPeriodLength": {
          "description": "The length of time (used with the recurringPeriodUnit)",
          "type": "integer"
        },
        "recurringPeriodLimit": {
          "description": "The number of times a subscription will rebill until the contract is over",
          "type": "integer"
        },
        "recurringPeriodUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "richDescription": {
          "description": "The plan rich description - supports HTML",
          "type": "string"
        },
        "setupAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        },
        "trialAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        },
        "trialPeriodLength": {
          "description": "The length of time (used with the trialPeriodUnit)",
          "type": "integer"
        },
        "trialPeriodUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan updated time"
        }
      },
      "required": [
        "name",
        "currency"
      ],
      "type": "object"
    },
    "PlanLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "plan"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Plugnpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "publisher-name": {
                  "description": "Plugnpay Gateway member id",
                  "type": "string"
                },
                "publisher-password": {
                  "description": "Plugnpay Gateway avs",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Plugnpay Gateway config"
    },
    "PriceBasedShippingRate": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "maxOrderSubtotal": {
          "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
          "format": "double",
          "type": "number"
        },
        "minOrderSubtotal": {
          "default": 0,
          "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
          "format": "double",
          "type": "number"
        },
        "name": {
          "description": "The shipping rate name",
          "maxLength": 255,
          "type": "string"
        },
        "price": {
          "description": "The shipping price - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "name",
        "currency",
        "price"
      ],
      "type": "object"
    },
    "Product": {
      "description": "Your product includes digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.\n",
      "example": "{\n  \"id\": \"stringid\",\n  \"name\": \"Widget\",\n  \"description\": \"Fantastic widget\",\n  \"taxCategoryId\": null,\n  \"requiresShipping\": true,\n  \"accountingCode\": \"100\",\n  \"customFields\": [],\n  \"createdTime\": \"2015-08-27 13:45:12\",\n  \"updatedTime\": \"2015-08-27 13:45:12\",\n  \"_links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://api.rebilly.com/v2.1/products/stringid\"\n      }\n  ]\n}\n",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountingCode": {
          "description": "The product accounting code",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "description": {
          "description": "The product description",
          "maxLength": 512,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The product name",
          "maxLength": 255,
          "type": "string"
        },
        "requiresShipping": {
          "description": "If the product requires shipping, shipping calculations will be applied",
          "type": "boolean"
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Profile": {
      "properties": {
        "availableCurrencies": {
          "description": "An array of reporting currencies enabled for the merchant",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "readOnly": true,
          "type": "string"
        },
        "country": {
          "description": "The user country setting - two letter code",
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "firstName": {
          "description": "User's first name",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The user identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "User's last name",
          "readOnly": true,
          "type": "string"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "readOnly": true,
          "type": "string"
        },
        "preferences": {
          "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
          "type": "object"
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "readOnly": true,
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "readOnly": true,
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "format": "url",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "RPN": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "key": {
                  "description": "RPN Key",
                  "format": "password",
                  "type": "string"
                },
                "mid": {
                  "description": "RPN MID",
                  "type": "string"
                }
              },
              "required": [
                "mid",
                "key"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "RPN Gateway config"
    },
    "RealTime": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "RealTime Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "RealTime Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "RealTime Gateway config"
    },
    "Realex": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "account": {
                  "description": "Realex Gateway account",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Realex Gateway merchant id",
                  "type": "string"
                },
                "rebatePassword": {
                  "description": "Realex Gateway rebate password",
                  "format": "password",
                  "type": "string"
                },
                "secretKey": {
                  "description": "Realex Gateway secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Realex Gateway config"
    },
    "RebillyProcessor": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        }
      ],
      "description": "RebillyProcessor Gateway config"
    },
    "RedemptionRestriction": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "type": {
              "description": "Redemption's additional restriction type",
              "enum": [
                "discounts-per-redemption",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "minimum-order-amount"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Redemption restrictions",
      "type": "object"
    },
    "RedirectUrls": {
      "description": "The redirect URIs",
      "properties": {
        "cancel": {
          "format": "url",
          "type": "string"
        },
        "decline": {
          "format": "url",
          "type": "string"
        },
        "error": {
          "format": "url",
          "type": "string"
        },
        "success": {
          "format": "url",
          "type": "string"
        }
      },
      "required": [
        "error",
        "success",
        "decline",
        "cancel"
      ],
      "type": "object"
    },
    "Redsys": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantCode": {
                  "description": "Redsys Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "secretCode": {
                  "description": "Redsys Gateway secret code",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Redsys Gateway config"
    },
    "ResetPassword": {
      "properties": {
        "newPassword": {
          "description": "New password",
          "format": "password",
          "type": "string"
        }
      },
      "required": [
        "newPassword"
      ],
      "type": "object"
    },
    "ResetPasswordToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "credential": {
          "description": "Token's credential ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "Token's password (only for POST)",
          "format": "password",
          "type": "string"
        },
        "token": {
          "description": "The token's identifier string",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "description": "The resource ID. Defaults to UUID v4",
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
      "maxLength": 50,
      "type": "string"
    },
    "RetriedTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "retriedTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Rule": {
      "description": "The rule",
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/RuleAction"
          },
          "type": "array",
          "uniqueItems": true
        },
        "criteria": {
          "$ref": "#/definitions/Condition"
        },
        "final": {
          "default": true,
          "description": "Whether rule is final, meaning stop further matching rules if this is matched",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        }
      },
      "required": [
        "name",
        "actions"
      ],
      "type": "object"
    },
    "RuleAction": {
      "discriminator": "name",
      "properties": {
        "name": {
          "description": "The action name",
          "enum": [
            "blacklist",
            "cancel-scheduled-payments",
            "guess-payment-card-expiration",
            "pick-gateway-account",
            "schedule-payment-retry",
            "schedule-payment",
            "send-email",
            "trigger-webhook",
            "stop-subscriptions",
            "add-risk-score"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "RuleSet": {
      "description": "Set of rules for particular event",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/Rule"
          },
          "type": "array"
        },
        "updatedTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "version": {
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "RuleSetHistoryItem": {
      "description": "Version of rules",
      "properties": {
        "_links": {
          "description": "The links related to a resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/RuleSetVersionLink"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "version": {
          "type": "integer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RuleSetVersion": {
      "description": "Version of rules",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/Rule"
          },
          "type": "array"
        },
        "version": {
          "type": "integer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RuleSetVersionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "rules"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Sagepay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "M_ID": {
                  "description": "Sagepay Gateway merchant ID",
                  "type": "string"
                },
                "M_KEY": {
                  "description": "Sagepay Gateway merchant key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Sagepay Gateway config"
    },
    "SelfLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "self"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "SendPreviewWebhook": {
      "allOf": [
        {
          "$ref": "#/definitions/Webhook"
        }
      ],
      "description": "Trigger a test webhook"
    },
    "SendTestEmail": {
      "allOf": [
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ],
      "description": "Send a test email"
    },
    "ServerTimestamp": {
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true,
      "type": "string"
    },
    "Session": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Session created time"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The session identifier string",
          "readOnly": true
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ],
          "description": "The session's permissions. See the format in example"
        },
        "token": {
          "description": "The session's token used for authentication",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Session updated time"
        },
        "userId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The user identifier string",
          "readOnly": true
        }
      },
      "required": [
        "permissions"
      ],
      "type": "object"
    },
    "ShippingZone": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "countries": {
          "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
          "items": {
            "description": "Country ISO Alpha-2 code",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The shipping zone identifier string",
          "readOnly": true
        },
        "isDefault": {
          "description": "Is this Shipping Zone default",
          "readOnly": true
        },
        "name": {
          "description": "The shipping zone name",
          "maxLength": 255,
          "type": "string"
        },
        "rates": {
          "description": "Price-based shipping rate instructions",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/PriceBasedShippingRate"
              }
            ],
            "description": "Price based shipping rate instruction"
          },
          "type": "array"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Signin": {
      "properties": {
        "email": {
          "description": "Email",
          "type": "string"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "format": "password",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object"
    },
    "Signup": {
      "properties": {
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "company": {
          "description": "The user's company name",
          "type": "string"
        },
        "currencies": {
          "default": [
            "USD"
          ],
          "description": "An array of currencies codes",
          "items": {
            "description": "3 letters ISO 4217 currency code",
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "The user first name",
          "type": "string"
        },
        "lastName": {
          "description": "The user last name",
          "type": "string"
        },
        "merchantCategoryCode": {
          "default": 5734,
          "description": "Merchant category code. Defaults to \"Computer Software Stores\"",
          "type": "integer"
        },
        "password": {
          "description": "The user password",
          "format": "password",
          "type": "string"
        },
        "website": {
          "description": "The user's website address",
          "type": "string"
        }
      },
      "required": [
        "email",
        "company",
        "firstName",
        "lastName",
        "businessPhone",
        "password",
        "website"
      ],
      "type": "object"
    },
    "SmtpAuthorization": {
      "discriminator": "type",
      "properties": {
        "type": {
          "default": "none",
          "enum": [
            "none",
            "plain",
            "login",
            "cram-md5"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SmtpCredential": {
      "description": "SMTP Credential",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "auth": {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        "encryption": {
          "default": "none",
          "description": "The encryption value",
          "enum": [
            "none",
            "tls",
            "ssl"
          ],
          "type": "string"
        },
        "hash": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "host": {
          "description": "The host name",
          "type": "string"
        },
        "port": {
          "default": 25,
          "description": "The port value",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "host"
      ],
      "type": "object"
    },
    "Status": {
      "properties": {
        "status": {
          "description": "The API status. If everything is ok - value is 'ok'",
          "enum": [
            "ok"
          ],
          "readOnly": true,
          "type": "string"
        },
        "time": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Current time"
        }
      },
      "type": "object"
    },
    "Stripe": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "redirectUrl": {
                  "description": "Stripe Gateway redirect url",
                  "format": "url",
                  "type": "string"
                }
              },
              "required": [
                "redirectUrl"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Stripe Gateway config"
    },
    "Subscription": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/PlanLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 6,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "activationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription activation time"
        },
        "autopay": {
          "default": true,
          "description": "Autopay determines if a payment attempt will be automatic",
          "type": "boolean"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each billing contact"
        },
        "cancelCategory": {
          "description": "Cancel category",
          "enum": [
            "billing-failure",
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "never-started",
            "switched-plan",
            "other"
          ],
          "readOnly": true,
          "type": "string"
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "canceledBy": {
          "description": "Canceled by",
          "enum": [
            "merchant",
            "customer",
            "rebilly"
          ],
          "readOnly": true,
          "type": "string"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription canceled time"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each customer"
        },
        "deliveryContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each delivery contact"
        },
        "endTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription end time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Subscription identifier string",
          "readOnly": true
        },
        "inTrial": {
          "description": "True if the subscription is currently in a trial period",
          "readOnly": true,
          "type": "boolean"
        },
        "initialInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for the initial invoice"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each plan"
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "rebillNumber": {
          "description": "The current period number",
          "readOnly": true,
          "type": "integer"
        },
        "renewalTime": {
          "description": "Subscription renewal time",
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "description": "Subscription start time",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Subscription status",
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each website"
        }
      },
      "required": [
        "customerId",
        "planId",
        "websiteId"
      ],
      "type": "object"
    },
    "SubscriptionCancel": {
      "properties": {
        "cancelCategory": {
          "description": "Cancel category",
          "enum": [
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "other"
          ],
          "type": "string"
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "type": "string"
        },
        "canceledBy": {
          "description": "Canceled by",
          "enum": [
            "merchant",
            "customer"
          ],
          "type": "string"
        },
        "policy": {
          "description": "Cancel policy",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ],
          "type": "string"
        }
      },
      "required": [
        "policy",
        "canceledBy",
        "cancelCategory"
      ],
      "type": "object"
    },
    "SubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "subscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "SubscriptionSwitch": {
      "properties": {
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string"
        },
        "policy": {
          "description": "Switch policy",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ],
          "type": "string"
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "required": [
        "planId",
        "policy"
      ],
      "type": "object"
    },
    "SubscriptionTracking": {
      "description": "Tracking subscription log",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "message": {
          "description": "It contains the transaction number and renewal time",
          "type": "string"
        },
        "result": {
          "description": "Subscription's result",
          "enum": [
            "created",
            "postponed",
            "stopped",
            "error"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "SystemEvent": {
      "description": "The application event",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "eventType": {
          "$ref": "#/definitions/EventType"
        },
        "rulesCount": {
          "readOnly": true,
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TaxCategory": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "description": "The tax category description",
          "maxLength": 512,
          "type": "string"
        },
        "id": {
          "description": "The tax category identifier string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ],
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "taxProvider": {
          "description": "The tax category maps to a provider",
          "enum": [
            "tax-jar"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ThreeDSecure": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "Transaction amount",
          "format": "double",
          "type": "number"
        },
        "cavv": {
          "description": "The 3D Secure entry cardholder authentication verification value",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The 3D Secure entry created time"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related customer ID"
        },
        "eci": {
          "description": "The 3D Secure entry electronic commerce indicator",
          "type": "integer"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "enum": [
            "Y",
            "N",
            "U"
          ],
          "type": "string"
        },
        "enrollmentEci": {
          "description": "The 3D Secure entry enrollment eci",
          "type": "string"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related gateway account ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The 3D Secure entry identifier string",
          "readOnly": true
        },
        "payerAuthResponseStatus": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ],
          "type": "string"
        },
        "paymentCardId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related payment card ID"
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "enum": [
            "Y",
            "N"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related Website ID"
        },
        "xid": {
          "description": "The 3D Secure entry transaction Id",
          "type": "string"
        }
      },
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "ThreeDSecureResult": {
      "properties": {
        "authenticated": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "yes",
            "no",
            "not applicable",
            "attempted"
          ],
          "type": "string"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3D Secure",
          "enum": [
            "yes",
            "no",
            "invalid card/timeout",
            "unavailable"
          ],
          "type": "string"
        },
        "liability": {
          "enum": [
            "protected",
            "not protected",
            "protected (attempt)"
          ],
          "type": "string"
        }
      },
      "readOnly": true,
      "required": [
        "enrolled",
        "authenticated",
        "liability"
      ],
      "type": "object"
    },
    "Time": {
      "format": "date-time",
      "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\\+|\\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$",
      "type": "string"
    },
    "TimeUnit": {
      "enum": [
        "second",
        "seconds",
        "minute",
        "minutes",
        "hour",
        "hours",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years"
      ],
      "type": "string"
    },
    "Transaction": {
      "properties": {
        "3ds": {
          "allOf": [
            {
              "$ref": "#/definitions/ThreeDSecureResult"
            }
          ]
        },
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/GatewayAccountLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/PaymentCardLink"
            },
            {
              "$ref": "#/definitions/ParentTransactionLink"
            },
            {
              "$ref": "#/definitions/RetriedTransactionLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 9,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerName": {
          "description": "Acquirer name, available only when transaction use gateway, else null",
          "readOnly": true,
          "type": "string"
        },
        "amount": {
          "description": "The transactions's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Billing Contact ID"
        },
        "bin": {
          "description": "Payment Card BIN",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "childTransactions": {
          "description": "The child transaction IDs",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction created time"
        },
        "currency": {
          "description": "The transactions's currency",
          "readOnly": true,
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID",
          "readOnly": true
        },
        "dcc": {
          "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
          "properties": {
            "base": {
              "description": "Initial amount and currency to convert from",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "outcome": {
              "description": "Dynamic Currency Conversion outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ],
              "type": "string"
            },
            "quote": {
              "description": "Suggested amount and currency to convert to",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "usdMarkup": {
              "description": "The amount of markup translated to USD",
              "format": "double",
              "type": "number"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string"
        },
        "gateway": {
          "description": "The related gateway information",
          "properties": {
            "avsResponse": {
              "description": "The AVS gateway's response",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "cvvResponse": {
              "description": "The CVV gateway's response",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "response": {
              "description": "The gateway's response",
              "properties": {
                "code": {
                  "description": "The gateway's response code",
                  "type": "string"
                },
                "message": {
                  "description": "The gateway's response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw, unmapped gateway's response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw, unmapped gateway's response message",
                  "type": "string"
                },
                "type": {
                  "description": "The gateway's response type",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's Gateway Account ID",
          "readOnly": true
        },
        "gatewayName": {
          "description": "Payment Gateway name, available only when transaction use gateway, else null",
          "readOnly": true,
          "type": "string"
        },
        "gatewayTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The gateway's transaction ID",
          "readOnly": true
        },
        "has3ds": {
          "readOnly": true,
          "type": "boolean"
        },
        "hasDcc": {
          "description": "True if transaction has Dynamic Currency Conversion applied",
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transaction identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The invoice IDs related to transaction",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "isRebill": {
          "readOnly": true,
          "type": "boolean"
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/definitions/Method"
            }
          ],
          "description": "Payment Method"
        },
        "parentTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's parent ID",
          "readOnly": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "processedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction processed time"
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "readOnly": true,
          "type": "integer"
        },
        "redirectUrls": {
          "$ref": "#/definitions/RedirectUrls"
        },
        "result": {
          "description": "Transaction result",
          "enum": [
            "approved",
            "canceled",
            "declined",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retriedTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The retried transaction ID",
          "readOnly": true
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "description": "The position in the sequence of retries",
          "readOnly": true,
          "type": "integer"
        },
        "riskScore": {
          "description": "The transactions's risk score",
          "format": "integer",
          "readOnly": true,
          "type": "number"
        },
        "scheduledTime": {
          "description": "The time the transaction is scheduled for collection",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Transaction status",
          "enum": [
            "completed",
            "connection-error",
            "never-sent",
            "pending",
            "sending",
            "suspended",
            "timeout",
            "waiting-capture",
            "waiting-refund"
          ],
          "readOnly": true,
          "type": "string"
        },
        "subscriptionIds": {
          "description": "The subscription IDs related to transaction",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "description": "Transaction type",
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction updated time"
        },
        "velocity": {
          "description": "The number of transactions by the same customer in the past 24 hours",
          "format": "integer",
          "type": "number"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Website's ID",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "TransactionGatewayLog": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log entry created time"
        },
        "duration": {
          "description": "The request time, msec",
          "type": "integer"
        },
        "headers": {
          "description": "The request headers",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "request": {
          "description": "The request body",
          "type": "string"
        },
        "response": {
          "description": "The response body",
          "type": "string"
        },
        "url": {
          "description": "The request URL",
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "TransactionRefund": {
      "properties": {
        "amount": {
          "description": "Refund amount",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "UPayCard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "key": {
                  "description": "merchant key",
                  "format": "password",
                  "type": "string"
                },
                "receiver_account": {
                  "description": "merchant receiver account",
                  "type": "string"
                },
                "secret": {
                  "description": "merchant secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "receiver_account",
                "key",
                "secret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "UPayCard Gateway config"
    },
    "USAePay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "pin": {
                  "description": "USAePay Gateway pin",
                  "format": "password",
                  "type": "string"
                },
                "sourceKey": {
                  "description": "USAePay Gateway source key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "USAePay Gateway config"
    },
    "UpdatePassword": {
      "properties": {
        "currentPassword": {
          "description": "Current user's password - used when requesting password change",
          "format": "password",
          "type": "string"
        },
        "newPassword": {
          "description": "New user's password - used when requesting password change",
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "availableCurrencies": {
          "description": "An array of reporting currencies enabled for the merchant",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "country": {
          "description": "The user country setting - two letter code",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user created time"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "User's first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The user identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "User's last name",
          "type": "string"
        },
        "loginTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user last login time"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "type": "string"
        },
        "password": {
          "description": "User's password. If not provided, password reset email will be sent",
          "format": "password",
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ],
          "description": "The user's permissions. See the format in example"
        },
        "preferences": {
          "description": "User preferences like timezone, language and many more. This is an object with custom properties.",
          "type": "object"
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "status": {
          "description": "The user status",
          "enum": [
            "active",
            "inactive",
            "pending-confirmation"
          ],
          "readOnly": true,
          "type": "string"
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "format": "url",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user updated time"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "UserPasswordAuthorization": {
      "properties": {
        "password": {
          "format": "password",
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "UserPermissions": {
      "example": [
        {
          "methods": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ],
          "resourceName": "plans"
        },
        {
          "methods": [
            "GET",
            "HEAD"
          ],
          "resourceIds": [
            "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
            "1586f35x-4f6c-483z-a0a9-2c4y21f77a21"
          ],
          "resourceName": "invoices"
        },
        {}
      ],
      "items": {
        "properties": {
          "methods": {
            "items": {
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "resourceIds": {
            "items": {
              "$ref": "#/definitions/ResourceId"
            },
            "type": "array"
          },
          "resourceName": {
            "enum": [
              "3dsecure",
              "api-keys",
              "api-tracking",
              "authentication-options",
              "authentication-tokens",
              "bank-accounts",
              "blacklists",
              "checkout-pages",
              "contacts",
              "coupons",
              "coupons-redemptions",
              "credentials",
              "custom-events",
              "custom-fields",
              "customers",
              "disputes",
              "events",
              "gateway-accounts",
              "invoices",
              "layouts",
              "lead-sources",
              "lists",
              "notes",
              "oct-batch",
              "organizations",
              "password-tokens",
              "payments",
              "payment-cards",
              "payment-cards-migrations",
              "paypal-accounts",
              "plans",
              "reports",
              "reset-sandbox",
              "rulesets",
              "sessions",
              "subscriptions",
              "subscription-tracking",
              "tokens",
              "transactions",
              "users",
              "webhook",
              "webhook-tracking",
              "websites"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "minItems": 1,
      "type": "array"
    },
    "VantivLitle": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantId": {
                  "description": "VantivLitle Gateway merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "VantivLitle Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "VantivLitle Gateway username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/VantivLitleMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "VantivLitle Gateway config"
    },
    "VantivLitleMpis": {
      "description": "VantivLitle Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Walpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantName": {
                  "description": "Walpay Gateway merchant name",
                  "type": "string"
                },
                "merchantPin": {
                  "description": "Walpay Gateway merchant pin",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WalpayMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Walpay Gateway config"
    },
    "WalpayMpis": {
      "description": "WalpayMpis Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Webhook": {
      "properties": {
        "body": {
          "type": "string"
        },
        "credentialHash": {
          "description": "Webhook Credential identifier string.",
          "type": "string"
        },
        "headers": {
          "items": {
            "$ref": "#/definitions/WebhookHeader"
          },
          "type": "array"
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "type": "string"
        },
        "query": {
          "additionalProperties": {
            "example": {
              "param1": "value1",
              "param2": "value2"
            },
            "type": "string"
          },
          "description": "The URI parameters",
          "type": "object"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "method",
        "url"
      ],
      "type": "object"
    },
    "WebhookAuthorization": {
      "discriminator": "type",
      "properties": {
        "type": {
          "default": "none",
          "description": "The authorization type",
          "enum": [
            "none",
            "basic",
            "digest",
            "oauth1"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WebhookCredential": {
      "description": "Webhook credential",
      "properties": {
        "auth": {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        "hash": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "host": {
          "description": "The host name",
          "type": "string"
        }
      },
      "required": [
        "host"
      ],
      "type": "object"
    },
    "WebhookHeader": {
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "value": {
          "example": {
            "Header1": "value1",
            "Header2": "value2;value3"
          },
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "Website": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "checkoutPageUri": {
          "description": "Your own custom URI for this Checkout Page",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Website created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The website's name",
          "type": "string"
        },
        "serviceEmail": {
          "description": "The website's customer service email address",
          "format": "email",
          "type": "string"
        },
        "servicePhone": {
          "description": "The website's customer service phone number",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Website updated time"
        },
        "url": {
          "description": "The website's domain address",
          "type": "string"
        }
      },
      "required": [
        "name",
        "url",
        "servicePhone",
        "serviceEmail"
      ],
      "type": "object"
    },
    "WebsiteLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "website"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "WebsiteWebhook": {
      "properties": {
        "webHookPassword": {
          "description": "Webhook HTTP Authentication Password. An empty string will be returned in the response",
          "type": "string"
        },
        "webHookUrl": {
          "description": "Webhook Url",
          "type": "string"
        },
        "webHookUsername": {
          "description": "Webhook HTTP Authentication Username",
          "type": "string"
        }
      },
      "required": [
        "webHookUrl",
        "webHookUsername",
        "webHookPassword"
      ],
      "type": "object"
    },
    "WebsiteWebhookTracking": {
      "description": "Webhook Tracking Requests.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "eventName": {
          "description": "Event name for which webhook was called",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "nextSendTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Next send time"
        },
        "pushData": {
          "description": "Event's data information JSON-string",
          "type": "string"
        },
        "response": {
          "description": "HTTP code response",
          "type": "integer"
        },
        "sentTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Sent time"
        },
        "status": {
          "description": "Event's status",
          "enum": [
            "fail",
            "success"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "Wirecard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "businessCaseSignature": {
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password",
                  "type": "string"
                },
                "delay": {
                  "description": "Wirecard Gateway delay",
                  "type": "integer"
                },
                "merchantPassword": {
                  "description": "Wirecard Gateway merchant password",
                  "format": "password",
                  "type": "string"
                },
                "merchantUsername": {
                  "description": "Wirecard Gateway merchant username",
                  "type": "string"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessCaseSignature",
                "delay"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WirecardMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Wirecard Gateway config"
    },
    "WirecardMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/WirecardMpis"
        }
      ],
      "description": "Wirecard Integrated"
    },
    "WirecardMpis": {
      "description": "Wirecard Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "WirecardMpi"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "Worldpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantCode": {
                  "description": "Worldpay Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "Worldpay Gateway merchant password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/WorldpayMpis"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Worldpay Gateway config"
    },
    "WorldpayMpis": {
      "description": "Worldpay Mpis",
      "discriminator": "name",
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "Other"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "ach": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "bankAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The bank account identifier string"
            },
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            }
          },
          "required": [
            "bankAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "ACH payment instrument object"
    },
    "and": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical AND",
      "type": "object"
    },
    "auto": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "basic": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "password": {
              "format": "password",
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "type": "object"
        }
      ]
    },
    "between": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "max": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ],
          "type": "object"
        }
      ],
      "description": "Between condition",
      "type": "object"
    },
    "blacklist": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "properties": {
            "ttl": {
              "default": 0,
              "description": "Blacklist TTL. Defaults to zero, meaning blacklist record won't expire ever.",
              "type": "integer"
            },
            "type": {
              "enum": [
                "customer-id",
                "email",
                "fingerprint",
                "ip-address",
                "payment-card-id"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ],
      "description": "Add customer data to blacklist"
    },
    "cancel-scheduled-payments": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": ""
    },
    "cash": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Cash payment instrument object"
    },
    "compare": {
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ],
      "type": "object"
    },
    "cram-md5": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "properties": {
            "duration": {
              "description": "The number of the units",
              "minimum": 1,
              "type": "integer"
            },
            "unit": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "required": [
            "duration",
            "unit"
          ],
          "type": "object"
        }
      ]
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "properties": {
            "day": {
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n",
              "maximum": 31,
              "minimum": 1,
              "type": "integer"
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ]
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "properties": {
            "day": {
              "$ref": "#/definitions/DayOfWeek"
            },
            "time": {
              "$ref": "#/definitions/Time"
            },
            "week": {
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ],
              "type": "string"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ]
    },
    "digest": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "password": {
              "format": "password",
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "type": "object"
        }
      ]
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount discount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount discount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "discounts-per-redemption": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "discounts-per-redemption restrictions"
    },
    "equals": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Equals condition",
      "type": "object"
    },
    "fixed": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "amount": {
              "description": "Discount amount",
              "format": "double",
              "type": "number"
            },
            "currency": {
              "description": "Discount currency",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon fixed amount discount"
    },
    "gateway-account-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "properties": {
            "weightedList": {
              "example": "[\n  {\"gatewayAccountId\": \"my_gateway_account_1\", \"weight\": 80},\n  {\"gatewayAccountId\": \"my_gateway_account_2\", \"weight\": 20}\n]\n",
              "items": {
                "properties": {
                  "gatewayAccountId": {
                    "$ref": "#/definitions/ResourceId"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayAccountId",
                  "weight"
                ],
                "type": "object"
              },
              "minimum": 0,
              "type": "array",
              "uniqueItems": true
            }
          },
          "required": [
            "weightedList"
          ],
          "type": "object"
        }
      ]
    },
    "gateway-acquirer-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "properties": {
            "weightedList": {
              "example": "[\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"AIB\", \"weight\": 80},\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"B+S\", \"weight\": 20}\n",
              "items": {
                "properties": {
                  "acquirerName": {
                    "$ref": "#/definitions/AcquirerName"
                  },
                  "gatewayName": {
                    "$ref": "#/definitions/GatewayName"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayName",
                  "acquirerName",
                  "weight"
                ],
                "type": "object"
              },
              "minimum": 0,
              "type": "array",
              "uniqueItems": true
            }
          },
          "required": [
            "weightedList"
          ],
          "type": "object"
        }
      ]
    },
    "gt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than condition",
      "type": "object"
    },
    "gte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than or equals condition",
      "type": "object"
    },
    "guess-payment-card-expiration": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": ""
    },
    "iCheque": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "iCheque Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "iCheque Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "iCheque Gateway config"
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "in": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "path",
            "values"
          ],
          "type": "object"
        }
      ],
      "description": "In condition",
      "type": "object"
    },
    "logical": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object"
    },
    "logical-not": {
      "example": {
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        },
        "operation": "not"
      },
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "type": "object"
    },
    "login": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "lt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than condition",
      "type": "object"
    },
    "lte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than or equals condition",
      "type": "object"
    },
    "minimum-order-amount": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "amount": {
              "description": "Minimum order quantity",
              "type": "integer"
            },
            "currency": {
              "description": "Minimum order currency",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "minimum-order-amount restrictions"
    },
    "none": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/WebhookAuthorization"
        }
      ]
    },
    "not": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ],
      "description": "Logical NOT",
      "type": "object"
    },
    "oauth1": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "consumerKey": {
              "type": "string"
            },
            "consumerSecret": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "tokenSecret": {
              "type": "string"
            }
          },
          "required": [
            "consumerKey",
            "consumerSecret",
            "token",
            "tokenSecret"
          ],
          "type": "object"
        }
      ]
    },
    "or": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical OR",
      "type": "object"
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "payment-card": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            },
            "paymentCardId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment card identifier string"
            }
          },
          "required": [
            "paymentCardId"
          ],
          "type": "object"
        }
      ],
      "description": "Payment card payment instrument object"
    },
    "paypal": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            },
            "payPalAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The PayPal account identifier string"
            }
          },
          "required": [
            "payPalAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal payment instrument object"
    },
    "percent": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "value": {
              "description": "Discount percent",
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon percent discount"
    },
    "pick-gateway-account": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "properties": {
            "pickInstruction": {
              "$ref": "#/definitions/GatewayAccountPickInstruction"
            }
          },
          "required": [
            "pickInstruction"
          ],
          "type": "object"
        }
      ],
      "description": ""
    },
    "plain": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "redemptions-per-customer": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction value",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "Quantity per Customer restrictions"
    },
    "restrict-to-invoices": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "invoiceIds": {
              "description": "Invoice IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "invoiceIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-invoices restrictions"
    },
    "restrict-to-plans": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "planIds": {
              "description": "Plan IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "planIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-plans restrictions"
    },
    "restrict-to-subscriptions": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "subscriptionIds": {
              "description": "Subscription IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "subscriptionIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-subscriptions restrictions"
    },
    "schedule-payment": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "description": "The calculation instruction of scheduled time for payment",
          "properties": {
            "amountPolicy": {
              "enum": [
                "balance-outstanding",
                "invoice-total"
              ],
              "type": "string"
            },
            "scheduleInstruction": {
              "$ref": "#/definitions/CommonScheduleInstruction"
            }
          },
          "required": [
            "scheduleInstruction",
            "amountPolicy"
          ],
          "type": "object"
        }
      ],
      "description": ""
    },
    "schedule-payment-retry": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/PaymentRetry"
        }
      ],
      "description": ""
    },
    "send-email": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ],
      "description": ""
    },
    "stop-subscriptions": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": "Stop active subscriptions"
    },
    "total-redemptions": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Total redemptions quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "total-redemptions restrictions"
    },
    "trigger-webhook": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/Webhook"
        }
      ],
      "description": ""
    },
    "vegaaH": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "password": {
                  "description": "vegaaH Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "vegaaH Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "vegaaH Gateway config"
    }
  },
  "actions": [
    {
      "id": "3dsecure.get",
      "title": "3dsecure.get",
      "description": "Retrieve a list of ThreeDSecure entries",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ThreeDSecure"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "3dsecure.post",
      "title": "3dsecure.post",
      "description": "Create a ThreeDSecure entry\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ThreeDSecure"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ThreeDSecure"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "3dsecure.id.get",
      "title": "3dsecure.id.get",
      "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ThreeDSecure"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "activation.token.post",
      "title": "activation.token.post",
      "description": "Sends a token to activate user account\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "api_keys.get",
      "title": "api_keys.get",
      "description": "Retrieve a list of api keys\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ApiKey"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "api_keys.post",
      "title": "api_keys.post",
      "description": "Create an api key\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ApiKey"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ApiKey"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "api_keys.id.delete",
      "title": "api_keys.id.delete",
      "description": "Delete api key with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "api_keys.id.get",
      "title": "api_keys.id.get",
      "description": "Retrieve api key with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ApiKey"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "api_keys.id.put",
      "title": "api_keys.id.put",
      "description": "Create or update api key with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ApiKey"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ApiKey"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "attachments.get",
      "title": "attachments.get",
      "description": "Retrieve a list of Attachments\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "attachments.post",
      "title": "attachments.post",
      "description": "Create an Attachment\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Attachment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "attachments.id.delete",
      "title": "attachments.id.delete",
      "description": "Delete the Attachment with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "attachments.id.get",
      "title": "attachments.id.get",
      "description": "Retrieve a Attachment with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Attachment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "attachments.id.put",
      "title": "attachments.id.put",
      "description": "Update the Attachment with predefined ID\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Attachment"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Attachment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_options.get",
      "title": "authentication_options.get",
      "description": "Read current authentication options\n",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/AuthenticationOptions"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_options.put",
      "title": "authentication_options.put",
      "description": "Change options\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AuthenticationOptions"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AuthenticationOptions"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_tokens.get",
      "title": "authentication_tokens.get",
      "description": "Retrieve a list of auth tokens\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/AuthenticationToken"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_tokens.post",
      "title": "authentication_tokens.post",
      "description": "Login a user (customer)\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/AuthenticationToken"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AuthenticationToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_tokens.token.delete",
      "title": "authentication_tokens.token.delete",
      "description": "Logout a user\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "authentication_tokens.token.get",
      "title": "authentication_tokens.token.get",
      "description": "Verify an authentication token\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AuthenticationToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "bank_accounts.get",
      "title": "bank_accounts.get",
      "description": "Retrieve a list of Bank Accounts\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/BankAccount"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "bank_accounts.post",
      "title": "bank_accounts.post",
      "description": "Create a Bank Account\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/BankAccount"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BankAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "bank_accounts.id.get",
      "title": "bank_accounts.id.get",
      "description": "Retrieve a Bank Account with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BankAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "bank_accounts.id.put",
      "title": "bank_accounts.id.put",
      "description": "Create or update a BankAccount with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/BankAccount"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BankAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "bank_accounts.id.deactivation.post",
      "title": "bank_accounts.id.deactivation.post",
      "description": "Deactivate a Bank Account\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BankAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "blacklists.get",
      "title": "blacklists.get",
      "description": "Retrieve a list of blacklists\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Blacklist"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "blacklists.post",
      "title": "blacklists.post",
      "description": "Create a blacklist\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Blacklist"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Blacklist"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "blacklists.id.delete",
      "title": "blacklists.id.delete",
      "description": "Delete a blacklist with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "blacklists.id.get",
      "title": "blacklists.id.get",
      "description": "Retrieve a blacklist with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Blacklist"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "blacklists.id.put",
      "title": "blacklists.id.put",
      "description": "Create a blacklist with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Blacklist"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Blacklist"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "checkout_pages.get",
      "title": "checkout_pages.get",
      "description": "Retrieve a list of checkout pages\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CheckoutPage"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "checkout_pages.post",
      "title": "checkout_pages.post",
      "description": "Create a Checkout Page\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CheckoutPage"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CheckoutPage"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "checkout_pages.id.delete",
      "title": "checkout_pages.id.delete",
      "description": "Delete a Checkout Page with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "checkout_pages.id.get",
      "title": "checkout_pages.id.get",
      "description": "Retrieve a Checkout Page with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CheckoutPage"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "checkout_pages.id.put",
      "title": "checkout_pages.id.put",
      "description": "Create or update a Checkout Page with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CheckoutPage"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CheckoutPage"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "contacts.get",
      "title": "contacts.get",
      "description": "Retrieve a list of contacts\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "contacts.post",
      "title": "contacts.post",
      "description": "Create a contact\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Contact"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Contact"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "contacts.id.get",
      "title": "contacts.id.get",
      "description": "Retrieve a contact with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Contact"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "contacts.id.put",
      "title": "contacts.id.put",
      "description": "Create or update a contact with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Contact"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Contact"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons.get",
      "title": "coupons.get",
      "description": "Retrieve a list of coupons\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "criteria": {
            "type": "string",
            "description": "The json criteria for collection"
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Coupon"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons.post",
      "title": "coupons.post",
      "description": "Create a coupon\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Coupon"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Coupon"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons_redemptions.get",
      "title": "coupons_redemptions.get",
      "description": "Retrieve a list of coupon redemptions",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "criteria": {
            "type": "string",
            "description": "The json criteria for collection"
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CouponRedemption"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons_redemptions.post",
      "title": "coupons_redemptions.post",
      "description": "Redeem a coupon\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CouponRedemption"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CouponRedemption"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons_redemptions.id.get",
      "title": "coupons_redemptions.id.get",
      "description": "Retrieve a coupon redemption with specified identifier string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CouponRedemption"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons_redemptions.id.cancel.post",
      "title": "coupons_redemptions.id.cancel.post",
      "description": "Cancel a coupon redemption",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons.redemptionCode.get",
      "title": "coupons.redemptionCode.get",
      "description": "Retrieve a coupon with specified redemption code string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "redemptionCode": {
            "type": "string",
            "description": "The Coupon's redemption code"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Coupon"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "coupons.redemptionCode.put",
      "title": "coupons.redemptionCode.put",
      "description": "Create or update a coupon with predefined redemption code\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Coupon"
          },
          "redemptionCode": {
            "type": "string",
            "description": "The Coupon's redemption code"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Coupon"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credential_hashes.emails.post",
      "title": "credential_hashes.emails.post",
      "description": "Create an email credential\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/SmtpCredential"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SmtpCredential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credential_hashes.emails.hash.get",
      "title": "credential_hashes.emails.hash.get",
      "description": "Retrieve an email credential with specified token identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SmtpCredential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credential_hashes.webhooks.post",
      "title": "credential_hashes.webhooks.post",
      "description": "Create a webhook credential\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/WebhookCredential"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/WebhookCredential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credential_hashes.webhooks.hash.get",
      "title": "credential_hashes.webhooks.hash.get",
      "description": "Retrieve a webhook credential with specified token identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/WebhookCredential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credentials.get",
      "title": "credentials.get",
      "description": "Retrieve a list of credentials\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Credential"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credentials.post",
      "title": "credentials.post",
      "description": "Create a credential\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Credential"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Credential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credentials.id.delete",
      "title": "credentials.id.delete",
      "description": "Delete a credential with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credentials.id.get",
      "title": "credentials.id.get",
      "description": "Retrieve a credential with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Credential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "credentials.id.put",
      "title": "credentials.id.put",
      "description": "Create or update a credential with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Credential"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Credential"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.get",
      "title": "custom_events.get",
      "description": "Retrieve a list of custom events\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CustomEvent"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.post",
      "title": "custom_events.post",
      "description": "Create a custom event\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CustomEvent"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomEvent"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.delete",
      "title": "custom_events.id.delete",
      "description": "Delete a custom event with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.get",
      "title": "custom_events.id.get",
      "description": "Retrieve a custom event with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomEvent"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.put",
      "title": "custom_events.id.put",
      "description": "Create a custom event with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CustomEvent"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomEvent"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.rules.get",
      "title": "custom_events.id.rules.get",
      "description": "Retrieve a list of rules for custom event",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSet"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.rules.put",
      "title": "custom_events.id.rules.put",
      "description": "Update the rules for custom event",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RuleSet"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSet"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.rules.history.get",
      "title": "custom_events.id.rules.history.get",
      "description": "Retrieve the change history of the set of rules for the selected custom event.\nThe history is updated each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          },
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/RuleSetHistoryItem"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.rules.history.version.get",
      "title": "custom_events.id.rules.history.version.get",
      "description": "Retrieve the record from the change history of the set of rules for the selected custom event.\nA history record is created each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          },
          "version": {
            "type": "integer",
            "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
            "minimum": 1
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSetHistoryItem"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_events.id.rules.versions.version.get",
      "title": "custom_events.id.rules.versions.version.get",
      "description": "Retrieve the version of the selected set of rules for the selected custom event.\nThe versions are created each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          },
          "version": {
            "type": "integer",
            "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
            "minimum": 1
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSetVersion"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_fields.resource.get",
      "title": "custom_fields.resource.get",
      "description": "Retrieve a schema of Custom Fields for the given resource type\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "The resource type string",
            "enum": [
              "customers",
              "payment-cards",
              "subscriptions",
              "payments",
              "websites",
              "contacts",
              "products"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "description": "The list of custom fields",
        "items": {
          "$ref": "#/definitions/CustomField"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_fields.resource.name.delete",
      "title": "custom_fields.resource.name.delete",
      "description": "Delete a custom field by its name\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "The resource type string",
            "enum": [
              "customers",
              "payment-cards",
              "subscriptions",
              "payments",
              "websites",
              "contacts",
              "products"
            ]
          },
          "name": {
            "type": "string",
            "description": "The custom field's identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_fields.resource.name.get",
      "title": "custom_fields.resource.name.get",
      "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "The resource type string",
            "enum": [
              "customers",
              "payment-cards",
              "subscriptions",
              "payments",
              "websites",
              "contacts",
              "products"
            ]
          },
          "name": {
            "type": "string",
            "description": "The custom field's identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomField"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "custom_fields.resource.name.put",
      "title": "custom_fields.resource.name.put",
      "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CustomField"
          },
          "resource": {
            "type": "string",
            "description": "The resource type string",
            "enum": [
              "customers",
              "payment-cards",
              "subscriptions",
              "payments",
              "websites",
              "contacts",
              "products"
            ]
          },
          "name": {
            "type": "string",
            "description": "The custom field's identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomField"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.get",
      "title": "customers.get",
      "description": "Retrieve a list of customers\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Customer"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.post",
      "title": "customers.post",
      "description": "Create a customer\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Customer"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Customer"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.id.get",
      "title": "customers.id.get",
      "description": "Retrieve a customer with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Customer"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.id.put",
      "title": "customers.id.put",
      "description": "Create a customer with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Customer"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Customer"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.id.lead_source.delete",
      "title": "customers.id.lead_source.delete",
      "description": "Delete a Lead Source that belongs to a certain customer\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.id.lead_source.get",
      "title": "customers.id.lead_source.get",
      "description": "Retrieve a Lead Source of given customer\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "customers.id.lead_source.put",
      "title": "customers.id.lead_source.put",
      "description": "Create a Lead Source for a customer\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/LeadSource"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "disputes.get",
      "title": "disputes.get",
      "description": "Retrieve a list of disputes\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Dispute"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "disputes.post",
      "title": "disputes.post",
      "description": "Create a dispute\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Dispute"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Dispute"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "disputes.id.get",
      "title": "disputes.id.get",
      "description": "Retrieve a dispute with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Dispute"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "disputes.id.put",
      "title": "disputes.id.put",
      "description": "Create or update a Dispute with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Dispute"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Dispute"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.get",
      "title": "events.get",
      "description": "Retrieve a list of existing events",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SystemEvent"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.get",
      "title": "events.eventType.get",
      "description": "Retrieve the event information",
      "inputSchema": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The event type"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SystemEvent"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.rules.get",
      "title": "events.eventType.rules.get",
      "description": "Retrieve a list of rules for event",
      "inputSchema": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The event type"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSet"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.rules.put",
      "title": "events.eventType.rules.put",
      "description": "Update the rules for event",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RuleSet"
          },
          "eventType": {
            "type": "string",
            "description": "The event type"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSet"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.rules.history.get",
      "title": "events.eventType.rules.history.get",
      "description": "Retrieve the change history of the selected set of rules.\nThe history is updated each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          },
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "eventType": {
            "type": "string",
            "description": "The event type"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/RuleSetHistoryItem"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.rules.history.version.get",
      "title": "events.eventType.rules.history.version.get",
      "description": "Retrieve the record from the change history of the selected set of rules.\nA history record is created each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "eventType": {
            "type": "string",
            "description": "The event type"
          },
          "version": {
            "type": "integer",
            "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
            "minimum": 1
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSetHistoryItem"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "events.eventType.rules.versions.version.get",
      "title": "events.eventType.rules.versions.version.get",
      "description": "Retrieve the version of the selected set of rules.\nThe versions are created each time you change the rules.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "eventType": {
            "type": "string",
            "description": "The event type"
          },
          "version": {
            "type": "integer",
            "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
            "minimum": 1
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RuleSetVersion"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.get",
      "title": "files.get",
      "description": "Retrieve a list of files\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "q": {
            "type": "string",
            "description": "The partial search of the text fields."
          },
          "expand": {
            "type": "string",
            "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
          },
          "fields": {
            "type": "string",
            "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/File"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.post",
      "title": "files.post",
      "description": "Create a file\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "properties": {
              "url": {
                "description": "The file URL",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/File"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.id.delete",
      "title": "files.id.delete",
      "description": "Delete the File with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.id.get",
      "title": "files.id.get",
      "description": "Retrieve a File with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/File"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.id.put",
      "title": "files.id.put",
      "description": "Update the File with predefined ID\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/File"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/File"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.id.download.get",
      "title": "files.id.download.get",
      "description": "Retrieve a file\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "readOnly": true,
        "type": "string"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "files.id.downloadextension.get",
      "title": "files.id.downloadextension.get",
      "description": "Used for converting images server-side\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          },
          "extension": {
            "type": "string",
            "description": "File extension which also indicates the desired file format",
            "enum": [
              ".png",
              ".jpg"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "readOnly": true,
        "type": "string"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "forgot_password.post",
      "title": "forgot_password.post",
      "description": "Sends an email with a link containing a token to reset user password\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Email"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.get",
      "title": "gateway_accounts.get",
      "description": "Retrieve a list of gateway accounts\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/GatewayAccount"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.post",
      "title": "gateway_accounts.post",
      "description": "Create a Gateway Account\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GatewayAccount"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GatewayAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.id.delete",
      "title": "gateway_accounts.id.delete",
      "description": "Delete a Gateway Account with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.id.get",
      "title": "gateway_accounts.id.get",
      "description": "Retrieve a Gateway Account with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GatewayAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.id.patch",
      "title": "gateway_accounts.id.patch",
      "description": "Update a GatewayAccount with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GatewayAccount"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GatewayAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "gateway_accounts.id.put",
      "title": "gateway_accounts.id.put",
      "description": "Create or update a GatewayAccount with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GatewayAccount"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GatewayAccount"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.get",
      "title": "invoices.get",
      "description": "Retrieve a list of invoices\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Invoice"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.post",
      "title": "invoices.post",
      "description": "Create an invoice\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Invoice"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.get",
      "title": "invoices.id.get",
      "description": "Retrieve an invoice with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "application/pdf"
            ]
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.put",
      "title": "invoices.id.put",
      "description": "Create or update an invoice with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Invoice"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.abandon.post",
      "title": "invoices.id.abandon.post",
      "description": "Abandon an invoice with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.issue.post",
      "title": "invoices.id.issue.post",
      "description": "Issue an invoice with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/InvoiceIssue"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.items.get",
      "title": "invoices.id.items.get",
      "description": "Retrieve an invoice items with specified invoice identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/InvoiceItem"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.items.post",
      "title": "invoices.id.items.post",
      "description": "Create an invoice item\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/InvoiceItem"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/InvoiceItem"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.lead_source.delete",
      "title": "invoices.id.lead_source.delete",
      "description": "Delete a Lead Source that belongs to a certain invoice\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.lead_source.get",
      "title": "invoices.id.lead_source.get",
      "description": "Retrieve a Lead Source of given invoice\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.lead_source.put",
      "title": "invoices.id.lead_source.put",
      "description": "Create a Lead Source for an invoice\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/LeadSource"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "invoices.id.void.post",
      "title": "invoices.id.void.post",
      "description": "Void an invoice with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Invoice"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "layouts.get",
      "title": "layouts.get",
      "description": "Retrieve a layout list\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Layout"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "layouts.post",
      "title": "layouts.post",
      "description": "Create a layout\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Layout"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Layout"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "layouts.id.delete",
      "title": "layouts.id.delete",
      "description": "Delete a layout with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "layouts.id.get",
      "title": "layouts.id.get",
      "description": "Retrieve a layout with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Layout"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "layouts.id.put",
      "title": "layouts.id.put",
      "description": "Create or update a layout with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Layout"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Layout"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.get",
      "title": "lists.get",
      "description": "Retrieve a collection of Lists\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "criteria": {
            "type": "string",
            "description": "The json criteria for collection"
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/List"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.post",
      "title": "lists.post",
      "description": "Create a List\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/List"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.id.delete",
      "title": "lists.id.delete",
      "description": "Delete a list with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.id.get",
      "title": "lists.id.get",
      "description": "Retrieve latest version of List with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.id.put",
      "title": "lists.id.put",
      "description": "Create or update a list with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/List"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "lists.id.version.get",
      "title": "lists.id.version.get",
      "description": "Retrieve List's exact version",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          },
          "version": {
            "type": "integer",
            "description": "List version",
            "minimum": 1
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "notes.get",
      "title": "notes.get",
      "description": "Retrieve a list of notes\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Note"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "notes.post",
      "title": "notes.post",
      "description": "Create a note\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "notes.id.get",
      "title": "notes.id.get",
      "description": "Retrieve a note with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "notes.id.put",
      "title": "notes.id.put",
      "description": "Create or update a note with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Note"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "organizations.get",
      "title": "organizations.get",
      "description": "Retrieve a list of organizations\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Organization"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "organizations.post",
      "title": "organizations.post",
      "description": "Create a organization\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Organization"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Organization"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "organizations.id.delete",
      "title": "organizations.id.delete",
      "description": "Delete a organization with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "organizations.id.get",
      "title": "organizations.id.get",
      "description": "Retrieve a organization with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Organization"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "organizations.id.put",
      "title": "organizations.id.put",
      "description": "Create or update a organization with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Organization"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Organization"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "password_tokens.get",
      "title": "password_tokens.get",
      "description": "Retrieve a list of tokens\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ResetPasswordToken"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "password_tokens.post",
      "title": "password_tokens.post",
      "description": "Create a Reset Password Token\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ResetPasswordToken"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ResetPasswordToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "password_tokens.id.delete",
      "title": "password_tokens.id.delete",
      "description": "Delete a Reset Password Token with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "password_tokens.id.get",
      "title": "password_tokens.id.get",
      "description": "Retrieve a Reset Password Token with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ResetPasswordToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.get",
      "title": "payment_cards.get",
      "description": "Retrieve a list of Payments Cards\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/PaymentCard"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.post",
      "title": "payment_cards.post",
      "description": "Create a Payment Card\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PaymentCard"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCard"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards_migrations.get",
      "title": "payment_cards_migrations.get",
      "description": "Retrieve a list of payment cards ready for migration\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/PaymentCard"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards_migrations.migrate.post",
      "title": "payment_cards_migrations.migrate.post",
      "description": "Migrate payment cards to another gateway account\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PaymentCardMigrationRequest"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCardMigrationResponse"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.id.get",
      "title": "payment_cards.id.get",
      "description": "Retrieve a Payment Card with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCard"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.id.put",
      "title": "payment_cards.id.put",
      "description": "Create a payment card with predefined ID",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PaymentCard"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCard"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.id.authorization.post",
      "title": "payment_cards.id.authorization.post",
      "description": "Authorize a Payment Card\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "properties": {
              "amount": {
                "description": "Amount",
                "format": "double",
                "type": "number"
              },
              "currency": {
                "description": "Currency (three letter code)",
                "type": "string"
              },
              "gatewayAccountId": {
                "description": "The Gateway account ID",
                "type": "string"
              },
              "websiteId": {
                "description": "The Website ID",
                "type": "string"
              }
            },
            "required": [
              "websiteId",
              "currency"
            ],
            "type": "object"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCard"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payment_cards.id.deactivation.post",
      "title": "payment_cards.id.deactivation.post",
      "description": "Deactivate a Payment Card\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentCard"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payments.get",
      "title": "payments.get",
      "description": "Retrieve a payment list\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Payment"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payments.post",
      "title": "payments.post",
      "description": "Create a payment\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Payment"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Payment"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payments.id.get",
      "title": "payments.id.get",
      "description": "Retrieve a payment with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Payment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "payments.id.put",
      "title": "payments.id.put",
      "description": "Make a payment with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Payment"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Payment"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "plans.get",
      "title": "plans.get",
      "description": "Retrieve a list of plans\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Plan"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "plans.post",
      "title": "plans.post",
      "description": "Create a plan\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Plan"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Plan"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "plans.id.delete",
      "title": "plans.id.delete",
      "description": "Delete a Plan with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "plans.id.get",
      "title": "plans.id.get",
      "description": "Retrieve a plan with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Plan"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "plans.id.put",
      "title": "plans.id.put",
      "description": "Create or update a Plan with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Plan"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Plan"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "previews.rule_actions.send_email.post",
      "title": "previews.rule_actions.send_email.post",
      "description": "Send a test email\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/SendTestEmail"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SendTestEmail"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "previews.rule_actions.trigger_webhook.post",
      "title": "previews.rule_actions.trigger_webhook.post",
      "description": "Trigger a test webhook\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/SendPreviewWebhook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SendPreviewWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "previews.webhooks.post",
      "title": "previews.webhooks.post",
      "description": "Trigger a test webhook\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GlobalWebhook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "products.get",
      "title": "products.get",
      "description": "Retrieve a list of products\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Product"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "products.post",
      "title": "products.post",
      "description": "Create a Product\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Product"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Product"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "products.id.delete",
      "title": "products.id.delete",
      "description": "Delete a product with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "products.id.get",
      "title": "products.id.get",
      "description": "Retrieve a product with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Product"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "products.id.put",
      "title": "products.id.put",
      "description": "Create a product with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Product"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Product"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "profile.get",
      "title": "profile.get",
      "description": "Retrieve user's profile\n",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/Profile"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "profile.put",
      "title": "profile.put",
      "description": "Update user's profile\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Profile"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Profile"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.custom_events.get",
      "title": "queue.custom_events.get",
      "description": "Retrieve a list of scheduled custom events\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CustomEvent"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.custom_events.id.delete",
      "title": "queue.custom_events.id.delete",
      "description": "Delete a scheduled custom event with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.custom_events.id.get",
      "title": "queue.custom_events.id.get",
      "description": "Retrieve a scheduled custom event with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CustomEvent"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.payments.get",
      "title": "queue.payments.get",
      "description": "Retrieve a scheduled payment list\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Payment"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.payments.id.get",
      "title": "queue.payments.id.get",
      "description": "Retrieve a payment with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Payment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.payments.id.put",
      "title": "queue.payments.id.put",
      "description": "Update pending payment",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Payment"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Payment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "queue.payments.id.cancel.post",
      "title": "queue.payments.id.cancel.post",
      "description": "Cancel a scheduled payment with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Payment"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "sessions.get",
      "title": "sessions.get",
      "description": "Retrieve a list of sessions\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Session"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "sessions.post",
      "title": "sessions.post",
      "description": "Create a session\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Session"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Session"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "sessions.id.delete",
      "title": "sessions.id.delete",
      "description": "Delete a Session with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "sessions.id.get",
      "title": "sessions.id.get",
      "description": "Retrieve a Session with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Session"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "sessions.id.put",
      "title": "sessions.id.put",
      "description": "Create or update a Session with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Session"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Session"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "shipping_zones.get",
      "title": "shipping_zones.get",
      "description": "Retrieve a list of shipping zones\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ShippingZone"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "shipping_zones.post",
      "title": "shipping_zones.post",
      "description": "Create a Shipping Zone\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ShippingZone"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ShippingZone"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "shipping_zones.id.delete",
      "title": "shipping_zones.id.delete",
      "description": "Delete a shipping zone with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "shipping_zones.id.get",
      "title": "shipping_zones.id.get",
      "description": "Retrieve a shipping zone with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ShippingZone"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "shipping_zones.id.put",
      "title": "shipping_zones.id.put",
      "description": "Create a shipping zone with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ShippingZone"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ShippingZone"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "signin.post",
      "title": "signin.post",
      "description": "Create a session with email and password\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Signin"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Session"
      }
    },
    {
      "id": "signup.post",
      "title": "signup.post",
      "description": "Creates a new user and sends an email confirmation\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Signup"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "status.get",
      "title": "status.get",
      "description": "Retrieve API current status\n",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/Status"
      }
    },
    {
      "id": "subscriptions.get",
      "title": "subscriptions.get",
      "description": "Retrieve a list of subscriptions\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Subscription"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.post",
      "title": "subscriptions.post",
      "description": "Create a subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Subscription"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.get",
      "title": "subscriptions.id.get",
      "description": "Retrieve a subscription with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Subscription"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.put",
      "title": "subscriptions.id.put",
      "description": "Create or update a subscription with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Subscription"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Subscription"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.cancel.post",
      "title": "subscriptions.id.cancel.post",
      "description": "Cancel a subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/SubscriptionCancel"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Subscription"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.lead_source.delete",
      "title": "subscriptions.id.lead_source.delete",
      "description": "Delete a Lead Source that belongs to a certain Subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.lead_source.get",
      "title": "subscriptions.id.lead_source.get",
      "description": "Retrieve a Lead Source of given subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.lead_source.put",
      "title": "subscriptions.id.lead_source.put",
      "description": "Create a Lead Source for a Subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/LeadSource"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "subscriptions.id.switch.post",
      "title": "subscriptions.id.switch.post",
      "description": "Switch a subscription\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/SubscriptionSwitch"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Subscription"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tax_categories.get",
      "title": "tax_categories.get",
      "description": "Retrieve a list of tax categories\n",
      "inputSchema": {},
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/TaxCategory"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tokens.get",
      "title": "tokens.get",
      "description": "Retrieve a list of tokens\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/PaymentToken"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tokens.post",
      "title": "tokens.post",
      "description": "Create a token\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PaymentToken"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tokens.token.get",
      "title": "tokens.token.get",
      "description": "Retrieve a token with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tokens.token.expiration.post",
      "title": "tokens.token.expiration.post",
      "description": "Expire a token\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/PaymentToken"
          },
          "token": {
            "type": "string",
            "description": "The token identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PaymentToken"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.api.get",
      "title": "tracking.api.get",
      "description": "Retrieve a list of tracking API logs",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ApiTracking"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.api.id.get",
      "title": "tracking.api.id.get",
      "description": "Retrieve a tracking API log with specified identifier string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ApiTracking"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.lists.get",
      "title": "tracking.lists.get",
      "description": "Retrieve Lists changes history",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/List"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.subscriptions.get",
      "title": "tracking.subscriptions.get",
      "description": "Retrieve a list of tracking subscription logs",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SubscriptionTracking"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.subscriptions.id.get",
      "title": "tracking.subscriptions.id.get",
      "description": "Retrieve a tracking subscription log with specified identifier string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SubscriptionTracking"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.website_webhooks.get",
      "title": "tracking.website_webhooks.get",
      "description": "Retrieve a list of tracking webhook notifications",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/WebsiteWebhookTracking"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "tracking.website_webhooks.id.get",
      "title": "tracking.website_webhooks.id.get",
      "description": "Retrieve a tracking webhook notification with specified identifier string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/WebsiteWebhookTracking"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.get",
      "title": "transactions.get",
      "description": "Retrieve a list of transactions\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "filter": {
            "type": "string",
            "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
          },
          "sort": {
            "type": "array",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Transaction"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.get",
      "title": "transactions.id.get",
      "description": "Retrieve a Transaction with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Transaction"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.gateway_logs.get",
      "title": "transactions.id.gateway_logs.get",
      "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/TransactionGatewayLog"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.lead_source.delete",
      "title": "transactions.id.lead_source.delete",
      "description": "Delete a Lead Source that belongs to a certain transaction\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.lead_source.get",
      "title": "transactions.id.lead_source.get",
      "description": "Retrieve a Lead Source of given transaction\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.lead_source.put",
      "title": "transactions.id.lead_source.put",
      "description": "Create a Lead Source for a transaction\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/LeadSource"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LeadSource"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "transactions.id.refund.post",
      "title": "transactions.id.refund.post",
      "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/TransactionRefund"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Transaction"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.get",
      "title": "users.get",
      "description": "Retrieve a list of users\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.post",
      "title": "users.post",
      "description": "Create an user\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/User"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.reset_password.token.post",
      "title": "users.reset_password.token.post",
      "description": "Reset user password\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ResetPassword"
          },
          "token": {
            "type": "string",
            "description": "The token string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.id.delete",
      "title": "users.id.delete",
      "description": "Delete user with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.id.get",
      "title": "users.id.get",
      "description": "Retrieve user with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.id.put",
      "title": "users.id.put",
      "description": "Create or update user with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/User"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.id.password.post",
      "title": "users.id.password.post",
      "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdatePassword"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "users.id.totp_reset.post",
      "title": "users.id.totp_reset.post",
      "description": "Reset (renew) totpSecret\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "webhooks.get",
      "title": "webhooks.get",
      "description": "Retrieve a list of webhooks\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/GlobalWebhook"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "webhooks.post",
      "title": "webhooks.post",
      "description": "Create a webhook\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GlobalWebhook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GlobalWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "webhooks.id.get",
      "title": "webhooks.id.get",
      "description": "Retrieve a webhook with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GlobalWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "webhooks.id.put",
      "title": "webhooks.id.put",
      "description": "Create or update a webhook with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/GlobalWebhook"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GlobalWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.get",
      "title": "websites.get",
      "description": "Retrieve a list of websites\n",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The collection items limit",
            "maximum": 1000,
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "description": "The collection items offset",
            "minimum": 0
          },
          "Accept": {
            "type": "string",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/Website"
        },
        "type": "array"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.post",
      "title": "websites.post",
      "description": "Create a website\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Website"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Website"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.delete",
      "title": "websites.id.delete",
      "description": "Delete a website with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.get",
      "title": "websites.id.get",
      "description": "Retrieve a website with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Website"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.put",
      "title": "websites.id.put",
      "description": "Create or update a website with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/Website"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Website"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.webhook.delete",
      "title": "websites.id.webhook.delete",
      "description": "Delete a webhook that belongs to a website with predefined ID\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {},
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.webhook.get",
      "title": "websites.id.webhook.get",
      "description": "Retrieve a webhook for website with specified identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/WebsiteWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    },
    {
      "id": "websites.id.webhook.put",
      "title": "websites.id.webhook.put",
      "description": "Create or update a webhook for website with predefined identifier string\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/WebsiteWebhook"
          },
          "id": {
            "type": "string",
            "description": "The resource identifier string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/WebsiteWebhook"
      },
      "security": {
        "rebilly": {
          "integration": "rebilly"
        }
      }
    }
  ]
}