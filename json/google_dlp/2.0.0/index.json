{
  "id": "google_dlp",
  "title": "DLP",
  "description": "The Google Data Loss Prevention API provides methods for detection of privacy-sensitive fragments in text, images, and Google Cloud Platform storage repositories.",
  "security": {
    "google_dlp": {
      "integration": "google_dlp",
      "fields": {
        "access_token": "An OAuth access token",
        "refresh_token": "An OAuth refresh token (optional)",
        "client_id": "An OAuth client ID (optional)",
        "client_secret": "An OAuth client secret (optional)",
        "redirect_uri": "The callback URL for your application"
      },
      "oauth": {
        "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
        "description": "Oauth 2.0 accessCode authentication",
        "flow": "accessCode",
        "scopes": {
          "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services"
        },
        "tokenUrl": "https://accounts.google.com/o/oauth2/token",
        "type": "oauth2"
      }
    }
  },
  "logo": {
    "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
  },
  "tags": [
    "google"
  ],
  "definitions": {
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "properties": {},
      "type": "object"
    },
    "CategoryDescription": {
      "description": "Info Type Category description.",
      "properties": {
        "displayName": {
          "description": "Human readable form of the category name.",
          "type": "string"
        },
        "name": {
          "description": "Internal name of the category.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloudStorageKey": {
      "description": "Record key for a finding in a Cloud Storage file.",
      "properties": {
        "filePath": {
          "description": "Path to the file.",
          "type": "string"
        },
        "startOffset": {
          "description": "Byte offset of the referenced data in the file.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloudStorageOptions": {
      "description": "Options defining a file or a set of files (path ending with *) within\na Google Cloud Storage bucket.",
      "properties": {
        "fileSet": {
          "$ref": "#/definitions/FileSet"
        }
      },
      "type": "object"
    },
    "ContentItem": {
      "description": "Container structure for the content to inspect.",
      "properties": {
        "data": {
          "description": "Content data to inspect or redact.",
          "format": "byte",
          "type": "string"
        },
        "type": {
          "description": "Type of the content, as defined in Content-Type HTTP header.\nSupported types are: all \"text\" types, octet streams, PNG images,\nJPEG images.",
          "type": "string"
        },
        "value": {
          "description": "String data to inspect or redact.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateInspectOperationRequest": {
      "description": "Request for scheduling a scan of a data subset from a Google Platform data\nrepository.",
      "properties": {
        "inspectConfig": {
          "$ref": "#/definitions/InspectConfig",
          "description": "Configuration for the inspector."
        },
        "storageConfig": {
          "$ref": "#/definitions/StorageConfig",
          "description": "Specification of the data set to process."
        }
      },
      "type": "object"
    },
    "DatastoreKey": {
      "description": "Record key for a finding in Cloud Datastore.",
      "properties": {
        "entityKey": {
          "$ref": "#/definitions/Key",
          "description": "Datastore entity key."
        }
      },
      "type": "object"
    },
    "DatastoreOptions": {
      "description": "Options defining a data set within Google Cloud Datastore.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/KindExpression",
          "description": "The kind to process."
        },
        "partitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "A partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty."
        },
        "projection": {
          "description": "Properties to scan. If none are specified, all properties will be scanned\nby default.",
          "items": {
            "$ref": "#/definitions/Projection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object"
    },
    "FieldId": {
      "description": "General identifier of a data field in a storage service.",
      "properties": {
        "columnName": {
          "description": "Column name describing the field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileSet": {
      "description": "Set of files to scan.",
      "properties": {
        "url": {
          "description": "The url, in the format gs://<bucket>/<path>. Trailing wildcard in the\npath is allowed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Finding": {
      "description": "Container structure describing a single finding within a string or image.",
      "properties": {
        "createTime": {
          "description": "Timestamp when finding was detected.",
          "format": "google-datetime",
          "type": "string"
        },
        "infoType": {
          "$ref": "#/definitions/InfoType",
          "description": "The specific type of info the string might be."
        },
        "likelihood": {
          "description": "Estimate of how likely it is that the info_type is correct.",
          "enum": [
            "LIKELIHOOD_UNSPECIFIED",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Location of the info found."
        },
        "quote": {
          "description": "The specific string that may be potentially sensitive info.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageLocation": {
      "description": "Bounding box encompassing detected text within an image.",
      "properties": {
        "height": {
          "description": "Height of the bounding box in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "left": {
          "description": "Left coordinate of the bounding box. (0,0) is upper left.",
          "format": "int32",
          "type": "integer"
        },
        "top": {
          "description": "Top coordinate of the bounding box. (0,0) is upper left.",
          "format": "int32",
          "type": "integer"
        },
        "width": {
          "description": "Width of the bounding box in pixels.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InfoType": {
      "description": "Type of information detected by the API.",
      "properties": {
        "name": {
          "description": "Name of the information type, provided by the API call ListInfoTypes.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InfoTypeDescription": {
      "description": "Info type description.",
      "properties": {
        "categories": {
          "description": "List of categories this info type belongs to.",
          "items": {
            "$ref": "#/definitions/CategoryDescription"
          },
          "type": "array"
        },
        "displayName": {
          "description": "Human readable form of the info type name.",
          "type": "string"
        },
        "name": {
          "description": "Internal name of the info type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InspectConfig": {
      "description": "Configuration description of the scanning process.\nWhen used with redactContent only info_types and min_likelihood are currently\nused.",
      "properties": {
        "excludeTypes": {
          "description": "When true, exclude type information of the findings.",
          "type": "boolean"
        },
        "includeQuote": {
          "description": "When true, a contextual quote from the data that triggered a finding will\nbe included in the response; see Finding.quote.",
          "type": "boolean"
        },
        "infoTypes": {
          "description": "Restrict what info_types to look for. The values must correspond to\nInfoType values returned by ListInfoTypes or found in documentation.\nEmpty info_types runs all enabled detectors.",
          "items": {
            "$ref": "#/definitions/InfoType"
          },
          "type": "array"
        },
        "maxFindings": {
          "description": "Limit the number of findings per content item.",
          "format": "int32",
          "type": "integer"
        },
        "minLikelihood": {
          "description": "Only return findings equal or above this threshold.",
          "enum": [
            "LIKELIHOOD_UNSPECIFIED",
            "VERY_UNLIKELY",
            "UNLIKELY",
            "POSSIBLE",
            "LIKELY",
            "VERY_LIKELY"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "InspectContentRequest": {
      "description": "Request to search for potentially sensitive info in a list of items.",
      "properties": {
        "inspectConfig": {
          "$ref": "#/definitions/InspectConfig",
          "description": "Configuration for the inspector."
        },
        "items": {
          "description": "The list of items to inspect. Items in a single request are\nconsidered \"related\" unless inspect_config.independent_inputs is true.\nUp to 100 are allowed per request.",
          "items": {
            "$ref": "#/definitions/ContentItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "InspectContentResponse": {
      "description": "Results of inspecting a list of items.",
      "properties": {
        "results": {
          "description": "Each content_item from the request will have a result in this list, in the\nsame order as the request.",
          "items": {
            "$ref": "#/definitions/InspectResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "InspectResult": {
      "description": "All the findings for a single scanned item.",
      "properties": {
        "findings": {
          "description": "List of findings for an item.",
          "items": {
            "$ref": "#/definitions/Finding"
          },
          "type": "array"
        },
        "findingsTruncated": {
          "description": "If true, then this item might have more findings than were returned,\nand the findings returned are an arbitrary subset of all findings.\nThe findings list might be truncated because the input items were too\nlarge, or because the server reached the maximum amount of resources\nallowed for a single API call. For best results, divide the input into\nsmaller batches.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Key": {
      "description": "A unique identifier for a Datastore entity.\nIf a key's partition ID or any of its path kinds or names are\nreserved/read-only, the key is reserved/read-only.\nA reserved/read-only key is forbidden in certain documented contexts.",
      "properties": {
        "partitionId": {
          "$ref": "#/definitions/PartitionId",
          "description": "Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition."
        },
        "path": {
          "description": "The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element's _ancestors_.\n\nA path can never be empty, and a path can have at most 100 elements.",
          "items": {
            "$ref": "#/definitions/PathElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "KindExpression": {
      "description": "A representation of a Datastore kind.",
      "properties": {
        "name": {
          "description": "The name of the kind.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListInfoTypesResponse": {
      "description": "Response to the ListInfoTypes request.",
      "properties": {
        "infoTypes": {
          "description": "Set of sensitive info types belonging to a category.",
          "items": {
            "$ref": "#/definitions/InfoTypeDescription"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListInspectFindingsResponse": {
      "description": "Response to the ListInspectFindings request.",
      "properties": {
        "nextPageToken": {
          "description": "If not empty, indicates that there may be more results that match the\nrequest; this value should be passed in a new `ListInspectFindingsRequest`.",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/InspectResult",
          "description": "The results."
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListRootCategoriesResponse": {
      "description": "Response for ListRootCategories request.",
      "properties": {
        "categories": {
          "description": "List of all into type categories supported by the API.",
          "items": {
            "$ref": "#/definitions/CategoryDescription"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "Specifies the location of a finding within its source item.",
      "properties": {
        "byteRange": {
          "$ref": "#/definitions/Range",
          "description": "Zero-based byte offsets within a content item."
        },
        "codepointRange": {
          "$ref": "#/definitions/Range",
          "description": "Character offsets within a content item, included when content type\nis a text. Default charset assumed to be UTF-8."
        },
        "fieldId": {
          "$ref": "#/definitions/FieldId",
          "description": "Field id of the field containing the finding."
        },
        "imageBoxes": {
          "description": "Location within an image's pixels.",
          "items": {
            "$ref": "#/definitions/ImageLocation"
          },
          "type": "array"
        },
        "recordKey": {
          "$ref": "#/definitions/RecordKey",
          "description": "Key of the finding."
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "This field will contain an `InspectOperationMetdata` object.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, The `name` should have the format of `inspect/operations/<identifier>`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "This field will contain an `InspectOperationResult` object.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "PartitionId": {
      "description": "Datastore partition ID.\nA partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty.\n\nA partition ID contains several dimensions:\nproject ID and namespace ID.",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database to which the entities\nbelong.",
          "type": "string"
        },
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        },
        "projectId": {
          "description": "The ID of the project to which the entities belong.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PathElement": {
      "description": "A (kind, ID/name) pair used to construct a key path.\n\nIf either name or ID is set, the element is complete.\nIf neither is set, the element is incomplete.",
      "properties": {
        "id": {
          "description": "The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the entity.\nA kind matching regex `__.*__` is reserved/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity.\nA name matching regex `__.*__` is reserved/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Projection": {
      "description": "A representation of a Datastore property in a projection.",
      "properties": {
        "property": {
          "$ref": "#/definitions/PropertyReference",
          "description": "The property to project."
        }
      },
      "type": "object"
    },
    "PropertyReference": {
      "description": "A reference to a property relative to the Datastore kind expressions.",
      "properties": {
        "name": {
          "description": "The name of the property.\nIf name includes \".\"s, it may be interpreted as a property name path.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Range": {
      "description": "Generic half-open interval [start, end)",
      "properties": {
        "end": {
          "description": "Index of the last character of the range (exclusive).",
          "format": "int64",
          "type": "string"
        },
        "start": {
          "description": "Index of the first character of the range (inclusive).",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecordKey": {
      "description": "Message for a unique key indicating a record that contains a finding.",
      "properties": {
        "cloudStorageKey": {
          "$ref": "#/definitions/CloudStorageKey"
        },
        "datastoreKey": {
          "$ref": "#/definitions/DatastoreKey"
        }
      },
      "type": "object"
    },
    "RedactContentRequest": {
      "description": "Request to search for potentially sensitive info in a list of items\nand replace it with a default or provided content.",
      "properties": {
        "inspectConfig": {
          "$ref": "#/definitions/InspectConfig",
          "description": "Configuration for the inspector."
        },
        "items": {
          "description": "The list of items to inspect. Up to 100 are allowed per request.",
          "items": {
            "$ref": "#/definitions/ContentItem"
          },
          "type": "array"
        },
        "replaceConfigs": {
          "description": "The strings to replace findings with. Must specify at least one.",
          "items": {
            "$ref": "#/definitions/ReplaceConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RedactContentResponse": {
      "description": "Results of deidentifying a list of items.",
      "properties": {
        "items": {
          "description": "The redacted content.",
          "items": {
            "$ref": "#/definitions/ContentItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReplaceConfig": {
      "properties": {
        "infoType": {
          "$ref": "#/definitions/InfoType",
          "description": "Type of information to replace. Only one ReplaceConfig per info_type\nshould be provided. If ReplaceConfig does not have an info_type, we'll\nmatch it against all info_types that are found but not specified in\nanother ReplaceConfig."
        },
        "replaceWith": {
          "description": "Content replacing sensitive information of given type. Max 256 chars.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageConfig": {
      "description": "Shared message indicating Cloud storage type.",
      "properties": {
        "cloudStorageOptions": {
          "$ref": "#/definitions/CloudStorageOptions",
          "description": "Google Cloud Storage options specification."
        },
        "datastoreOptions": {
          "$ref": "#/definitions/DatastoreOptions",
          "description": "Google Cloud Datastore options specification."
        }
      },
      "type": "object"
    }
  },
  "actions": [
    {
      "id": "oauthCallback",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "code": {
            "title": "code",
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "outputSchema": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "oauthRefresh",
      "title": "",
      "description": "",
      "inputSchema": {},
      "outputSchema": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "content.inspect",
      "title": "content.inspect",
      "description": "Find potentially sensitive info in a list of strings.\nThis method has limits on input size, processing time, and output size.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "body": {
            "$ref": "#/definitions/InspectContentRequest"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/InspectContentResponse"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "content.redact",
      "title": "content.redact",
      "description": "Redact potentially sensitive info from a list of strings.\nThis method has limits on input size, processing time, and output size.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "body": {
            "$ref": "#/definitions/RedactContentRequest"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RedactContentResponse"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "inspect.operations.create",
      "title": "inspect.operations.create",
      "description": "Schedule a job scanning content in a Google Cloud Platform data repository.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateInspectOperationRequest"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Operation"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "rootCategories.list",
      "title": "rootCategories.list",
      "description": "Returns the list of root categories of sensitive information.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Optional language code for localized friendly category names.\nIf omitted or if localized strings are not available,\nen-US strings will be returned."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListRootCategoriesResponse"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "rootCategories.infoTypes.list",
      "title": "rootCategories.infoTypes.list",
      "description": "Returns sensitive information types for given category.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category name as returned by ListRootCategories."
          },
          "languageCode": {
            "type": "string",
            "description": "Optional BCP-47 language code for localized info type friendly\nnames. If omitted, or if localized strings are not available,\nen-US strings will be returned."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "category"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListInfoTypesResponse"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "inspect.operations.delete",
      "title": "inspect.operations.delete",
      "description": "This method is not supported and the server returns `UNIMPLEMENTED`.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the operation resource to be deleted."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Empty"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "inspect.operations.get",
      "title": "inspect.operations.get",
      "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the operation resource."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Operation"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "inspect.results.findings.list",
      "title": "inspect.results.findings.list",
      "description": "Returns list of results for given inspect operation result set id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Identifier of the results set returned as metadata of\nthe longrunning operation created by a call to CreateInspectOperation.\nShould be in the format of `inspect/results/{id}."
          },
          "pageSize": {
            "type": "integer",
            "description": "Maximum number of results to return.\nIf 0, the implementation will select a reasonable value."
          },
          "pageToken": {
            "type": "string",
            "description": "The value returned by the last `ListInspectFindingsResponse`; indicates\nthat this is a continuation of a prior `ListInspectFindings` call, and that\nthe system should return the next page of data."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListInspectFindingsResponse"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    },
    {
      "id": "inspect.operations.cancel",
      "title": "inspect.operations.cancel",
      "description": "Cancels an operation. Use the get method to check whether the cancellation succeeded or whether the operation completed despite cancellation.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CancelOperationRequest"
          },
          "name": {
            "type": "string",
            "description": "The name of the operation resource to be cancelled."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Empty"
      },
      "security": {
        "google_dlp": {
          "integration": "google_dlp"
        }
      }
    }
  ]
}