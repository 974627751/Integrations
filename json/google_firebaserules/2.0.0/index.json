{
  "id": "google_firebaserules",
  "title": "Firebase Rules",
  "description": "Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.\n",
  "security": {
    "google_firebaserules": {
      "integration": "google_firebaserules",
      "fields": {
        "access_token": "An OAuth access token",
        "refresh_token": "An OAuth refresh token (optional)",
        "client_id": "An OAuth client ID (optional)",
        "client_secret": "An OAuth client secret (optional)"
      },
      "oauth": {
        "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
        "description": "Oauth 2.0 accessCode authentication",
        "flow": "accessCode",
        "scopes": {
          "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services",
          "https://www.googleapis.com/auth/firebase": "View and administer all your Firebase data and settings",
          "https://www.googleapis.com/auth/firebase.readonly": "View all your Firebase data and settings"
        },
        "tokenUrl": "https://accounts.google.com/o/oauth2/token",
        "type": "oauth2"
      }
    }
  },
  "logo": {
    "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
  },
  "tags": [
    "google"
  ],
  "definitions": {
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object"
    },
    "File": {
      "description": "`File` containing source content.",
      "properties": {
        "content": {
          "description": "Textual Content.",
          "type": "string"
        },
        "fingerprint": {
          "description": "Fingerprint (e.g. github sha) associated with the `File`.",
          "format": "byte",
          "type": "string"
        },
        "name": {
          "description": "File name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FunctionCall": {
      "description": "Represents a service-defined function call that was invoked during test\nexecution.",
      "properties": {
        "args": {
          "description": "The arguments that were provided to the function.",
          "items": {},
          "type": "array"
        },
        "function": {
          "description": "Name of the function invoked.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Issue": {
      "description": "Issues include warnings, errors, and deprecation notices.",
      "properties": {
        "description": {
          "description": "Short error description.",
          "type": "string"
        },
        "severity": {
          "description": "The severity of the issue.",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "DEPRECATION",
            "WARNING",
            "ERROR"
          ],
          "type": "string"
        },
        "sourcePosition": {
          "$ref": "#/definitions/SourcePosition",
          "description": "Position of the issue in the `Source`."
        }
      },
      "type": "object"
    },
    "ListReleasesResponse": {
      "description": "The response for FirebaseRulesService.ListReleases.",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token to retrieve the next page of results. If the value is\nempty, no further results remain.",
          "type": "string"
        },
        "releases": {
          "description": "List of `Release` instances.",
          "items": {
            "$ref": "#/definitions/Release"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListRulesetsResponse": {
      "description": "The response for FirebaseRulesService.ListRulesets.",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token to retrieve the next page of results. If the value is\nempty, no further results remain.",
          "type": "string"
        },
        "rulesets": {
          "description": "List of `Ruleset` instances.",
          "items": {
            "$ref": "#/definitions/Ruleset"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Release": {
      "description": "`Release` is a named reference to a `Ruleset`. Once a `Release` refers to a\n`Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.",
      "properties": {
        "createTime": {
          "description": "Time the release was created.\nOutput only.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "description": "Resource name for the `Release`.\n\n`Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2`\nwhich affords developers a great deal of flexibility in mapping the name\nto the style that best fits their existing development practices. For\nexample, a name could refer to an environment, an app, a version, or some\ncombination of three.\n\nIn the table below, for the project name `projects/foo`, the following\nrelative release paths show how flat and structured names might be chosen\nto match a desired development / deployment strategy.\n\nUse Case     | Flat Name           | Structured Name\n-------------|---------------------|----------------\nEnvironments | releases/qa         | releases/qa\nApps         | releases/app1_qa    | releases/app1/qa\nVersions     | releases/app1_v2_qa | releases/app1/v2/qa\n\nThe delimiter between the release name path elements can be almost anything\nand it should work equally well with the release name list filter, but in\nmany ways the structured paths provide a clearer picture of the\nrelationship between `Release` instances.\n\nFormat: `projects/{project_id}/releases/{release_id}`",
          "type": "string"
        },
        "rulesetName": {
          "description": "Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must\nexist the `Release` to be created.",
          "type": "string"
        },
        "updateTime": {
          "description": "Time the release was updated.\nOutput only.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Ruleset": {
      "description": "`Ruleset` is an immutable copy of `Source` with a globally unique identifier\nand a creation time.",
      "properties": {
        "createTime": {
          "description": "Time the `Ruleset` was created.\nOutput only.",
          "format": "google-datetime",
          "type": "string"
        },
        "name": {
          "description": "Name of the `Ruleset`. The ruleset_id is auto generated by the service.\nFormat: `projects/{project_id}/rulesets/{ruleset_id}`\nOutput only.",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Source",
          "description": "`Source` for the `Ruleset`."
        }
      },
      "type": "object"
    },
    "Source": {
      "description": "`Source` is one or more `File` messages comprising a logical set of rules.",
      "properties": {
        "files": {
          "description": "`File` set constituting the `Source` bundle.",
          "items": {
            "$ref": "#/definitions/File"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SourcePosition": {
      "description": "Position in the `Source` content including its line, column number, and an\nindex of the `File` in the `Source` message. Used for debug purposes.",
      "properties": {
        "column": {
          "description": "First column on the source line associated with the source fragment.",
          "format": "int32",
          "type": "integer"
        },
        "fileName": {
          "description": "Name of the `File`.",
          "type": "string"
        },
        "line": {
          "description": "Line number of the source fragment. 1-based.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TestResult": {
      "description": "Test result message containing the state of the test as well as a\ndescription and source position for test failures.",
      "properties": {
        "debugMessages": {
          "description": "Debug messages related to test execution issues encountered during\nevaluation.\n\nDebug messages may be related to too many or too few invocations of\nfunction mocks or to runtime errors that occur during evaluation.\n\nFor example: ```Unable to read variable [name: \"resource\"]```",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "errorPosition": {
          "$ref": "#/definitions/SourcePosition",
          "description": "Position in the `Source` or `Ruleset` where the principle runtime error\noccurs.\n\nEvaluation of an expression may result in an error. Rules are deny by\ndefault, so a `DENY` expectation when an error is generated is valid.\nWhen there is a `DENY` with an error, the `SourcePosition` is returned.\n\nE.g. `error_position { line: 19 column: 37 }`"
        },
        "functionCalls": {
          "description": "The set of function calls made to service-defined methods.\n\nFunction calls are included in the order in which they are encountered\nduring evaluation, are provided for both mocked and unmocked functions,\nand included on the response regardless of the test `state`.",
          "items": {
            "$ref": "#/definitions/FunctionCall"
          },
          "type": "array"
        },
        "state": {
          "description": "State of the test.",
          "enum": [
            "STATE_UNSPECIFIED",
            "SUCCESS",
            "FAILURE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TestRulesetRequest": {
      "description": "The request for FirebaseRulesService.TestRuleset.",
      "properties": {
        "source": {
          "$ref": "#/definitions/Source",
          "description": "Optional `Source` to be checked for correctness.\n\nThis field must not be set when the resource name refers to a `Ruleset`."
        }
      },
      "type": "object"
    },
    "TestRulesetResponse": {
      "description": "The response for FirebaseRulesService.TestRuleset.",
      "properties": {
        "issues": {
          "description": "Syntactic and semantic `Source` issues of varying severity. Issues of\n`ERROR` severity will prevent tests from executing.",
          "items": {
            "$ref": "#/definitions/Issue"
          },
          "type": "array"
        },
        "testResults": {
          "description": "The set of test results given the test cases in the `TestSuite`.\nThe results will appear in the same order as the test cases appear in the\n`TestSuite`.",
          "items": {
            "$ref": "#/definitions/TestResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "actions": [
    {
      "id": "projects.releases.delete",
      "title": "projects.releases.delete",
      "description": "Delete a `Release` by resource name.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name for the `Release` to delete.\n\nFormat: `projects/{project_id}/releases/{release_id}`"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Empty"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.releases.get",
      "title": "projects.releases.get",
      "description": "Get a `Release` by name.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name of the `Release`.\n\nFormat: `projects/{project_id}/releases/{release_id}`"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Release"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.releases.update",
      "title": "projects.releases.update",
      "description": "Update a `Release`.\n\nOnly updates to the `ruleset_name` and `test_suite_name` fields will be\nhonored. `Release` rename is not supported. To create a `Release` use the\nCreateRelease method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name for the `Release`.\n\n`Release` names may be structured `app1/prod/v2` or flat `app1_prod_v2`\nwhich affords developers a great deal of flexibility in mapping the name\nto the style that best fits their existing development practices. For\nexample, a name could refer to an environment, an app, a version, or some\ncombination of three.\n\nIn the table below, for the project name `projects/foo`, the following\nrelative release paths show how flat and structured names might be chosen\nto match a desired development / deployment strategy.\n\nUse Case     | Flat Name           | Structured Name\n-------------|---------------------|----------------\nEnvironments | releases/qa         | releases/qa\nApps         | releases/app1_qa    | releases/app1/qa\nVersions     | releases/app1_v2_qa | releases/app1/v2/qa\n\nThe delimiter between the release name path elements can be almost anything\nand it should work equally well with the release name list filter, but in\nmany ways the structured paths provide a clearer picture of the\nrelationship between `Release` instances.\n\nFormat: `projects/{project_id}/releases/{release_id}`"
          },
          "body": {
            "$ref": "#/definitions/Release"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Release"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.releases.list",
      "title": "projects.releases.list",
      "description": "List the `Release` values for a project. This list may optionally be\nfiltered by `Release` name, `Ruleset` name, `TestSuite` name, or any\ncombination thereof.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "`Release` filter. The list method supports filters with restrictions on the\n`Release.name`, `Release.ruleset_name`, and `Release.test_suite_name`.\n\nExample 1: A filter of 'name=prod*' might return `Release`s with names\nwithin 'projects/foo' prefixed with 'prod':\n\nName                          | Ruleset Name\n------------------------------|-------------\nprojects/foo/releases/prod    | projects/foo/rulesets/uuid1234\nprojects/foo/releases/prod/v1 | projects/foo/rulesets/uuid1234\nprojects/foo/releases/prod/v2 | projects/foo/rulesets/uuid8888\n\nExample 2: A filter of `name=prod* ruleset_name=uuid1234` would return only\n`Release` instances for 'projects/foo' with names prefixed with 'prod'\nreferring to the same `Ruleset` name of 'uuid1234':\n\nName                          | Ruleset Name\n------------------------------|-------------\nprojects/foo/releases/prod    | projects/foo/rulesets/1234\nprojects/foo/releases/prod/v1 | projects/foo/rulesets/1234\n\nIn the examples, the filter parameters refer to the search filters are\nrelative to the project. Fully qualified prefixed may also be used. e.g.\n`test_suite_name=projects/foo/testsuites/uuid1`"
          },
          "name": {
            "type": "string",
            "description": "Resource name for the project.\n\nFormat: `projects/{project_id}`"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size to load. Maximum of 100. Defaults to 10.\nNote: `page_size` is just a hint and the service may choose to load fewer\nthan `page_size` results due to the size of the output. To traverse all of\nthe releases, the caller should iterate until the `page_token` on the\nresponse is empty."
          },
          "pageToken": {
            "type": "string",
            "description": "Next page token for the next batch of `Release` instances."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListReleasesResponse"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.releases.create",
      "title": "projects.releases.create",
      "description": "Create a `Release`.\n\nRelease names should reflect the developer's deployment practices. For\nexample, the release name may include the environment name, application\nname, application version, or any other name meaningful to the developer.\nOnce a `Release` refers to a `Ruleset`, the rules can be enforced by\nFirebase Rules-enabled services.\n\nMore than one `Release` may be 'live' concurrently. Consider the following\nthree `Release` names for `projects/foo` and the `Ruleset` to which they\nrefer.\n\nRelease Name                    | Ruleset Name\n--------------------------------|-------------\nprojects/foo/releases/prod      | projects/foo/rulesets/uuid123\nprojects/foo/releases/prod/beta | projects/foo/rulesets/uuid123\nprojects/foo/releases/prod/v23  | projects/foo/rulesets/uuid456\n\nThe table reflects the `Ruleset` rollout in progress. The `prod` and\n`prod/beta` releases refer to the same `Ruleset`. However, `prod/v23`\nrefers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be\nupdated using the UpdateRelease method.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name for the project which owns this `Release`.\n\nFormat: `projects/{project_id}`"
          },
          "body": {
            "$ref": "#/definitions/Release"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Release"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.rulesets.list",
      "title": "projects.rulesets.list",
      "description": "List `Ruleset` metadata only and optionally filter the results by `Ruleset`\nname.\n\nThe full `Source` contents of a `Ruleset` may be retrieved with\nGetRuleset.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "`Ruleset` filter. The list method supports filters with restrictions on\n`Ruleset.name`.\n\nFilters on `Ruleset.create_time` should use the `date` function which\nparses strings that conform to the RFC 3339 date/time specifications.\n\nExample: `create_time > date(\"2017-01-01\") AND name=UUID-*`"
          },
          "name": {
            "type": "string",
            "description": "Resource name for the project.\n\nFormat: `projects/{project_id}`"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size to load. Maximum of 100. Defaults to 10.\nNote: `page_size` is just a hint and the service may choose to load less\nthan `page_size` due to the size of the output. To traverse all of the\nreleases, caller should iterate until the `page_token` is empty."
          },
          "pageToken": {
            "type": "string",
            "description": "Next page token for loading the next batch of `Ruleset` instances."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListRulesetsResponse"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.rulesets.create",
      "title": "projects.rulesets.create",
      "description": "Create a `Ruleset` from `Source`.\n\nThe `Ruleset` is given a unique generated name which is returned to the\ncaller. `Source` containing syntactic or semantics errors will result in an\nerror response indicating the first error encountered. For a detailed view\nof `Source` issues, use TestRuleset.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name for Project which owns this `Ruleset`.\n\nFormat: `projects/{project_id}`"
          },
          "body": {
            "$ref": "#/definitions/Ruleset"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Ruleset"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    },
    {
      "id": "projects.test",
      "title": "projects.test",
      "description": "Test `Source` for syntactic and semantic correctness. Issues present, if\nany, will be returned to the caller with a description, severity, and\nsource location.\n\nThe test method may be executed with `Source` or a `Ruleset` name.\nPassing `Source` is useful for unit testing new rules. Passing a `Ruleset`\nname is useful for regression testing an existing rule.\n\nThe following is an example of `Source` that permits users to upload images\nto a bucket bearing their user id and matching the correct metadata:\n\n_*Example*_\n\n    // Users are allowed to subscribe and unsubscribe to the blog.\n    service firebase.storage {\n      match /users/{userId}/images/{imageName} {\n          allow write: if userId == request.auth.uid\n              && (imageName.matches('*.png$')\n              || imageName.matches('*.jpg$'))\n              && resource.mimeType.matches('^image/')\n      }\n    }",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/TestRulesetRequest"
          },
          "name": {
            "type": "string",
            "description": "Tests may either provide `source` or a `Ruleset` resource name.\n\nFor tests against `source`, the resource name must refer to the project:\nFormat: `projects/{project_id}`\n\nFor tests against a `Ruleset`, this must be the `Ruleset` resource name:\nFormat: `projects/{project_id}/rulesets/{ruleset_id}`"
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/TestRulesetResponse"
      },
      "security": {
        "google_firebaserules": {
          "integration": "google_firebaserules"
        }
      }
    }
  ]
}