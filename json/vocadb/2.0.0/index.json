{
  "id": "vocadb",
  "title": "VocaDB",
  "security": {},
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/vocadb.jpeg"
  },
  "actionCount": 110,
  "definitions": {
    "ActivityEntryForApiContract": {
      "properties": {
        "archivedVersion": {
          "$ref": "#/definitions/ArchivedObjectVersionForApiContract"
        },
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "editEvent": {
          "enum": [
            "Created",
            "Updated",
            "Deleted",
            "Restored"
          ],
          "type": "string"
        },
        "entry": {
          "$ref": "#/definitions/EntryForApiContract"
        }
      },
      "type": "object",
      "title": "ActivityEntryForApiContract"
    },
    "AdvancedSearchFilter": {
      "properties": {
        "filterType": {
          "enum": [
            "Nothing",
            "ArtistType",
            "WebLink",
            "HasUserAccount",
            "RootVoicebank",
            "VoiceProvider",
            "HasStoreLink",
            "HasTracks",
            "NoCoverPicture",
            "HasAlbum",
            "HasOriginalMedia",
            "HasMedia",
            "HasMultipleVoicebanks",
            "HasPublishDate",
            "Lyrics",
            "LyricsContent"
          ],
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "param": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "AdvancedSearchFilter"
    },
    "AlbumContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "coverPictureMime": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ratingAverage": {
          "format": "double",
          "type": "number"
        },
        "ratingCount": {
          "format": "int32",
          "type": "integer"
        },
        "releaseDate": {
          "$ref": "#/definitions/OptionalDateTimeContract"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "AlbumContract"
    },
    "AlbumDiscPropertiesContract": {
      "properties": {
        "discNumber": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mediaType": {
          "enum": [
            "Audio",
            "Video"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "AlbumDiscPropertiesContract"
    },
    "AlbumForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForAlbumForApiContract"
          },
          "type": "array"
        },
        "barcode": {
          "type": "string"
        },
        "catalogNumber": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Other"
          ],
          "type": "string"
        },
        "discs": {
          "items": {
            "$ref": "#/definitions/AlbumDiscPropertiesContract"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "identifiers": {
          "items": {
            "$ref": "#/definitions/AlbumIdentifierContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pvs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "ratingAverage": {
          "format": "double",
          "type": "number"
        },
        "ratingCount": {
          "format": "int32",
          "type": "integer"
        },
        "releaseDate": {
          "$ref": "#/definitions/OptionalDateTimeContract"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "tracks": {
          "items": {
            "$ref": "#/definitions/SongInAlbumForApiContract"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "AlbumForApiContract"
    },
    "AlbumForUserForApiContract": {
      "properties": {
        "album": {
          "$ref": "#/definitions/AlbumForApiContract"
        },
        "mediaType": {
          "enum": [
            "PhysicalDisc",
            "DigitalDownload",
            "Other"
          ],
          "type": "string"
        },
        "purchaseStatus": {
          "enum": [
            "Nothing",
            "Wishlisted",
            "Ordered",
            "Owned"
          ],
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "AlbumForUserForApiContract"
    },
    "AlbumIdentifierContract": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "AlbumIdentifierContract"
    },
    "ArchivedObjectVersionForApiContract": {
      "properties": {
        "changedFields": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "notes": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "ArchivedObjectVersionForApiContract"
    },
    "ArchivedWebLinkContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "ArchivedWebLinkContract"
    },
    "ArtistContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pictureMime": {
          "type": "string"
        },
        "releaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "ArtistContract"
    },
    "ArtistForAlbumForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "categories": {
          "enum": [
            "Nothing",
            "Vocalist",
            "Producer",
            "Animator",
            "Label",
            "Circle",
            "Other",
            "Band",
            "Illustrator"
          ],
          "type": "string"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        },
        "isSupport": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "ArtistForAlbumForApiContract"
    },
    "ArtistForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistLinks": {
          "items": {
            "$ref": "#/definitions/ArtistForArtistForApiContract"
          },
          "type": "array"
        },
        "artistLinksReverse": {
          "items": {
            "$ref": "#/definitions/ArtistForArtistForApiContract"
          },
          "type": "array"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band"
          ],
          "type": "string"
        },
        "baseVoicebank": {
          "$ref": "#/definitions/ArtistContract"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pictureMime": {
          "type": "string"
        },
        "relations": {
          "$ref": "#/definitions/ArtistRelationsForApi"
        },
        "releaseDate": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ArtistForApiContract"
    },
    "ArtistForArtistForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "linkType": {
          "enum": [
            "CharacterDesigner",
            "Group",
            "Illustrator",
            "Manager",
            "VoiceProvider"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "ArtistForArtistForApiContract"
    },
    "ArtistForEventContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Dancer",
            "DJ",
            "Instrumentalist",
            "Organizer",
            "Promoter",
            "VJ",
            "Vocalist",
            "VoiceManipulator",
            "OtherPerformer",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Dancer",
            "DJ",
            "Instrumentalist",
            "Organizer",
            "Promoter",
            "VJ",
            "Vocalist",
            "VoiceManipulator",
            "OtherPerformer",
            "Other"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "ArtistForEventContract"
    },
    "ArtistForSongContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistContract"
        },
        "categories": {
          "enum": [
            "Nothing",
            "Vocalist",
            "Producer",
            "Animator",
            "Label",
            "Circle",
            "Other",
            "Band",
            "Illustrator"
          ],
          "type": "string"
        },
        "effectiveRoles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isSupport": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "enum": [
            "Default",
            "Animator",
            "Arranger",
            "Composer",
            "Distributor",
            "Illustrator",
            "Instrumentalist",
            "Lyricist",
            "Mastering",
            "Publisher",
            "Vocalist",
            "VoiceManipulator",
            "Other",
            "Mixer",
            "Chorus",
            "Encoder",
            "VocalDataProvider"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "ArtistForSongContract"
    },
    "ArtistForUserForApiContract": {
      "properties": {
        "artist": {
          "$ref": "#/definitions/ArtistForApiContract"
        }
      },
      "type": "object",
      "title": "ArtistForUserForApiContract"
    },
    "ArtistRelationsForApi": {
      "properties": {
        "latestAlbums": {
          "items": {
            "$ref": "#/definitions/AlbumContract"
          },
          "type": "array"
        },
        "latestEvents": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "latestSongs": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "popularAlbums": {
          "items": {
            "$ref": "#/definitions/AlbumContract"
          },
          "type": "array"
        },
        "popularSongs": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ArtistRelationsForApi"
    },
    "CommentForApiContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "authorName": {
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "entry": {
          "$ref": "#/definitions/EntryRefContract"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "CommentForApiContract"
    },
    "DiscussionFolderContract": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastTopicAuthor": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "lastTopicDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "topicCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "DiscussionFolderContract"
    },
    "DiscussionTopicContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "commentCount": {
          "format": "int32",
          "type": "integer"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/CommentForApiContract"
          },
          "type": "array"
        },
        "content": {
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "folderId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastComment": {
          "$ref": "#/definitions/CommentForApiContract"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "DiscussionTopicContract"
    },
    "EnglishTranslatedStringContract": {
      "properties": {
        "english": {
          "type": "string"
        },
        "original": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "EnglishTranslatedStringContract"
    },
    "EntryForApiContract": {
      "properties": {
        "activityDate": {
          "format": "date-time",
          "type": "string"
        },
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "artistType": {
          "enum": [
            "Unknown",
            "Circle",
            "Label",
            "Producer",
            "Animator",
            "Illustrator",
            "Lyricist",
            "Vocaloid",
            "UTAU",
            "CeVIO",
            "OtherVoiceSynthesizer",
            "OtherVocalist",
            "OtherGroup",
            "OtherIndividual",
            "Utaite",
            "Band"
          ],
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discType": {
          "enum": [
            "Unknown",
            "Album",
            "Single",
            "EP",
            "SplitAlbum",
            "Compilation",
            "Video",
            "Artbook",
            "Other"
          ],
          "type": "string"
        },
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User"
          ],
          "type": "string"
        },
        "eventCategory": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "pVs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "releaseEventSeriesName": {
          "type": "string"
        },
        "songListFeaturedCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tagCategoryName": {
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "urlSlug": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/ArchivedWebLinkContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "EntryForApiContract"
    },
    "EntryRefContract": {
      "properties": {
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "EntryRefContract"
    },
    "EntryThumbContract": {
      "properties": {
        "entryType": {
          "enum": [
            "Undefined",
            "Album",
            "Artist",
            "DiscussionTopic",
            "PV",
            "ReleaseEvent",
            "ReleaseEventSeries",
            "Song",
            "SongList",
            "Tag",
            "User"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mime": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "EntryThumbContract"
    },
    "EntryThumbForApiContract": {
      "properties": {
        "urlSmallThumb": {
          "type": "string"
        },
        "urlThumb": {
          "type": "string"
        },
        "urlTinyThumb": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "EntryThumbForApiContract"
    },
    "LocalizedStringContract": {
      "properties": {
        "language": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "LocalizedStringContract"
    },
    "LocalizedStringWithIdContract": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "LocalizedStringWithIdContract"
    },
    "LyricsForSongContract": {
      "properties": {
        "cultureCode": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "type": "string"
        },
        "translationType": {
          "enum": [
            "Original",
            "Romanized",
            "Translation"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "LyricsForSongContract"
    },
    "OldUsernameContract": {
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "oldName": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "OldUsernameContract"
    },
    "OptionalDateTimeContract": {
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer"
        },
        "formatted": {
          "type": "string"
        },
        "isEmpty": {
          "type": "boolean"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "OptionalDateTimeContract"
    },
    "PVContract": {
      "properties": {
        "author": {
          "type": "string"
        },
        "createdBy": {
          "format": "int32",
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "extendedMetadata": {
          "$ref": "#/definitions/PVExtendedMetadata"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvId": {
          "type": "string"
        },
        "pvType": {
          "enum": [
            "Original",
            "Reprint",
            "Other"
          ],
          "type": "string"
        },
        "service": {
          "enum": [
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga"
          ],
          "type": "string"
        },
        "thumbUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "PVContract"
    },
    "PVExtendedMetadata": {
      "properties": {
        "json": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "PVExtendedMetadata"
    },
    "PVForSongContract": {
      "properties": {
        "author": {
          "type": "string"
        },
        "createdBy": {
          "format": "int32",
          "type": "integer"
        },
        "disabled": {
          "type": "boolean"
        },
        "extendedMetadata": {
          "$ref": "#/definitions/PVExtendedMetadata"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "length": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvId": {
          "type": "string"
        },
        "pvType": {
          "enum": [
            "Original",
            "Reprint",
            "Other"
          ],
          "type": "string"
        },
        "service": {
          "enum": [
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga"
          ],
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongContract"
        },
        "thumbUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "PVForSongContract"
    },
    "PartialFindResult[ActivityEntryForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ActivityEntryForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[ActivityEntryForApiContract]"
    },
    "PartialFindResult[AlbumForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/AlbumForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[AlbumForApiContract]"
    },
    "PartialFindResult[AlbumForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/AlbumForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[AlbumForUserForApiContract]"
    },
    "PartialFindResult[ArtistForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ArtistForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[ArtistForApiContract]"
    },
    "PartialFindResult[ArtistForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ArtistForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[ArtistForUserForApiContract]"
    },
    "PartialFindResult[CommentForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CommentForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[CommentForApiContract]"
    },
    "PartialFindResult[DiscussionTopicContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DiscussionTopicContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[DiscussionTopicContract]"
    },
    "PartialFindResult[EntryForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/EntryForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[EntryForApiContract]"
    },
    "PartialFindResult[PVForSongContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/PVForSongContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[PVForSongContract]"
    },
    "PartialFindResult[RatedSongForUserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/RatedSongForUserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[RatedSongForUserForApiContract]"
    },
    "PartialFindResult[ReleaseEventForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ReleaseEventForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[ReleaseEventForApiContract]"
    },
    "PartialFindResult[ReleaseEventSeriesContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ReleaseEventSeriesContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[ReleaseEventSeriesContract]"
    },
    "PartialFindResult[SongForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[SongForApiContract]"
    },
    "PartialFindResult[SongInListForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongInListForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[SongInListForApiContract]"
    },
    "PartialFindResult[SongListForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SongListForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[SongListForApiContract]"
    },
    "PartialFindResult[TagForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/TagForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[TagForApiContract]"
    },
    "PartialFindResult[UserForApiContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserForApiContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[UserForApiContract]"
    },
    "PartialFindResult[UserMessageContract]": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserMessageContract"
          },
          "type": "array"
        },
        "term": {
          "type": "string"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "PartialFindResult[UserMessageContract]"
    },
    "RatedSongForUserForApiContract": {
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "rating": {
          "enum": [
            "Nothing",
            "Dislike",
            "Like",
            "Favorite"
          ],
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "user": {
          "$ref": "#/definitions/UserForApiContract"
        }
      },
      "type": "object",
      "title": "RatedSongForUserForApiContract"
    },
    "RelatedSongsContract": {
      "properties": {
        "artistMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "likeMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        },
        "tagMatches": {
          "items": {
            "$ref": "#/definitions/SongForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "RelatedSongsContract"
    },
    "ReleaseEventForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForEventContract"
          },
          "type": "array"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "series": {
          "$ref": "#/definitions/ReleaseEventSeriesContract"
        },
        "seriesId": {
          "format": "int32",
          "type": "integer"
        },
        "seriesNumber": {
          "format": "int32",
          "type": "integer"
        },
        "seriesSuffix": {
          "type": "string"
        },
        "songList": {
          "$ref": "#/definitions/SongListBaseContract"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        },
        "venueName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ReleaseEventForApiContract"
    },
    "ReleaseEventSeriesContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "category": {
          "enum": [
            "Unspecified",
            "AlbumRelease",
            "Anniversary",
            "Club",
            "Concert",
            "Contest",
            "Convention",
            "Other"
          ],
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pictureMime": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ReleaseEventSeriesContract"
    },
    "SongContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "artistString": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "favoritedTimes": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lengthSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nicoId": {
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvServices": {
          "enum": [
            "Nothing",
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga"
          ],
          "type": "string"
        },
        "ratingScore": {
          "format": "int32",
          "type": "integer"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "thumbUrl": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "SongContract"
    },
    "SongForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "albums": {
          "items": {
            "$ref": "#/definitions/AlbumContract"
          },
          "type": "array"
        },
        "artistString": {
          "type": "string"
        },
        "artists": {
          "items": {
            "$ref": "#/definitions/ArtistForSongContract"
          },
          "type": "array"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "favoritedTimes": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lengthSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "lyrics": {
          "items": {
            "$ref": "#/definitions/LyricsForSongContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "mergedTo": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringContract"
          },
          "type": "array"
        },
        "originalVersionId": {
          "format": "int32",
          "type": "integer"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "pvServices": {
          "enum": [
            "Nothing",
            "NicoNicoDouga",
            "Youtube",
            "SoundCloud",
            "Vimeo",
            "Piapro",
            "Bilibili",
            "File",
            "LocalFile",
            "Creofuga"
          ],
          "type": "string"
        },
        "pvs": {
          "items": {
            "$ref": "#/definitions/PVContract"
          },
          "type": "array"
        },
        "ratingScore": {
          "format": "int32",
          "type": "integer"
        },
        "releaseEvent": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "songType": {
          "enum": [
            "Unspecified",
            "Original",
            "Remaster",
            "Remix",
            "Cover",
            "Instrumental",
            "Mashup",
            "MusicPV",
            "DramaPV",
            "Live",
            "Other"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/TagUsageForApiContract"
          },
          "type": "array"
        },
        "thumbUrl": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "SongForApiContract"
    },
    "SongInAlbumForApiContract": {
      "properties": {
        "discNumber": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "trackNumber": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "SongInAlbumForApiContract"
    },
    "SongInListEditContract": {
      "properties": {
        "notes": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "songInListId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "SongInListEditContract"
    },
    "SongInListForApiContract": {
      "properties": {
        "notes": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "song": {
          "$ref": "#/definitions/SongForApiContract"
        }
      },
      "type": "object",
      "title": "SongInListForApiContract"
    },
    "SongListBaseContract": {
      "properties": {
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "SongListBaseContract"
    },
    "SongListForApiContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "eventDate": {
          "format": "date-time",
          "type": "string"
        },
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "SongListForApiContract"
    },
    "SongListForEditContract": {
      "properties": {
        "author": {
          "$ref": "#/definitions/UserWithEmailContract"
        },
        "canEdit": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "eventDate": {
          "format": "date-time",
          "type": "string"
        },
        "featuredCategory": {
          "enum": [
            "Nothing",
            "Concerts",
            "VocaloidRanking",
            "Pools",
            "Other"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "songLinks": {
          "items": {
            "$ref": "#/definitions/SongInListEditContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "thumb": {
          "$ref": "#/definitions/EntryThumbContract"
        },
        "updateNotes": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "SongListForEditContract"
    },
    "SongRatingContract": {
      "properties": {
        "rating": {
          "enum": [
            "Nothing",
            "Dislike",
            "Like",
            "Favorite"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "SongRatingContract"
    },
    "TagBaseContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "urlSlug": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "TagBaseContract"
    },
    "TagForApiContract": {
      "properties": {
        "additionalNames": {
          "type": "string"
        },
        "aliasedTo": {
          "$ref": "#/definitions/TagBaseContract"
        },
        "categoryName": {
          "type": "string"
        },
        "createDate": {
          "format": "date-time",
          "type": "string"
        },
        "defaultNameLanguage": {
          "enum": [
            "Unspecified",
            "Japanese",
            "Romaji",
            "English"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "name": {
          "type": "string"
        },
        "names": {
          "items": {
            "$ref": "#/definitions/LocalizedStringWithIdContract"
          },
          "type": "array"
        },
        "parent": {
          "$ref": "#/definitions/TagBaseContract"
        },
        "relatedTags": {
          "items": {
            "$ref": "#/definitions/TagBaseContract"
          },
          "type": "array"
        },
        "status": {
          "enum": [
            "Draft",
            "Finished",
            "Approved",
            "Locked"
          ],
          "type": "string"
        },
        "targets": {
          "format": "int32",
          "type": "integer"
        },
        "translatedDescription": {
          "$ref": "#/definitions/EnglishTranslatedStringContract"
        },
        "urlSlug": {
          "type": "string"
        },
        "usageCount": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "webLinks": {
          "items": {
            "$ref": "#/definitions/WebLinkForApiContract"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "TagForApiContract"
    },
    "TagUsageForApiContract": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "tag": {
          "$ref": "#/definitions/TagBaseContract"
        }
      },
      "type": "object",
      "title": "TagUsageForApiContract"
    },
    "UserForApiContract": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "groupId": {
          "enum": [
            "Nothing",
            "Limited",
            "Regular",
            "Trusted",
            "Moderator",
            "Admin"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knownLanguages": {
          "items": {
            "$ref": "#/definitions/UserKnownLanguageContract"
          },
          "type": "array"
        },
        "mainPicture": {
          "$ref": "#/definitions/EntryThumbForApiContract"
        },
        "memberSince": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oldUsernames": {
          "items": {
            "$ref": "#/definitions/OldUsernameContract"
          },
          "type": "array"
        },
        "verifiedArtist": {
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "UserForApiContract"
    },
    "UserKnownLanguageContract": {
      "properties": {
        "cultureCode": {
          "type": "string"
        },
        "proficiency": {
          "enum": [
            "Nothing",
            "Basics",
            "Intermediate",
            "Advanced",
            "Native"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "UserKnownLanguageContract"
    },
    "UserMessageContract": {
      "properties": {
        "body": {
          "type": "string"
        },
        "createdFormatted": {
          "type": "string"
        },
        "highPriority": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inbox": {
          "enum": [
            "Nothing",
            "Received",
            "Sent",
            "Notifications"
          ],
          "type": "string"
        },
        "read": {
          "type": "boolean"
        },
        "receiver": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "sender": {
          "$ref": "#/definitions/UserForApiContract"
        },
        "subject": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "UserMessageContract"
    },
    "UserWithEmailContract": {
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "UserWithEmailContract"
    },
    "WebLinkContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "descriptionOrUrl": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "WebLinkContract"
    },
    "WebLinkForApiContract": {
      "properties": {
        "category": {
          "enum": [
            "Official",
            "Commercial",
            "Reference",
            "Other"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "WebLinkForApiContract"
    }
  },
  "actions": [
    {
      "id": "ActivityEntryApi_GetList",
      "title": "ActivityEntryApi_GetList",
      "description": "Entries are always returned sorted from newest to oldest.\r\n            Activity for deleted entries is not returned.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "before": {
            "type": "string",
            "format": "date-time",
            "description": "Filter to return activity entries only before this date. Optional, by default no filter."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "Filter to return activity entries only after this date. Optional, by default no filter."
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by user Id. Optional, by default no filter."
          },
          "editEvent": {
            "type": "string",
            "description": "Filter by entry edit event (either Created or Updated). Optional, by default no filter.",
            "enum": [
              "Created",
              "Updated",
              "Deleted",
              "Restored"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to return. Default 50. Maximum value 500."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "fields": {
            "type": "string",
            "description": "Optional fields.",
            "enum": [
              "None",
              "ArchivedVersion",
              "Entry"
            ]
          },
          "entryFields": {
            "type": "string",
            "description": "Optional fields for entries.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "MainPicture",
              "Names",
              "PVs",
              "Tags",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[ActivityEntryForApiContract]"
      }
    },
    {
      "id": "AlbumApi_GetList",
      "title": "AlbumApi_GetList",
      "description": "Gets a page of albums.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Album name query (optional)."
          },
          "discTypes": {
            "type": "string",
            "description": "Disc type. By default nothing. Possible values are Album, Single, EP, SplitAlbum, Compilation, Video, Other. Note: only one type supported for now.",
            "enum": [
              "Unknown",
              "Album",
              "Single",
              "EP",
              "SplitAlbum",
              "Compilation",
              "Video",
              "Artbook",
              "Other"
            ]
          },
          "tagName": {
            "type": "array",
            "description": "Filter by tag name (optional). This filter can be specified multiple times."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times."
          },
          "childTags": {
            "type": "boolean",
            "description": "Include child tags, if the tags being filtered by have any."
          },
          "artistId": {
            "type": "array",
            "description": "Filter by artist Id (optional)."
          },
          "artistParticipationStatus": {
            "type": "string",
            "description": "Filter by artist participation status. Only valid if artistId is specified.\r\n            Everything (default): Show all albums by that artist (no filter).\r\n            OnlyMainAlbums: Show only main albums by that artist.\r\n            OnlyCollaborations: Show only collaborations by that artist.",
            "enum": [
              "Everything",
              "OnlyMainAlbums",
              "OnlyCollaborations"
            ]
          },
          "childVoicebanks": {
            "type": "boolean",
            "description": "Include child voicebanks, if the artist being filtered by has any."
          },
          "includeMembers": {
            "type": "boolean",
            "description": "Include members of groups. This applies if {artistId} is a group."
          },
          "barcode": {
            "type": "string",
            "description": "Filter by album barcode (optional)."
          },
          "status": {
            "type": "string",
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ]
          },
          "releaseDateAfter": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by albums whose release date is after this date (inclusive)."
          },
          "releaseDateBefore": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by albums whose release date is before this date (exclusive)."
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). \r\n            Possible values are None, Name, ReleaseDate, ReleaseDateWithNulls, AdditionDate, RatingAverage, RatingTotal, NameThenReleaseDate.",
            "enum": [
              "None",
              "Name",
              "ReleaseDate",
              "ReleaseDateWithNulls",
              "AdditionDate",
              "RatingAverage",
              "RatingTotal",
              "NameThenReleaseDate",
              "CollectionCount"
            ]
          },
          "preferAccurateMatches": {
            "type": "boolean",
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether to search for deleted entries. If this is true, only deleted entries will be returned."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for artist name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[AlbumForApiContract]"
      }
    },
    {
      "id": "AlbumApi_DeleteComment",
      "title": "AlbumApi_DeleteComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "AlbumApi_PostEditComment",
      "title": "AlbumApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "AlbumApi_GetNames",
      "title": "AlbumApi_GetNames",
      "description": "Gets a list of album names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "AlbumApi_Delete",
      "title": "AlbumApi_Delete",
      "description": "Deletes an album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the album to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "AlbumApi_GetOne",
      "title": "AlbumApi_GetOne",
      "description": "Gets an album by Id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Album Id (required)."
          },
          "fields": {
            "type": "string",
            "description": "Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ]
          },
          "songFields": {
            "type": "string",
            "description": "Optional fields for tracks, if included (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/AlbumForApiContract"
      }
    },
    {
      "id": "AlbumApi_GetComments",
      "title": "AlbumApi_GetComments",
      "description": "Pagination and sorting might be added later.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the album whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CommentForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "AlbumApi_PostNewComment",
      "title": "AlbumApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the album for which to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "AlbumApi_GetTracks",
      "title": "AlbumApi_GetTracks",
      "description": "Gets tracks for an album.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Album ID (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SongInAlbumForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "AlbumApi_GetTracksFormatted",
      "title": "AlbumApi_GetTracksFormatted",
      "description": "Gets tracks for an album formatted using the CSV format string.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Album ID."
          },
          "field": {
            "type": "array",
            "description": "Field to be included, for example \"featvocalists\" or \"url\". Can be specified multiple times."
          },
          "lang": {
            "type": "string",
            "description": "Language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": "array"
      }
    },
    {
      "id": "ArtistApi_GetList",
      "title": "ArtistApi_GetList",
      "description": "Find artists.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Artist name query (optional)."
          },
          "artistTypes": {
            "type": "string",
            "description": "Filtered artist type (optional)."
          },
          "allowBaseVoicebanks": {
            "type": "boolean",
            "description": "Allow base voicebanks. If false, only root voicebanks will be allowed. Only affects voice synthesizers that can have base voicebanks."
          },
          "tagName": {
            "type": "array",
            "description": "Filter by tag name (optional)."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times."
          },
          "childTags": {
            "type": "boolean",
            "description": "Include child tags, if the tags being filtered by have any."
          },
          "followedByUserId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by user following the artists. By default there is no filtering."
          },
          "status": {
            "type": "string",
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ]
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 100)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "AdditionDateAsc",
              "ReleaseDate",
              "SongCount",
              "SongRating",
              "FollowerCount"
            ]
          },
          "preferAccurateMatches": {
            "type": "boolean",
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for artist name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[ArtistForApiContract]"
      }
    },
    {
      "id": "ArtistApi_DeleteComment",
      "title": "ArtistApi_DeleteComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ArtistApi_PostEditComment",
      "title": "ArtistApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ArtistApi_GetNames",
      "title": "ArtistApi_GetNames",
      "description": "Gets a list of artist names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "ArtistApi_Delete",
      "title": "ArtistApi_Delete",
      "description": "Deletes an artist.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the artist to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ArtistApi_GetOne",
      "title": "ArtistApi_GetOne",
      "description": "Gets an artist by Id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Artist ID (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ]
          },
          "relations": {
            "type": "string",
            "description": "List of artist relations (optional). Possible values are LatestAlbums, PopularAlbums, LatestSongs, PopularSongs, All",
            "enum": [
              "None",
              "LatestAlbums",
              "LatestEvents",
              "LatestSongs",
              "PopularAlbums",
              "PopularSongs",
              "All"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ArtistForApiContract"
      }
    },
    {
      "id": "ArtistApi_GetComments",
      "title": "ArtistApi_GetComments",
      "description": "Pagination and sorting might be added later.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the artist whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CommentForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "ArtistApi_PostNewComment",
      "title": "ArtistApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the artist for which to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "CommentApi_GetComments",
      "title": "CommentApi_GetComments",
      "description": "Gets a list of comments for an entry.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "entryType": {
            "type": "string",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User"
            ]
          },
          "entryId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the entry whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "entryType",
          "entryId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
      }
    },
    {
      "id": "CommentApi_PostNewComment",
      "title": "CommentApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "entryType": {
            "type": "string",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User"
            ]
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "entryType",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "CommentApi_DeleteComment",
      "title": "CommentApi_DeleteComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "entryType": {
            "type": "string",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User"
            ]
          },
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "entryType",
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "CommentApi_PostEditComment",
      "title": "CommentApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "entryType": {
            "type": "string",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User"
            ]
          },
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "entryType",
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "DiscussionApi_DeleteComment",
      "title": "DiscussionApi_DeleteComment",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "DiscussionApi_PostEditComment",
      "title": "DiscussionApi_PostEditComment",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32"
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "DiscussionApi_GetFolders",
      "title": "DiscussionApi_GetFolders",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "fields": {
            "type": "string",
            "enum": [
              "None",
              "LastTopic",
              "TopicCount"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/DiscussionFolderContract"
        },
        "type": "array"
      }
    },
    {
      "id": "DiscussionApi_PostNewFolder",
      "title": "DiscussionApi_PostNewFolder",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "contract": {
            "$ref": "#/definitions/DiscussionFolderContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DiscussionFolderContract"
      }
    },
    {
      "id": "DiscussionApi_GetTopicsForFolder",
      "title": "DiscussionApi_GetTopicsForFolder",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "string",
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "folderId"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/DiscussionTopicContract"
        },
        "type": "array"
      }
    },
    {
      "id": "DiscussionApi_PostNewTopic",
      "title": "DiscussionApi_PostNewTopic",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "folderId": {
            "type": "integer",
            "format": "int32"
          },
          "contract": {
            "$ref": "#/definitions/DiscussionTopicContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "folderId",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DiscussionTopicContract"
      }
    },
    {
      "id": "DiscussionApi_GetTopics",
      "title": "DiscussionApi_GetTopics",
      "description": "",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "folderId": {
            "type": "integer",
            "format": "int32"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "maxResults": {
            "type": "integer",
            "format": "int32"
          },
          "getTotalCount": {
            "type": "boolean"
          },
          "sort": {
            "type": "string",
            "enum": [
              "None",
              "Name",
              "DateCreated",
              "LastCommentDate"
            ]
          },
          "fields": {
            "type": "string",
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[DiscussionTopicContract]"
      }
    },
    {
      "id": "DiscussionApi_DeleteTopic",
      "title": "DiscussionApi_DeleteTopic",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "topicId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "required": [
          "topicId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "DiscussionApi_GetTopic",
      "title": "DiscussionApi_GetTopic",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "topicId": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "string",
            "enum": [
              "None",
              "Comments",
              "CommentCount",
              "Content",
              "LastComment",
              "All"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "topicId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DiscussionTopicContract"
      }
    },
    {
      "id": "DiscussionApi_PostEditTopic",
      "title": "DiscussionApi_PostEditTopic",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "topicId": {
            "type": "integer",
            "format": "int32"
          },
          "contract": {
            "$ref": "#/definitions/DiscussionTopicContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "topicId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "DiscussionApi_PostNewComment",
      "title": "DiscussionApi_PostNewComment",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "topicId": {
            "type": "integer",
            "format": "int32"
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "topicId",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "EntryApi_GetList",
      "title": "EntryApi_GetList",
      "description": "Find entries.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Entry name query (optional)."
          },
          "tagName": {
            "type": "array",
            "description": "Filter by tag name (optional)."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by tag Id (optional)."
          },
          "childTags": {
            "type": "boolean",
            "description": "Include child tags, if the tags being filtered by have any."
          },
          "status": {
            "type": "string",
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 30)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "ActivityDate"
            ]
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for entry name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Description, MainPicture, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Description",
              "MainPicture",
              "Names",
              "PVs",
              "Tags",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[EntryForApiContract]"
      }
    },
    {
      "id": "EntryApi_GetNames",
      "title": "EntryApi_GetNames",
      "description": "Gets a list of entry names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "PVApi_GetList",
      "title": "PVApi_GetList",
      "description": "Gets a list of PVs for songs.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "author": {
            "type": "string",
            "description": "Uploader name (optional)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[PVForSongContract]"
      }
    },
    {
      "id": "ReleaseEventSeriesApi_GetList",
      "title": "ReleaseEventSeriesApi_GetList",
      "description": "Gets a page of event series.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for event name (optional).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[ReleaseEventSeriesContract]"
      }
    },
    {
      "id": "ReleaseEventSeriesApi_Delete",
      "title": "ReleaseEventSeriesApi_Delete",
      "description": "Deletes an event series.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the series to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ReleaseEventApi_GetList",
      "title": "ReleaseEventApi_GetList",
      "description": "Gets a page of events.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Event name query (optional)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for event name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "seriesId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by series Id."
          },
          "afterDate": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by events after this date (inclusive)."
          },
          "beforeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by events before this date (exclusive)."
          },
          "category": {
            "type": "string",
            "description": "Filter by event category.",
            "enum": [
              "Unspecified",
              "AlbumRelease",
              "Anniversary",
              "Club",
              "Concert",
              "Contest",
              "Convention",
              "Other"
            ]
          },
          "userCollectionId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter to include only events in user's events (interested or attending)."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by one or more tag Ids (optional)."
          },
          "childTags": {
            "type": "boolean",
            "description": "Include child tags, if the tags being filtered by have any."
          },
          "artistId": {
            "type": "array",
            "description": "Filter by artist Id."
          },
          "childVoicebanks": {
            "type": "boolean",
            "description": "Include child voicebanks, if the artist being filtered by has any."
          },
          "includeMembers": {
            "type": "boolean",
            "description": "Include members of groups. This applies if {artistId} is a group."
          },
          "status": {
            "type": "string",
            "description": "Filter by entry status.",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). \r\n            Possible values are None, Name, Date, SeriesName.",
            "enum": [
              "None",
              "Name",
              "Date",
              "AdditionDate",
              "SeriesName"
            ]
          },
          "fields": {
            "type": "string",
            "description": "Optional fields (optional). Possible values are Description, Series.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "MainPicture",
              "Names",
              "Series",
              "SongList",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[ReleaseEventForApiContract]"
      }
    },
    {
      "id": "ReleaseEventApi_GetNames",
      "title": "ReleaseEventApi_GetNames",
      "description": "Find event names by a part of name.\r\n            \r\n            Matching is done anywhere from the name.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Event name query, for example \"Voc@loid\"."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of search results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "ReleaseEventApi_GetAlbums",
      "title": "ReleaseEventApi_GetAlbums",
      "description": "Gets a list of albums for a specific event.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int32",
            "description": "Release event ID."
          },
          "fields": {
            "type": "string",
            "description": "List of optional album fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "eventId"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/AlbumForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "ReleaseEventApi_GetPublishedSongs",
      "title": "ReleaseEventApi_GetPublishedSongs",
      "description": "Gets a list of songs for a specific event.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int32",
            "description": "Event ID."
          },
          "fields": {
            "type": "string",
            "description": "List of optional song fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "eventId"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "ReleaseEventApi_PostReport",
      "title": "ReleaseEventApi_PostReport",
      "description": "Creates a new report.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int32",
            "description": "Event to be reported."
          },
          "reportType": {
            "type": "string",
            "description": "Report type.",
            "enum": [
              "InvalidInfo",
              "Duplicate",
              "Inappropriate",
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Notes. Optional."
          },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Version to be reported. Optional."
          }
        },
        "additionalProperties": false,
        "required": [
          "eventId",
          "reportType",
          "notes",
          "versionNumber"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ReleaseEventApi_Delete",
      "title": "ReleaseEventApi_Delete",
      "description": "Deletes an event.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the event to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          },
          "hardDelete": {
            "type": "boolean",
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "ReleaseEventApi_GetOne",
      "title": "ReleaseEventApi_GetOne",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "string",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "MainPicture",
              "Names",
              "Series",
              "SongList",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "fields"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ReleaseEventForApiContract"
      }
    },
    {
      "id": "ResourcesApi_GetList",
      "title": "ResourcesApi_GetList",
      "description": "Gets a number of resource sets for a specific culture.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "cultureCode": {
            "type": "string",
            "description": "Culture code, for example \"en-US\" or \"fi-FI\"."
          },
          "setNames": {
            "type": "array",
            "description": "Names of resource sets to be returned. More than one value can be specified. For example \"artistTypeNames\""
          }
        },
        "additionalProperties": false,
        "required": [
          "cultureCode",
          "setNames"
        ]
      },
      "outputSchema": {
        "additionalProperties": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": "object"
      }
    },
    {
      "id": "SongListApi_Post",
      "title": "SongListApi_Post",
      "description": "Creates a song list.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "list": {
            "$ref": "#/definitions/SongListForEditContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "list"
        ]
      },
      "outputSchema": {
        "format": "int32",
        "type": "integer"
      }
    },
    {
      "id": "SongListApi_DeleteComment",
      "title": "SongListApi_DeleteComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongListApi_PostEditComment",
      "title": "SongListApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongListApi_GetFeaturedLists",
      "title": "SongListApi_GetFeaturedLists",
      "description": "Gets a list of featured song lists.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Song list name query (optional)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for list name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "featuredCategory": {
            "type": "string",
            "description": "Filter by a specific featured category. If empty, all categories are returned.",
            "enum": [
              "Nothing",
              "Concerts",
              "VocaloidRanking",
              "Pools",
              "Other"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "List sort rule. Possible values are Nothing, Date, CreateDate, Name.",
            "enum": [
              "None",
              "Name",
              "Date",
              "CreateDate"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[SongListForApiContract]"
      }
    },
    {
      "id": "SongListApi_GetFeaturedListNames",
      "title": "SongListApi_GetFeaturedListNames",
      "description": "Gets a list of featuedd list names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode. Words is treated the same as Partial.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "featuredCategory": {
            "type": "string",
            "description": "Filter by a specific featured category. If empty, all categories are returned.",
            "enum": [
              "Nothing",
              "Concerts",
              "VocaloidRanking",
              "Pools",
              "Other"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "SongListApi_Delete",
      "title": "SongListApi_Delete",
      "description": "Deletes a song list.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the list to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          },
          "hardDelete": {
            "type": "boolean",
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongListApi_GetComments",
      "title": "SongListApi_GetComments",
      "description": "Gets a list of comments for a song list.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the list whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "listId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
      }
    },
    {
      "id": "SongListApi_PostNewComment",
      "title": "SongListApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song list for which to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "listId",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "SongListApi_GetSongs",
      "title": "SongListApi_GetSongs",
      "description": "Gets a list of songs in a song list.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song list."
          },
          "query": {
            "type": "string",
            "description": "Song name query (optional)."
          },
          "songTypes": {
            "type": "string",
            "description": "Filtered song types (optional)."
          },
          "pvServices": {
            "type": "string",
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga"
            ]
          },
          "tagId": {
            "type": "array",
            "description": "Filter by one or more tag Ids (optional)."
          },
          "artistId": {
            "type": "array",
            "description": "Filter by artist Id."
          },
          "childVoicebanks": {
            "type": "boolean",
            "description": "Include child voicebanks, if the artist being filtered by has any."
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Song sort rule (optional, by default songs are sorted by song list order).",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore"
            ]
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for song name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "listId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[SongInListForApiContract]"
      }
    },
    {
      "id": "SongApi_GetList",
      "title": "SongApi_GetList",
      "description": "Find songs.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Song name query (optional)."
          },
          "songTypes": {
            "type": "string",
            "description": "Filtered song types (optional). \r\n            Possible values are Original, Remaster, Remix, Cover, Instrumental, Mashup, MusicPV, DramaPV, Other."
          },
          "tagName": {
            "type": "array",
            "description": "Filter by one or more tag names (optional)."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by one or more tag Ids (optional)."
          },
          "childTags": {
            "type": "boolean",
            "description": "Include child tags, if the tags being filtered by have any."
          },
          "artistId": {
            "type": "array",
            "description": "Filter by artist Id."
          },
          "artistParticipationStatus": {
            "type": "string",
            "description": "Filter by artist participation status. Only valid if artistId is specified.\r\n            Everything (default): Show all songs by that artist (no filter).\r\n            OnlyMainAlbums: Show only main songs by that artist.\r\n            OnlyCollaborations: Show only collaborations by that artist.",
            "enum": [
              "Everything",
              "OnlyMainAlbums",
              "OnlyCollaborations"
            ]
          },
          "childVoicebanks": {
            "type": "boolean",
            "description": "Include child voicebanks, if the artist being filtered by has any."
          },
          "includeMembers": {
            "type": "boolean",
            "description": "Include members of groups. This applies if {artistId} is a group."
          },
          "onlyWithPvs": {
            "type": "boolean",
            "description": "Whether to only include songs with at least one PV."
          },
          "pvServices": {
            "type": "string",
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga"
            ]
          },
          "since": {
            "type": "integer",
            "format": "int32",
            "description": "Allow only entries that have been created at most this many hours ago. By default there is no filtering."
          },
          "minScore": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum rating score. Optional."
          },
          "userCollectionId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by user's rated songs. By default there is no filtering."
          },
          "status": {
            "type": "string",
            "description": "Filter by entry status (optional).",
            "enum": [
              "Draft",
              "Finished",
              "Approved",
              "Locked"
            ]
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore"
            ]
          },
          "preferAccurateMatches": {
            "type": "boolean",
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for song name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[SongForApiContract]"
      }
    },
    {
      "id": "SongApi_GetByPV",
      "title": "SongApi_GetByPV",
      "description": "Gets a song by PV.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "pvService": {
            "type": "string",
            "description": "PV service (required). Possible values are NicoNicoDouga, Youtube, SoundCloud, Vimeo, Piapro, Bilibili.",
            "enum": [
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga"
            ]
          },
          "pvId": {
            "type": "string",
            "description": "PV Id (required). For example sm123456."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "pvService",
          "pvId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/SongForApiContract"
      }
    },
    {
      "id": "SongApi_DeleteComment",
      "title": "SongApi_DeleteComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongApi_PostEditComment",
      "title": "SongApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongApi_GetLyrics",
      "title": "SongApi_GetLyrics",
      "description": "Output is cached. Specify song version as parameter to refresh.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "lyricsId": {
            "type": "integer",
            "format": "int32",
            "description": "Lyrics ID."
          }
        },
        "additionalProperties": false,
        "required": [
          "lyricsId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/LyricsForSongContract"
      }
    },
    {
      "id": "SongApi_GetNames",
      "title": "SongApi_GetNames",
      "description": "Gets a list of song names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "SongApi_GetTopSongs",
      "title": "SongApi_GetTopSongs",
      "description": "Gets top rated songs.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "durationHours": {
            "type": "integer",
            "format": "int32",
            "description": "Duration in hours from which to get songs."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Lower bound of the date. Optional."
          },
          "filterBy": {
            "type": "string",
            "description": "Filtering mode.",
            "enum": [
              "CreateDate",
              "PublishDate",
              "Popularity"
            ]
          },
          "vocalist": {
            "type": "string",
            "description": "Vocalist selection.",
            "enum": [
              "Nothing",
              "Vocaloid",
              "UTAU",
              "CeVIO"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional)."
          },
          "fields": {
            "type": "string",
            "description": "Optional song fields to load.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "languagePreference": {
            "type": "string",
            "description": "Language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "SongApi_Delete",
      "title": "SongApi_Delete",
      "description": "Deletes a song.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongApi_GetById",
      "title": "SongApi_GetById",
      "description": "Gets a song by Id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Song Id (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). \r\n            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/SongForApiContract"
      }
    },
    {
      "id": "SongApi_GetComments",
      "title": "SongApi_GetComments",
      "description": "Pagination and sorting might be added later.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/CommentForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "SongApi_PostNewComment",
      "title": "SongApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song for which to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "SongApi_GetDerived",
      "title": "SongApi_GetDerived",
      "description": "Pagination and sorting might be added later.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Song Id (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). \r\n            Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/SongForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "SongApi_GetRatings",
      "title": "SongApi_GetRatings",
      "description": "The result includes ratings and user information.\r\n            For users who have requested not to make their ratings public, the user will be empty.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Song ID."
          },
          "userFields": {
            "type": "string",
            "description": "Optional fields for the users.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "userFields"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/RatedSongForUserForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "SongApi_PostRating",
      "title": "SongApi_PostRating",
      "description": "If the user has already rated the song, any previous rating is replaced.\r\n            Authorization cookie must be included.\r\n            This API supports CORS.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song to be rated."
          },
          "rating": {
            "$ref": "#/definitions/SongRatingContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "rating"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "SongApi_GetRelated",
      "title": "SongApi_GetRelated",
      "description": "Gets related songs.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Song whose related songs are to be queried."
          },
          "fields": {
            "type": "string",
            "description": "Optional song fields.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference.",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RelatedSongsContract"
      }
    },
    {
      "id": "TagApi_GetList",
      "title": "TagApi_GetList",
      "description": "Find tags.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Tag name query (optional)."
          },
          "allowChildren": {
            "type": "boolean",
            "description": "Whether to allow child tags. If this is false, only root tags (that aren't children of any other tag) will be included."
          },
          "categoryName": {
            "type": "string",
            "description": "Filter tags by category (optional). If specified, this must be an exact match (case insensitive)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 30)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for song name (optional, defaults to Exact).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, by default tags are sorted by name).Possible values are Name and UsageCount.",
            "enum": [
              "Nothing",
              "Name",
              "AdditionDate",
              "UsageCount"
            ]
          },
          "preferAccurateMatches": {
            "type": "boolean",
            "description": "Whether the search should prefer accurate matches. \r\n            If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.\r\n            Requires a text query. Does not support pagination.\r\n            This is mostly useful for autocomplete boxes."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          },
          "target": {
            "type": "string",
            "enum": [
              "Nothing",
              "Album",
              "Artist",
              "AlbumArtist",
              "Event",
              "Song",
              "AlbumSong",
              "ArtistSong",
              "All"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[TagForApiContract]"
      }
    },
    {
      "id": "TagApi_PostNewTag",
      "title": "TagApi_PostNewTag",
      "description": "Creates a new tag.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag English name. Tag names must be unique."
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/TagBaseContract"
      }
    },
    {
      "id": "TagApi_GetByName",
      "title": "TagApi_GetByName",
      "description": "DEPRECATED. Gets a tag by name.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/TagForApiContract"
      }
    },
    {
      "id": "TagApi_GetCategoryNamesList",
      "title": "TagApi_GetCategoryNamesList",
      "description": "Gets a list of tag category names.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string"
          },
          "nameMatchMode": {
            "type": "string",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "TagApi_DeleteComment",
      "title": "TagApi_DeleteComment",
      "description": "Deletes a comment.\r\n            Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "TagApi_PostEditComment",
      "title": "TagApi_PostEditComment",
      "description": "Updates a comment.\r\n            Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "TagApi_GetNames",
      "title": "TagApi_GetNames",
      "description": "Find tag names by a part of name.\r\n            \r\n            Matching is done anywhere from the name.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Tag name query, for example \"rock\"."
          },
          "allowAliases": {
            "type": "boolean",
            "description": "Whether to find tags that are aliases of other tags as well. \r\n            If false, only tags that are not aliases will be listed."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of search results."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "TagApi_GetTopTags",
      "title": "TagApi_GetTopTags",
      "description": "Gets the most common tags in a category.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "categoryName": {
            "type": "string",
            "description": "Tag category, for example \"Genres\". Optional - if not specified, no filtering is done."
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/TagBaseContract"
        },
        "type": "array"
      }
    },
    {
      "id": "TagApi_Delete",
      "title": "TagApi_Delete",
      "description": "Deletes a tag.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the tag to be deleted."
          },
          "notes": {
            "type": "string",
            "description": "Notes (optional)."
          },
          "hardDelete": {
            "type": "boolean",
            "description": "If true, the entry is hard deleted. Hard deleted entries cannot be restored normally, but they will be moved to trash.\r\n            If false, the entry is soft deleted, meaning it can still be restored."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "TagApi_GetById",
      "title": "TagApi_GetById",
      "description": "Gets a tag by ID.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Tag ID (required)."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/TagForApiContract"
      }
    },
    {
      "id": "TagApi_GetChildTags",
      "title": "TagApi_GetChildTags",
      "description": "Gets a list of child tags for a tag.\r\n            Only direct children will be included.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the tag whose children to load."
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional).",
            "enum": [
              "None",
              "AdditionalNames",
              "AliasedTo",
              "Description",
              "MainPicture",
              "Names",
              "Parent",
              "RelatedTags",
              "TranslatedDescription",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/TagForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "TagApi_GetComments",
      "title": "TagApi_GetComments",
      "description": "Gets a list of comments for a tag.\r\n            Note: pagination and sorting might be added later.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the tag whose comments to load."
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
      }
    },
    {
      "id": "TagApi_PostNewComment",
      "title": "TagApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the tag for which to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "TagApi_PostReport",
      "title": "TagApi_PostReport",
      "description": "Creates a new report.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32",
            "description": "Tag to be reported."
          },
          "reportType": {
            "type": "string",
            "description": "Report type.",
            "enum": [
              "InvalidInfo",
              "Duplicate",
              "Inappropriate",
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Notes. Optional."
          },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Version to be reported. Optional."
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId",
          "reportType",
          "notes",
          "versionNumber"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetList",
      "title": "UserApi_GetList",
      "description": "Gets a list of users.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "User name query (optional)."
          },
          "groups": {
            "type": "string",
            "description": "Filter by user group. Only one value supported for now. Optional.",
            "enum": [
              "Nothing",
              "Limited",
              "Regular",
              "Trusted",
              "Moderator",
              "Admin"
            ]
          },
          "joinDateAfter": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by users who joined after this date (inclusive)."
          },
          "joinDateBefore": {
            "type": "string",
            "format": "date-time",
            "description": "Filter by users who joined before this date (exclusive)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "Index of the first entry to be loaded."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to get total number of results."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule.",
            "enum": [
              "RegisterDate",
              "Name",
              "Group"
            ]
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Whether to include disabled user accounts."
          },
          "onlyVerified": {
            "type": "boolean",
            "description": "Whether to only include verified artists."
          },
          "knowsLanguage": {
            "type": "string",
            "description": "Filter by known language (optional). This is the ISO 639-1 language code, for example \"en\" or \"zh\"."
          },
          "fields": {
            "type": "string",
            "description": "Optional fields. Possible values are None and MainPicture. Optional.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[UserForApiContract]"
      }
    },
    {
      "id": "UserApi_GetCurrent",
      "title": "UserApi_GetCurrent",
      "description": "Requires login information.\r\n            This API supports CORS, and is restricted to specific origins.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "fields": {
            "type": "string",
            "description": "Optional fields.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserForApiContract"
      }
    },
    {
      "id": "UserApi_PostAlbumStatus",
      "title": "UserApi_PostAlbumStatus",
      "description": "If the user has already rated the album, any previous rating is replaced.\r\n            Authorization cookie must be included.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "albumId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the album to be rated."
          },
          "collectionStatus": {
            "type": "string",
            "description": "Collection status. Possible values are Nothing, Wishlisted, Ordered and Owned.",
            "enum": [
              "Nothing",
              "Wishlisted",
              "Ordered",
              "Owned"
            ]
          },
          "mediaType": {
            "type": "string",
            "description": "Album media type. Possible values are PhysicalDisc, DigitalDownload and Other.",
            "enum": [
              "PhysicalDisc",
              "DigitalDownload",
              "Other"
            ]
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "description": "Rating to be given. Possible values are between 0 and 5."
          }
        },
        "additionalProperties": false,
        "required": [
          "albumId",
          "collectionStatus",
          "mediaType",
          "rating"
        ]
      },
      "outputSchema": {
        "type": "string"
      }
    },
    {
      "id": "UserApi_DeleteFollowedTag",
      "title": "UserApi_DeleteFollowedTag",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_PostFollowedTag",
      "title": "UserApi_PostFollowedTag",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "required": [
          "tagId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetSongRatingForCurrent",
      "title": "UserApi_GetSongRatingForCurrent",
      "description": "Requires authentication.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "songId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song whose rating is to be checked."
          }
        },
        "additionalProperties": false,
        "required": [
          "songId"
        ]
      },
      "outputSchema": {
        "enum": [
          "Nothing",
          "Dislike",
          "Like",
          "Favorite"
        ],
        "type": "string"
      }
    },
    {
      "id": "UserApi_PostRefreshEntryEdit",
      "title": "UserApi_PostRefreshEntryEdit",
      "description": "Refresh entry edit status, indicating that the current user is still editing that entry.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "entryType": {
            "type": "string",
            "description": "Type of entry.",
            "enum": [
              "Undefined",
              "Album",
              "Artist",
              "DiscussionTopic",
              "PV",
              "ReleaseEvent",
              "ReleaseEventSeries",
              "Song",
              "SongList",
              "Tag",
              "User"
            ]
          },
          "entryId": {
            "type": "integer",
            "format": "int32",
            "description": "Entry ID."
          }
        },
        "additionalProperties": false,
        "required": [
          "entryType",
          "entryId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_PostSongTags",
      "title": "UserApi_PostSongTags",
      "description": "This can only be used to add tags - existing tags will not be removed. \r\n            Nothing will be done for tags that are already applied by the current user for the song.\r\n            Authorization cookie is required.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "songId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song to be tagged."
          },
          "tags": {
            "items": {
              "$ref": "#/definitions/TagBaseContract"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "required": [
          "songId",
          "tags"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetMessage",
      "title": "UserApi_GetMessage",
      "description": "The message will be marked as read.\r\n            User can only load messages from their own inbox.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the message."
          }
        },
        "additionalProperties": false,
        "required": [
          "messageId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UserMessageContract"
      }
    },
    {
      "id": "UserApi_GetNames",
      "title": "UserApi_GetNames",
      "description": "Gets a list of user names. Ideal for autocomplete boxes.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Text query."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Name match mode. Words is treated the same as Partial.",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results."
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Whether to include disabled user accounts. If false, disabled accounts are excluded."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    {
      "id": "UserApi_DeleteProfileComment",
      "title": "UserApi_DeleteProfileComment",
      "description": "Normal users can delete their own comments, moderators can delete all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be deleted."
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_PostEditComment",
      "title": "UserApi_PostEditComment",
      "description": "Normal users can edit their own comments, moderators can edit all comments.\r\n            Requires login.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "commentId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the comment to be edited."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "commentId",
          "contract"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetOne",
      "title": "UserApi_GetOne",
      "description": "Gets user by ID.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User ID."
          },
          "fields": {
            "type": "string",
            "description": "Optional fields.",
            "enum": [
              "None",
              "KnownLanguages",
              "MainPicture",
              "OldUsernames"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UserForApiContract"
      }
    },
    {
      "id": "UserApi_GetAlbumCollection",
      "title": "UserApi_GetAlbumCollection",
      "description": "This includes albums that have been rated by the user as well as albums that the user has bought or wishlisted.\r\n            Note that the user might have set his album ownership status and media type as private, in which case those properties are not included.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user whose albums are to be browsed."
          },
          "query": {
            "type": "string",
            "description": "Album name query (optional)."
          },
          "tagId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by tag Id (optional)."
          },
          "tag": {
            "type": "string",
            "description": "Filter by tag (optional)."
          },
          "artistId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by album artist (optional)."
          },
          "purchaseStatuses": {
            "type": "string",
            "description": "Filter by a comma-separated list of purchase statuses (optional). Possible values are Nothing, Wishlisted, Ordered, Owned, and all combinations of these.",
            "enum": [
              "Nothing",
              "Wishlisted",
              "Ordered",
              "Owned",
              "All"
            ]
          },
          "releaseEventId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by release event. Optional."
          },
          "albumTypes": {
            "type": "string",
            "description": "Filter by album type (optional).",
            "enum": [
              "Unknown",
              "Album",
              "Single",
              "EP",
              "SplitAlbum",
              "Compilation",
              "Video",
              "Artbook",
              "Other"
            ]
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage, RatingTotal, CollectionCount.",
            "enum": [
              "None",
              "Name",
              "ReleaseDate",
              "ReleaseDateWithNulls",
              "AdditionDate",
              "RatingAverage",
              "RatingTotal",
              "NameThenReleaseDate",
              "CollectionCount"
            ]
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for album name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Artists, MainPicture, Names, PVs, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Artists",
              "Description",
              "Discs",
              "Identifiers",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "Tracks",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[AlbumForUserForApiContract]"
      }
    },
    {
      "id": "UserApi_GetEvents",
      "title": "UserApi_GetEvents",
      "description": "Gets a list of events a user has subscribed to.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User ID."
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of event subscription.",
            "enum": [
              "Interested",
              "Attending"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "relationshipType"
        ]
      },
      "outputSchema": {
        "items": {
          "$ref": "#/definitions/ReleaseEventForApiContract"
        },
        "type": "array"
      }
    },
    {
      "id": "UserApi_GetFollowedArtists",
      "title": "UserApi_GetFollowedArtists",
      "description": "Gets a list of artists followed by a user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user whose followed artists are to be browsed."
          },
          "query": {
            "type": "string",
            "description": "Artist name query (optional)."
          },
          "artistType": {
            "type": "string",
            "description": "Filter by artist type.",
            "enum": [
              "Unknown",
              "Circle",
              "Label",
              "Producer",
              "Animator",
              "Illustrator",
              "Lyricist",
              "Vocaloid",
              "UTAU",
              "CeVIO",
              "OtherVoiceSynthesizer",
              "OtherVocalist",
              "OtherGroup",
              "OtherIndividual",
              "Utaite",
              "Band"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, AdditionDateAsc.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "AdditionDateAsc",
              "ReleaseDate",
              "SongCount",
              "SongRating",
              "FollowerCount"
            ]
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for artist name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Description, Groups, Members, Names, Tags, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "ArtistLinks",
              "ArtistLinksReverse",
              "BaseVoicebank",
              "Description",
              "MainPicture",
              "Names",
              "Tags",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[ArtistForUserForApiContract]"
      }
    },
    {
      "id": "UserApi_DeleteMessages",
      "title": "UserApi_DeleteMessages",
      "description": "Deletes a list of user messages.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user whose messages to delete."
          },
          "messageId": {
            "type": "array",
            "description": "IDs of messages."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "messageId"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetMessages",
      "title": "UserApi_GetMessages",
      "description": "Gets a list of messages.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User ID. Must be the currently logged in user (loading messages for another user is not allowed)."
          },
          "inbox": {
            "type": "string",
            "description": "Type of inbox. Possible values are Nothing (load all, default), Received, Sent, Notifications.",
            "enum": [
              "Nothing",
              "Received",
              "Sent",
              "Notifications"
            ]
          },
          "unread": {
            "type": "boolean",
            "description": "Whether to only load unread messages. Loading unread messages is only possible for received messages and notifications (not sent messages)."
          },
          "anotherUserId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter by id of the other user (either sender or receiver)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "Index of the first entry to be loaded."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to get total number of results."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[UserMessageContract]"
      }
    },
    {
      "id": "UserApi_PostNewMessage",
      "title": "UserApi_PostNewMessage",
      "description": "Creates a new message.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User ID. Must be logged in user."
          },
          "contract": {
            "$ref": "#/definitions/UserMessageContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UserMessageContract"
      }
    },
    {
      "id": "UserApi_GetProfileComments",
      "title": "UserApi_GetProfileComments",
      "description": "Gets a list of comments posted on user's profile.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user whose comments are to be retrieved."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "Index of the first comment to be loaded."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of comments to load."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load the total number of comments."
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[CommentForApiContract]"
      }
    },
    {
      "id": "UserApi_PostNewComment",
      "title": "UserApi_PostNewComment",
      "description": "Posts a new comment.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user for whom to create the comment."
          },
          "contract": {
            "$ref": "#/definitions/CommentForApiContract"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "contract"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CommentForApiContract"
      }
    },
    {
      "id": "UserApi_GetRatedSongs",
      "title": "UserApi_GetRatedSongs",
      "description": "Gets a list of songs rated by a user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user whose songs are to be browsed."
          },
          "query": {
            "type": "string",
            "description": "Song name query (optional)."
          },
          "tagName": {
            "type": "string",
            "description": "Filter by tag name (optional)."
          },
          "tagId": {
            "type": "array",
            "description": "Filter by tag Id (optional). This filter can be specified multiple times."
          },
          "artistId": {
            "type": "array",
            "description": "Filter by song artist (optional)."
          },
          "childVoicebanks": {
            "type": "boolean",
            "description": "Include child voicebanks, if the artist being filtered by has any."
          },
          "rating": {
            "type": "string",
            "description": "Filter songs by given rating (optional).",
            "enum": [
              "Nothing",
              "Dislike",
              "Like",
              "Favorite"
            ]
          },
          "songListId": {
            "type": "integer",
            "format": "int32",
            "description": "Filter songs by song list (optional)."
          },
          "groupByRating": {
            "type": "boolean",
            "description": "Group results by rating so that highest rated are first."
          },
          "pvServices": {
            "type": "string",
            "description": "Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.",
            "enum": [
              "Nothing",
              "NicoNicoDouga",
              "Youtube",
              "SoundCloud",
              "Vimeo",
              "Piapro",
              "Bilibili",
              "File",
              "LocalFile",
              "Creofuga"
            ]
          },
          "advancedFilters": {
            "type": "array",
            "description": "List of advanced filters (optional)."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.",
            "enum": [
              "None",
              "Name",
              "AdditionDate",
              "PublishDate",
              "FavoritedTimes",
              "RatingScore",
              "RatingDate"
            ]
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for song name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.",
            "enum": [
              "None",
              "AdditionalNames",
              "Albums",
              "Artists",
              "Lyrics",
              "MainPicture",
              "Names",
              "PVs",
              "ReleaseEvent",
              "Tags",
              "ThumbUrl",
              "WebLinks"
            ]
          },
          "lang": {
            "type": "string",
            "description": "Content language preference (optional).",
            "enum": [
              "Default",
              "Japanese",
              "Romaji",
              "English"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[RatedSongForUserForApiContract]"
      }
    },
    {
      "id": "UserApi_GetSongRating",
      "title": "UserApi_GetSongRating",
      "description": "Gets a specific user's rating for a song.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User whose rating is to be checked."
          },
          "songId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the song whose rating is to be checked."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "songId"
        ]
      },
      "outputSchema": {
        "enum": [
          "Nothing",
          "Dislike",
          "Like",
          "Favorite"
        ],
        "type": "string"
      }
    },
    {
      "id": "UserApi_PostSetting",
      "title": "UserApi_PostSetting",
      "description": "Updates user setting.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the user to be updated. This must match the current user OR be unspecified (or 0) if the user is not logged in."
          },
          "settingName": {
            "type": "string",
            "description": "Name of the setting to be updated, for example 'showChatBox'."
          },
          "settingValue": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "settingName",
          "settingValue"
        ]
      },
      "outputSchema": {}
    },
    {
      "id": "UserApi_GetSongLists",
      "title": "UserApi_GetSongLists",
      "description": "Gets a list of song lists for a user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "User whose song lists are to be loaded."
          },
          "query": {
            "type": "string",
            "description": "Song list name query (optional)."
          },
          "nameMatchMode": {
            "type": "string",
            "description": "Match mode for song name (optional, defaults to Auto).",
            "enum": [
              "Auto",
              "Partial",
              "StartsWith",
              "Exact",
              "Words"
            ]
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First item to be retrieved (optional, defaults to 0)."
          },
          "maxResults": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to be loaded (optional, defaults to 10, maximum of 50)."
          },
          "getTotalCount": {
            "type": "boolean",
            "description": "Whether to load total number of items (optional, default to false)."
          },
          "sort": {
            "type": "string",
            "description": "Sort option for the song lists. Possible values are None, Name, Date, CreateDate. Default is Name.",
            "enum": [
              "None",
              "Name",
              "Date",
              "CreateDate"
            ]
          },
          "fields": {
            "type": "string",
            "description": "List of optional fields.",
            "enum": [
              "None",
              "Description",
              "MainPicture"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "id"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/PartialFindResult[SongListForApiContract]"
      }
    }
  ],
  "directory": "generated",
  "tags": [
    "media"
  ]
}