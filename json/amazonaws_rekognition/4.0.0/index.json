{
  "id": "amazonaws_rekognition",
  "title": "Amazon Rekognition",
  "description": "This is the Amazon Rekognition API reference.",
  "security": {
    "amazonaws_rekognition": {
      "integration": "amazonaws_rekognition",
      "fields": {
        "accessKeyId": "",
        "secretAccessKey": "",
        "region": "AWS region (if applicable)"
      }
    }
  },
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/amazonaws_rekognition.svg"
  },
  "actionCount": 14,
  "definitions": {
    "AccessDeniedException": {
      "description": "You are not authorized to perform the action.",
      "properties": {},
      "type": "object",
      "title": "AccessDeniedException"
    },
    "AgeRange": {
      "description": "<p>Structure containing the estimated age range, in years, for a face.</p> <p>Rekognition estimates an age-range for faces detected in the input image. Estimated age ranges can overlap; a face of a 5 year old may have an estimated range of 4-6 whilst the face of a 6 year old may have an estimated range of 4-8.</p>",
      "properties": {
        "High": {
          "$ref": "#/definitions/UInteger",
          "description": "The highest estimated age."
        },
        "Low": {
          "$ref": "#/definitions/UInteger",
          "description": "The lowest estimated age."
        }
      },
      "type": "object",
      "title": "AgeRange"
    },
    "Attribute": {
      "enum": [
        "DEFAULT",
        "ALL"
      ],
      "type": "string",
      "title": "Attribute"
    },
    "Attributes": {
      "items": {
        "$ref": "#/definitions/Attribute"
      },
      "type": "array",
      "title": "Attributes"
    },
    "Beard": {
      "description": "Indicates whether or not the face has a beard, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the face has beard or not."
        }
      },
      "type": "object",
      "title": "Beard"
    },
    "Boolean": {
      "type": "boolean",
      "title": "Boolean"
    },
    "BoundingBox": {
      "description": "<p>Identifies the bounding box around the object or face. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p> The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>",
      "properties": {
        "Height": {
          "$ref": "#/definitions/Float",
          "description": "Height of the bounding box as a ratio of the overall image height."
        },
        "Left": {
          "$ref": "#/definitions/Float",
          "description": "Left coordinate of the bounding box as a ratio of overall image width."
        },
        "Top": {
          "$ref": "#/definitions/Float",
          "description": "Top coordinate of the bounding box as a ratio of overall image height."
        },
        "Width": {
          "$ref": "#/definitions/Float",
          "description": "Width of the bounding box as a ratio of the overall image width."
        }
      },
      "type": "object",
      "title": "BoundingBox"
    },
    "Celebrity": {
      "description": "Provides information about a celebrity recognized by the operation.",
      "properties": {
        "Face": {
          "$ref": "#/definitions/ComparedFace",
          "description": "Provides information about the celebrity's face, such as its location on the image."
        },
        "Id": {
          "$ref": "#/definitions/RekognitionUniqueId",
          "description": "A unique identifier for the celebrity. "
        },
        "MatchConfidence": {
          "$ref": "#/definitions/Percent",
          "description": "The confidence, in percentage, that Rekognition has that the recognized face is the celebrity."
        },
        "Name": {
          "$ref": "#/definitions/String",
          "description": "The name of the celebrity."
        },
        "Urls": {
          "$ref": "#/definitions/Urls",
          "description": "An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty."
        }
      },
      "type": "object",
      "title": "Celebrity"
    },
    "CelebrityList": {
      "items": {
        "$ref": "#/definitions/Celebrity"
      },
      "type": "array",
      "title": "CelebrityList"
    },
    "CollectionId": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_.\\-]+",
      "type": "string",
      "title": "CollectionId"
    },
    "CollectionIdList": {
      "items": {
        "$ref": "#/definitions/CollectionId"
      },
      "type": "array",
      "title": "CollectionIdList"
    },
    "CompareFacesMatch": {
      "description": "Provides information about a face in a target image that matches the source image face analysed by <code>CompareFaces</code>. The <code>Face</code> property contains the bounding box of the face in the target image. The <code>Similarity</code> property is the confidence that the source image face matches the face in the bounding box.",
      "properties": {
        "Face": {
          "$ref": "#/definitions/ComparedFace",
          "description": "Provides face metadata (bounding box and confidence that the bounding box actually contains a face)."
        },
        "Similarity": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence that the faces match."
        }
      },
      "type": "object",
      "title": "CompareFacesMatch"
    },
    "CompareFacesMatchList": {
      "items": {
        "$ref": "#/definitions/CompareFacesMatch"
      },
      "type": "array",
      "title": "CompareFacesMatchList"
    },
    "CompareFacesRequest": {
      "example": {
        "SimilarityThreshold": 90,
        "SourceImage": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "mysourceimage"
          }
        },
        "TargetImage": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "mytargetimage"
          }
        }
      },
      "properties": {
        "SimilarityThreshold": {
          "$ref": "#/definitions/Percent",
          "description": "The minimum level of confidence in the face matches that a match must meet to be included in the <code>FaceMatches</code> array."
        },
        "SourceImage": {
          "$ref": "#/definitions/Image",
          "description": "The source image, either as bytes or as an S3 object."
        },
        "TargetImage": {
          "$ref": "#/definitions/Image",
          "description": "The target image, either as bytes or as an S3 object."
        }
      },
      "required": [
        "SourceImage",
        "TargetImage"
      ],
      "type": "object",
      "title": "CompareFacesRequest"
    },
    "CompareFacesResponse": {
      "example": {
        "FaceMatches": [
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.33481481671333313,
                "Left": 0.31888890266418457,
                "Top": 0.4933333396911621,
                "Width": 0.25
              },
              "Confidence": 99.9991226196289
            },
            "Similarity": 100
          }
        ],
        "SourceImageFace": {
          "BoundingBox": {
            "Height": 0.33481481671333313,
            "Left": 0.31888890266418457,
            "Top": 0.4933333396911621,
            "Width": 0.25
          },
          "Confidence": 99.9991226196289
        }
      },
      "properties": {
        "FaceMatches": {
          "$ref": "#/definitions/CompareFacesMatchList",
          "description": "An array of faces in the target image that match the source image face. Each <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image."
        },
        "SourceImageFace": {
          "$ref": "#/definitions/ComparedSourceImageFace",
          "description": "The face in the source image that was used for comparison."
        },
        "SourceImageOrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p> The orientation of the source image (counterclockwise direction). If your application displays the source image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>SourceImageFace</code> represent the location of the face before the image orientation is corrected. </p> <note> <p>If the source image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If the Exif metadata for the source image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>SourceImageFace</code> bounding box coordinates represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata.</p> </note>"
        },
        "TargetImageOrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p> The orientation of the target image (in counterclockwise direction). If your application displays the target image, you can use this value to correct the orientation of the image. The bounding box coordinates returned in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the target image is in .jpg format, it might contain Exif metadata that includes the orientation of the image. If the Exif metadata for the target image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata.</p> </note>"
        },
        "UnmatchedFaces": {
          "$ref": "#/definitions/CompareFacesUnmatchList",
          "description": "An array of faces in the target image that did not match the source image face."
        }
      },
      "type": "object",
      "title": "CompareFacesResponse"
    },
    "CompareFacesUnmatchList": {
      "items": {
        "$ref": "#/definitions/ComparedFace"
      },
      "type": "array",
      "title": "CompareFacesUnmatchList"
    },
    "ComparedFace": {
      "description": "Provides face metadata for target image faces that are analysed by <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.",
      "properties": {
        "BoundingBox": {
          "$ref": "#/definitions/BoundingBox",
          "description": "Bounding box of the face."
        },
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence that what the bounding box contains is a face."
        },
        "Landmarks": {
          "$ref": "#/definitions/Landmarks",
          "description": "An array of facial landmarks."
        },
        "Pose": {
          "$ref": "#/definitions/Pose",
          "description": "Indicates the pose of the face as determined by its pitch, roll, and yaw."
        },
        "Quality": {
          "$ref": "#/definitions/ImageQuality",
          "description": "Identifies face image brightness and sharpness. "
        }
      },
      "type": "object",
      "title": "ComparedFace"
    },
    "ComparedFaceList": {
      "items": {
        "$ref": "#/definitions/ComparedFace"
      },
      "type": "array",
      "title": "ComparedFaceList"
    },
    "ComparedSourceImageFace": {
      "description": "Type that describes the face Amazon Rekognition chose to compare with the faces in the target. This contains a bounding box for the selected face and confidence level that the bounding box contains a face. Note that Amazon Rekognition selects the largest face in the source image for this comparison. ",
      "properties": {
        "BoundingBox": {
          "$ref": "#/definitions/BoundingBox",
          "description": "Bounding box of the face."
        },
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Confidence level that the selected bounding box contains a face."
        }
      },
      "type": "object",
      "title": "ComparedSourceImageFace"
    },
    "CreateCollectionRequest": {
      "example": {
        "CollectionId": "myphotos"
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "ID for the collection that you are creating."
        }
      },
      "required": [
        "CollectionId"
      ],
      "type": "object",
      "title": "CreateCollectionRequest"
    },
    "CreateCollectionResponse": {
      "example": {
        "CollectionArn": "aws:rekognition:us-west-2:123456789012:collection/myphotos",
        "StatusCode": 200
      },
      "properties": {
        "CollectionArn": {
          "$ref": "#/definitions/String",
          "description": "Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources. "
        },
        "StatusCode": {
          "$ref": "#/definitions/UInteger",
          "description": "HTTP status code indicating the result of the operation."
        }
      },
      "type": "object",
      "title": "CreateCollectionResponse"
    },
    "Degree": {
      "format": "float",
      "maximum": 180,
      "minimum": -180,
      "type": "number",
      "title": "Degree"
    },
    "DeleteCollectionRequest": {
      "example": {
        "CollectionId": "myphotos"
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "ID of the collection to delete."
        }
      },
      "required": [
        "CollectionId"
      ],
      "type": "object",
      "title": "DeleteCollectionRequest"
    },
    "DeleteCollectionResponse": {
      "example": {
        "StatusCode": 200
      },
      "properties": {
        "StatusCode": {
          "$ref": "#/definitions/UInteger",
          "description": "HTTP status code that indicates the result of the operation."
        }
      },
      "type": "object",
      "title": "DeleteCollectionResponse"
    },
    "DeleteFacesRequest": {
      "example": {
        "CollectionId": "myphotos",
        "FaceIds": [
          "ff43d742-0c13-5d16-a3e8-03d3f58e980b"
        ]
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "Collection from which to remove the specific faces."
        },
        "FaceIds": {
          "$ref": "#/definitions/FaceIdList",
          "description": "An array of face IDs to delete."
        }
      },
      "required": [
        "CollectionId",
        "FaceIds"
      ],
      "type": "object",
      "title": "DeleteFacesRequest"
    },
    "DeleteFacesResponse": {
      "example": {
        "DeletedFaces": [
          "ff43d742-0c13-5d16-a3e8-03d3f58e980b"
        ]
      },
      "properties": {
        "DeletedFaces": {
          "$ref": "#/definitions/FaceIdList",
          "description": "An array of strings (face IDs) of the faces that were deleted."
        }
      },
      "type": "object",
      "title": "DeleteFacesResponse"
    },
    "DetectFacesRequest": {
      "example": {
        "Image": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "myphoto"
          }
        }
      },
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/Attributes",
          "description": "<p>An array of facial attributes you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>"
        },
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The image in which you want to detect faces. You can specify a blob or an S3 object. "
        }
      },
      "required": [
        "Image"
      ],
      "type": "object",
      "title": "DetectFacesRequest"
    },
    "DetectFacesResponse": {
      "example": {
        "FaceDetails": [
          {
            "BoundingBox": {
              "Height": 0.18000000715255737,
              "Left": 0.5555555820465088,
              "Top": 0.33666667342185974,
              "Width": 0.23999999463558197
            },
            "Confidence": 100,
            "Landmarks": [
              {
                "Type": "eyeLeft",
                "X": 0.6394737362861633,
                "Y": 0.40819624066352844
              },
              {
                "Type": "eyeRight",
                "X": 0.7266660928726196,
                "Y": 0.41039225459098816
              },
              {
                "Type": "eyeRight",
                "X": 0.6912462115287781,
                "Y": 0.44240960478782654
              },
              {
                "Type": "mouthDown",
                "X": 0.6306198239326477,
                "Y": 0.46700039505958557
              },
              {
                "Type": "mouthUp",
                "X": 0.7215608954429626,
                "Y": 0.47114261984825134
              }
            ],
            "Pose": {
              "Pitch": 4.050806522369385,
              "Roll": 0.9950747489929199,
              "Yaw": 13.693790435791016
            },
            "Quality": {
              "Brightness": 37.60169982910156,
              "Sharpness": 80
            }
          }
        ],
        "OrientationCorrection": "ROTATE_0"
      },
      "properties": {
        "FaceDetails": {
          "$ref": "#/definitions/FaceDetailList",
          "description": "Details of each face found in the image. "
        },
        "OrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceDetails</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>FaceDetails</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.</p> </note>"
        }
      },
      "type": "object",
      "title": "DetectFacesResponse"
    },
    "DetectLabelsRequest": {
      "example": {
        "Image": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "myphoto"
          }
        },
        "MaxLabels": 123,
        "MinConfidence": 70
      },
      "properties": {
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The input image. You can provide a blob of image bytes or an S3 object."
        },
        "MaxLabels": {
          "$ref": "#/definitions/UInteger",
          "description": "Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels. "
        },
        "MinConfidence": {
          "$ref": "#/definitions/Percent",
          "description": "<p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value.</p> <p>If <code>MinConfidence</code> is not specified, the operation returns labels with a confidence values greater than or equal to 50 percent.</p>"
        }
      },
      "required": [
        "Image"
      ],
      "type": "object",
      "title": "DetectLabelsRequest"
    },
    "DetectLabelsResponse": {
      "example": {
        "Labels": [
          {
            "Confidence": 99.25072479248047,
            "Name": "People"
          },
          {
            "Confidence": 99.25074005126953,
            "Name": "Person"
          }
        ]
      },
      "properties": {
        "Labels": {
          "$ref": "#/definitions/Labels",
          "description": "An array of labels for the real-world objects detected. "
        },
        "OrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects that the input image was rotated (for example, by 90 degrees), it first corrects the orientation before detecting the labels. </p> <note> <p>If the input image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be null.</p> </note>"
        }
      },
      "type": "object",
      "title": "DetectLabelsResponse"
    },
    "DetectModerationLabelsRequest": {
      "properties": {
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The input image as bytes or an S3 object."
        },
        "MinConfidence": {
          "$ref": "#/definitions/Percent",
          "description": "<p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value.</p> <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p>"
        }
      },
      "required": [
        "Image"
      ],
      "type": "object",
      "title": "DetectModerationLabelsRequest"
    },
    "DetectModerationLabelsResponse": {
      "properties": {
        "ModerationLabels": {
          "$ref": "#/definitions/ModerationLabels",
          "description": "An array of labels for explicit or suggestive adult content found in the image. The list includes the top-level label and each child label detected in the image. This is useful for filtering specific categories of content. "
        }
      },
      "type": "object",
      "title": "DetectModerationLabelsResponse"
    },
    "Emotion": {
      "description": "The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Type": {
          "$ref": "#/definitions/EmotionName",
          "description": "Type of emotion detected."
        }
      },
      "type": "object",
      "title": "Emotion"
    },
    "EmotionName": {
      "enum": [
        "HAPPY",
        "SAD",
        "ANGRY",
        "CONFUSED",
        "DISGUSTED",
        "SURPRISED",
        "CALM",
        "UNKNOWN"
      ],
      "type": "string",
      "title": "EmotionName"
    },
    "Emotions": {
      "items": {
        "$ref": "#/definitions/Emotion"
      },
      "type": "array",
      "title": "Emotions"
    },
    "ExternalImageId": {
      "maxLength": 255,
      "minLength": 1,
      "pattern": "[a-zA-Z0-9_.\\-:]+",
      "type": "string",
      "title": "ExternalImageId"
    },
    "EyeOpen": {
      "description": "Indicates whether or not the eyes on the face are open, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the eyes on the face are open."
        }
      },
      "type": "object",
      "title": "EyeOpen"
    },
    "Eyeglasses": {
      "description": "Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the face is wearing eye glasses or not."
        }
      },
      "type": "object",
      "title": "Eyeglasses"
    },
    "Face": {
      "description": "Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. ",
      "properties": {
        "BoundingBox": {
          "$ref": "#/definitions/BoundingBox",
          "description": "Bounding box of the face."
        },
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Confidence level that the bounding box contains a face (and not a different object such as a tree)."
        },
        "ExternalImageId": {
          "$ref": "#/definitions/ExternalImageId",
          "description": "Identifier that you assign to all the faces in the input image."
        },
        "FaceId": {
          "$ref": "#/definitions/FaceId",
          "description": "Unique identifier that Amazon Rekognition assigns to the face."
        },
        "ImageId": {
          "$ref": "#/definitions/ImageId",
          "description": "Unique identifier that Amazon Rekognition assigns to the input image."
        }
      },
      "type": "object",
      "title": "Face"
    },
    "FaceDetail": {
      "description": "Structure containing attributes of the face that the algorithm detected.",
      "properties": {
        "AgeRange": {
          "$ref": "#/definitions/AgeRange",
          "description": "The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age."
        },
        "Beard": {
          "$ref": "#/definitions/Beard",
          "description": "Indicates whether or not the face has a beard, and the confidence level in the determination."
        },
        "BoundingBox": {
          "$ref": "#/definitions/BoundingBox",
          "description": "Bounding box of the face."
        },
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Confidence level that the bounding box contains a face (and not a different object such as a tree)."
        },
        "Emotions": {
          "$ref": "#/definitions/Emotions",
          "description": "The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. "
        },
        "Eyeglasses": {
          "$ref": "#/definitions/Eyeglasses",
          "description": "Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination."
        },
        "EyesOpen": {
          "$ref": "#/definitions/EyeOpen",
          "description": "Indicates whether or not the eyes on the face are open, and the confidence level in the determination."
        },
        "Gender": {
          "$ref": "#/definitions/Gender",
          "description": "Gender of the face and the confidence level in the determination."
        },
        "Landmarks": {
          "$ref": "#/definitions/Landmarks",
          "description": "Indicates the location of landmarks on the face."
        },
        "MouthOpen": {
          "$ref": "#/definitions/MouthOpen",
          "description": "Indicates whether or not the mouth on the face is open, and the confidence level in the determination."
        },
        "Mustache": {
          "$ref": "#/definitions/Mustache",
          "description": "Indicates whether or not the face has a mustache, and the confidence level in the determination."
        },
        "Pose": {
          "$ref": "#/definitions/Pose",
          "description": "Indicates the pose of the face as determined by its pitch, roll, and yaw."
        },
        "Quality": {
          "$ref": "#/definitions/ImageQuality",
          "description": "Identifies image brightness and sharpness."
        },
        "Smile": {
          "$ref": "#/definitions/Smile",
          "description": "Indicates whether or not the face is smiling, and the confidence level in the determination."
        },
        "Sunglasses": {
          "$ref": "#/definitions/Sunglasses",
          "description": "Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination."
        }
      },
      "type": "object",
      "title": "FaceDetail"
    },
    "FaceDetailList": {
      "items": {
        "$ref": "#/definitions/FaceDetail"
      },
      "type": "array",
      "title": "FaceDetailList"
    },
    "FaceId": {
      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
      "type": "string",
      "title": "FaceId"
    },
    "FaceIdList": {
      "items": {
        "$ref": "#/definitions/FaceId"
      },
      "maxItems": 4096,
      "minItems": 1,
      "type": "array",
      "title": "FaceIdList"
    },
    "FaceList": {
      "items": {
        "$ref": "#/definitions/Face"
      },
      "type": "array",
      "title": "FaceList"
    },
    "FaceMatch": {
      "description": "Provides face metadata. In addition, it also provides the confidence in the match of this face with the input face.",
      "properties": {
        "Face": {
          "$ref": "#/definitions/Face",
          "description": "Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned."
        },
        "Similarity": {
          "$ref": "#/definitions/Percent",
          "description": "Confidence in the match of this face with the input face."
        }
      },
      "type": "object",
      "title": "FaceMatch"
    },
    "FaceMatchList": {
      "items": {
        "$ref": "#/definitions/FaceMatch"
      },
      "type": "array",
      "title": "FaceMatchList"
    },
    "FaceRecord": {
      "description": "Object containing both the face metadata (stored in the back-end database) and facial attributes that are detected but aren't stored in the database.",
      "properties": {
        "Face": {
          "$ref": "#/definitions/Face",
          "description": "Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. "
        },
        "FaceDetail": {
          "$ref": "#/definitions/FaceDetail",
          "description": "Structure containing attributes of the face that the algorithm detected."
        }
      },
      "type": "object",
      "title": "FaceRecord"
    },
    "FaceRecordList": {
      "items": {
        "$ref": "#/definitions/FaceRecord"
      },
      "type": "array",
      "title": "FaceRecordList"
    },
    "Float": {
      "format": "float",
      "type": "number",
      "title": "Float"
    },
    "Gender": {
      "description": "Gender of the face and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/GenderType",
          "description": "Gender of the face."
        }
      },
      "type": "object",
      "title": "Gender"
    },
    "GenderType": {
      "enum": [
        "Male",
        "Female"
      ],
      "type": "string",
      "title": "GenderType"
    },
    "GetCelebrityInfoRequest": {
      "properties": {
        "Id": {
          "$ref": "#/definitions/RekognitionUniqueId",
          "description": "The ID for the celebrity. You get the celebrity ID from a call to the operation, which recognizes celebrities in an image. "
        }
      },
      "required": [
        "Id"
      ],
      "type": "object",
      "title": "GetCelebrityInfoRequest"
    },
    "GetCelebrityInfoResponse": {
      "properties": {
        "Name": {
          "$ref": "#/definitions/String",
          "description": "The name of the celebrity."
        },
        "Urls": {
          "$ref": "#/definitions/Urls",
          "description": "An array of URLs pointing to additional celebrity information. "
        }
      },
      "type": "object",
      "title": "GetCelebrityInfoResponse"
    },
    "Image": {
      "description": "<p>Provides the input image either as bytes or an S3 object.</p> <p>You pass image bytes to a Rekognition API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass an image loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Rekognition API operations. For more information, see <a>example4</a>.</p> <p> You pass images stored in an S3 bucket to a Rekognition API operation by using the <code>S3Object</code> property. Images stored in an S3 bucket do not need to be base64-encoded.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see <a>manage-access-resource-policies</a>. </p>",
      "properties": {
        "Bytes": {
          "$ref": "#/definitions/ImageBlob",
          "description": "Blob of image bytes up to 5 MBs."
        },
        "S3Object": {
          "$ref": "#/definitions/S3Object",
          "description": "Identifies an S3 object as the image source."
        }
      },
      "type": "object",
      "title": "Image"
    },
    "ImageBlob": {
      "maxLength": 5242880,
      "minLength": 1,
      "type": "string",
      "title": "ImageBlob"
    },
    "ImageId": {
      "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
      "type": "string",
      "title": "ImageId"
    },
    "ImageQuality": {
      "description": "Identifies face image brightness and sharpness. ",
      "properties": {
        "Brightness": {
          "$ref": "#/definitions/Float",
          "description": "Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image."
        },
        "Sharpness": {
          "$ref": "#/definitions/Float",
          "description": "Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image."
        }
      },
      "type": "object",
      "title": "ImageQuality"
    },
    "ImageTooLargeException": {
      "description": "The input image size exceeds the allowed limit. For more information, see <a>limits</a>. ",
      "properties": {},
      "type": "object",
      "title": "ImageTooLargeException"
    },
    "IndexFacesRequest": {
      "example": {
        "CollectionId": "myphotos",
        "DetectionAttributes": [],
        "ExternalImageId": "myphotoid",
        "Image": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "myphoto"
          }
        }
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "The ID of an existing collection to which you want to add the faces that are detected in the input images."
        },
        "DetectionAttributes": {
          "$ref": "#/definitions/Attributes",
          "description": "<p>An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>[\"DEFAULT\"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>[\"ALL\"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>[\"ALL\", \"DEFAULT\"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>"
        },
        "ExternalImageId": {
          "$ref": "#/definitions/ExternalImageId",
          "description": "ID you want to assign to all the faces detected in the image."
        },
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The input image as bytes or an S3 object."
        }
      },
      "required": [
        "CollectionId",
        "Image"
      ],
      "type": "object",
      "title": "IndexFacesRequest"
    },
    "IndexFacesResponse": {
      "example": {
        "FaceRecords": [
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.33481481671333313,
                "Left": 0.31888890266418457,
                "Top": 0.4933333396911621,
                "Width": 0.25
              },
              "Confidence": 99.9991226196289,
              "FaceId": "ff43d742-0c13-5d16-a3e8-03d3f58e980b",
              "ImageId": "465f4e93-763e-51d0-b030-b9667a2d94b1"
            },
            "FaceDetail": {
              "BoundingBox": {
                "Height": 0.33481481671333313,
                "Left": 0.31888890266418457,
                "Top": 0.4933333396911621,
                "Width": 0.25
              },
              "Confidence": 99.9991226196289,
              "Landmarks": [
                {
                  "Type": "eyeLeft",
                  "X": 0.3976764678955078,
                  "Y": 0.6248345971107483
                },
                {
                  "Type": "eyeRight",
                  "X": 0.4810936450958252,
                  "Y": 0.6317117214202881
                },
                {
                  "Type": "noseLeft",
                  "X": 0.41986238956451416,
                  "Y": 0.7111940383911133
                },
                {
                  "Type": "mouthDown",
                  "X": 0.40525302290916443,
                  "Y": 0.7497701048851013
                },
                {
                  "Type": "mouthUp",
                  "X": 0.4753248989582062,
                  "Y": 0.7558549642562866
                }
              ],
              "Pose": {
                "Pitch": -9.713645935058594,
                "Roll": 4.707281112670898,
                "Yaw": -24.438663482666016
              },
              "Quality": {
                "Brightness": 29.23358917236328,
                "Sharpness": 80
              }
            }
          },
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.32592591643333435,
                "Left": 0.5144444704055786,
                "Top": 0.15111111104488373,
                "Width": 0.24444444477558136
              },
              "Confidence": 99.99950408935547,
              "FaceId": "8be04dba-4e58-520d-850e-9eae4af70eb2",
              "ImageId": "465f4e93-763e-51d0-b030-b9667a2d94b1"
            },
            "FaceDetail": {
              "BoundingBox": {
                "Height": 0.32592591643333435,
                "Left": 0.5144444704055786,
                "Top": 0.15111111104488373,
                "Width": 0.24444444477558136
              },
              "Confidence": 99.99950408935547,
              "Landmarks": [
                {
                  "Type": "eyeLeft",
                  "X": 0.6006892323493958,
                  "Y": 0.290842205286026
                },
                {
                  "Type": "eyeRight",
                  "X": 0.6808141469955444,
                  "Y": 0.29609042406082153
                },
                {
                  "Type": "noseLeft",
                  "X": 0.6395332217216492,
                  "Y": 0.3522595763206482
                },
                {
                  "Type": "mouthDown",
                  "X": 0.5892083048820496,
                  "Y": 0.38689887523651123
                },
                {
                  "Type": "mouthUp",
                  "X": 0.674560010433197,
                  "Y": 0.394125759601593
                }
              ],
              "Pose": {
                "Pitch": -4.683138370513916,
                "Roll": 2.1029529571533203,
                "Yaw": 6.716655254364014
              },
              "Quality": {
                "Brightness": 34.951698303222656,
                "Sharpness": 160
              }
            }
          }
        ],
        "OrientationCorrection": "ROTATE_0"
      },
      "properties": {
        "FaceRecords": {
          "$ref": "#/definitions/FaceRecordList",
          "description": "An array of faces detected and added to the collection. For more information, see <a>howitworks-index-faces</a>. "
        },
        "OrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceRecords</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in jpeg format, it might contain exchangeable image (Exif) metadata. If so, and the Exif metadata populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceRecords</code> represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata.</p> </note>"
        }
      },
      "type": "object",
      "title": "IndexFacesResponse"
    },
    "InternalServerError": {
      "description": "Amazon Rekognition experienced a service issue. Try your call again.",
      "properties": {},
      "type": "object",
      "title": "InternalServerError"
    },
    "InvalidImageFormatException": {
      "description": "The provided image format is not supported. ",
      "properties": {},
      "type": "object",
      "title": "InvalidImageFormatException"
    },
    "InvalidPaginationTokenException": {
      "description": "Pagination token in the request is not valid.",
      "properties": {},
      "type": "object",
      "title": "InvalidPaginationTokenException"
    },
    "InvalidParameterException": {
      "description": "Input parameter violated a constraint. Validate your parameter before calling the API operation again.",
      "properties": {},
      "type": "object",
      "title": "InvalidParameterException"
    },
    "InvalidS3ObjectException": {
      "description": "Amazon Rekognition is unable to access the S3 object specified in the request.",
      "properties": {},
      "type": "object",
      "title": "InvalidS3ObjectException"
    },
    "Label": {
      "description": "Structure containing details about the detected label, including name, and level of confidence.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence."
        },
        "Name": {
          "$ref": "#/definitions/String",
          "description": "The name (label) of the object."
        }
      },
      "type": "object",
      "title": "Label"
    },
    "Labels": {
      "items": {
        "$ref": "#/definitions/Label"
      },
      "type": "array",
      "title": "Labels"
    },
    "Landmark": {
      "description": "Indicates the location of the landmark on the face.",
      "properties": {
        "Type": {
          "$ref": "#/definitions/LandmarkType",
          "description": "Type of the landmark."
        },
        "X": {
          "$ref": "#/definitions/Float",
          "description": "x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. "
        },
        "Y": {
          "$ref": "#/definitions/Float",
          "description": "y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5."
        }
      },
      "type": "object",
      "title": "Landmark"
    },
    "LandmarkType": {
      "enum": [
        "eyeLeft",
        "eyeRight",
        "nose",
        "mouthLeft",
        "mouthRight",
        "leftEyeBrowLeft",
        "leftEyeBrowRight",
        "leftEyeBrowUp",
        "rightEyeBrowLeft",
        "rightEyeBrowRight",
        "rightEyeBrowUp",
        "leftEyeLeft",
        "leftEyeRight",
        "leftEyeUp",
        "leftEyeDown",
        "rightEyeLeft",
        "rightEyeRight",
        "rightEyeUp",
        "rightEyeDown",
        "noseLeft",
        "noseRight",
        "mouthUp",
        "mouthDown",
        "leftPupil",
        "rightPupil"
      ],
      "type": "string",
      "title": "LandmarkType"
    },
    "Landmarks": {
      "items": {
        "$ref": "#/definitions/Landmark"
      },
      "type": "array",
      "title": "Landmarks"
    },
    "ListCollectionsRequest": {
      "example": {},
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "Maximum number of collection IDs to return."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationToken",
          "description": "Pagination token from the previous response."
        }
      },
      "type": "object",
      "title": "ListCollectionsRequest"
    },
    "ListCollectionsResponse": {
      "example": {
        "CollectionIds": [
          "myphotos"
        ]
      },
      "properties": {
        "CollectionIds": {
          "$ref": "#/definitions/CollectionIdList",
          "description": "An array of collection IDs."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationToken",
          "description": "If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs."
        }
      },
      "type": "object",
      "title": "ListCollectionsResponse"
    },
    "ListFacesRequest": {
      "example": {
        "CollectionId": "myphotos",
        "MaxResults": 20
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "ID of the collection from which to list the faces."
        },
        "MaxResults": {
          "$ref": "#/definitions/PageSize",
          "description": "Maximum number of faces to return."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationToken",
          "description": "If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces."
        }
      },
      "required": [
        "CollectionId"
      ],
      "type": "object",
      "title": "ListFacesRequest"
    },
    "ListFacesResponse": {
      "example": {
        "Faces": [
          {
            "BoundingBox": {
              "Height": 0.18000000715255737,
              "Left": 0.5555559992790222,
              "Top": 0.336667001247406,
              "Width": 0.23999999463558197
            },
            "Confidence": 100,
            "FaceId": "1c62e8b5-69a7-5b7d-b3cd-db4338a8a7e7",
            "ImageId": "147fdf82-7a71-52cf-819b-e786c7b9746e"
          },
          {
            "BoundingBox": {
              "Height": 0.16555599868297577,
              "Left": 0.30963000655174255,
              "Top": 0.7066670060157776,
              "Width": 0.22074100375175476
            },
            "Confidence": 100,
            "FaceId": "29a75abe-397b-5101-ba4f-706783b2246c",
            "ImageId": "147fdf82-7a71-52cf-819b-e786c7b9746e"
          },
          {
            "BoundingBox": {
              "Height": 0.3234420120716095,
              "Left": 0.3233329951763153,
              "Top": 0.5,
              "Width": 0.24222199618816376
            },
            "Confidence": 99.99829864501953,
            "FaceId": "38271d79-7bc2-5efb-b752-398a8d575b85",
            "ImageId": "d5631190-d039-54e4-b267-abd22c8647c5"
          },
          {
            "BoundingBox": {
              "Height": 0.03555560111999512,
              "Left": 0.37388700246810913,
              "Top": 0.2477779984474182,
              "Width": 0.04747769981622696
            },
            "Confidence": 99.99210357666016,
            "FaceId": "3b01bef0-c883-5654-ba42-d5ad28b720b3",
            "ImageId": "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
          },
          {
            "BoundingBox": {
              "Height": 0.05333330109715462,
              "Left": 0.2937690019607544,
              "Top": 0.35666701197624207,
              "Width": 0.07121659815311432
            },
            "Confidence": 99.99919891357422,
            "FaceId": "4839a608-49d0-566c-8301-509d71b534d1",
            "ImageId": "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
          },
          {
            "BoundingBox": {
              "Height": 0.3249259889125824,
              "Left": 0.5155559778213501,
              "Top": 0.1513350009918213,
              "Width": 0.24333299696445465
            },
            "Confidence": 99.99949645996094,
            "FaceId": "70008e50-75e4-55d0-8e80-363fb73b3a14",
            "ImageId": "d5631190-d039-54e4-b267-abd22c8647c5"
          },
          {
            "BoundingBox": {
              "Height": 0.03777780011296272,
              "Left": 0.7002969980239868,
              "Top": 0.18777799606323242,
              "Width": 0.05044509842991829
            },
            "Confidence": 99.92639923095703,
            "FaceId": "7f5f88ed-d684-5a88-b0df-01e4a521552b",
            "ImageId": "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
          },
          {
            "BoundingBox": {
              "Height": 0.05555560067296028,
              "Left": 0.13946600258350372,
              "Top": 0.46333301067352295,
              "Width": 0.07270029932260513
            },
            "Confidence": 99.99469757080078,
            "FaceId": "895b4e2c-81de-5902-a4bd-d1792bda00b2",
            "ImageId": "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
          },
          {
            "BoundingBox": {
              "Height": 0.3259260058403015,
              "Left": 0.5144439935684204,
              "Top": 0.15111100673675537,
              "Width": 0.24444399774074554
            },
            "Confidence": 99.99949645996094,
            "FaceId": "8be04dba-4e58-520d-850e-9eae4af70eb2",
            "ImageId": "465f4e93-763e-51d0-b030-b9667a2d94b1"
          },
          {
            "BoundingBox": {
              "Height": 0.18888899683952332,
              "Left": 0.3783380091190338,
              "Top": 0.2355560064315796,
              "Width": 0.25222599506378174
            },
            "Confidence": 99.9999008178711,
            "FaceId": "908544ad-edc3-59df-8faf-6a87cc256cf5",
            "ImageId": "3c731605-d772-541a-a5e7-0375dbc68a07"
          },
          {
            "BoundingBox": {
              "Height": 0.33481499552726746,
              "Left": 0.31888899207115173,
              "Top": 0.49333301186561584,
              "Width": 0.25
            },
            "Confidence": 99.99909973144531,
            "FaceId": "ff43d742-0c13-5d16-a3e8-03d3f58e980b",
            "ImageId": "465f4e93-763e-51d0-b030-b9667a2d94b1"
          }
        ]
      },
      "properties": {
        "Faces": {
          "$ref": "#/definitions/FaceList",
          "description": "An array of <code>Face</code> objects. "
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces."
        }
      },
      "type": "object",
      "title": "ListFacesResponse"
    },
    "MaxFaces": {
      "maximum": 4096,
      "minimum": 1,
      "type": "integer",
      "title": "MaxFaces"
    },
    "ModerationLabel": {
      "description": "Provides information about a single type of moderated content found in an image. Each type of moderated content has a label within a hierarchical taxonomy. For more information, see <a>image-moderation</a>.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "<p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p> <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>"
        },
        "Name": {
          "$ref": "#/definitions/String",
          "description": "The label name for the type of content detected in the image."
        },
        "ParentName": {
          "$ref": "#/definitions/String",
          "description": "The name for the parent label. Labels at the top-level of the hierarchy have the parent label <code>\"\"</code>."
        }
      },
      "type": "object",
      "title": "ModerationLabel"
    },
    "ModerationLabels": {
      "items": {
        "$ref": "#/definitions/ModerationLabel"
      },
      "type": "array",
      "title": "ModerationLabels"
    },
    "MouthOpen": {
      "description": "Indicates whether or not the mouth on the face is open, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the mouth on the face is open or not."
        }
      },
      "type": "object",
      "title": "MouthOpen"
    },
    "Mustache": {
      "description": "Indicates whether or not the face has a mustache, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the face has mustache or not."
        }
      },
      "type": "object",
      "title": "Mustache"
    },
    "OrientationCorrection": {
      "enum": [
        "ROTATE_0",
        "ROTATE_90",
        "ROTATE_180",
        "ROTATE_270"
      ],
      "type": "string",
      "title": "OrientationCorrection"
    },
    "PageSize": {
      "maximum": 4096,
      "minimum": 0,
      "type": "integer",
      "title": "PageSize"
    },
    "PaginationToken": {
      "maxLength": 255,
      "type": "string",
      "title": "PaginationToken"
    },
    "Percent": {
      "format": "float",
      "maximum": 100,
      "minimum": 0,
      "type": "number",
      "title": "Percent"
    },
    "Pose": {
      "description": "Indicates the pose of the face as determined by its pitch, roll, and yaw.",
      "properties": {
        "Pitch": {
          "$ref": "#/definitions/Degree",
          "description": "Value representing the face rotation on the pitch axis."
        },
        "Roll": {
          "$ref": "#/definitions/Degree",
          "description": "Value representing the face rotation on the roll axis."
        },
        "Yaw": {
          "$ref": "#/definitions/Degree",
          "description": "Value representing the face rotation on the yaw axis."
        }
      },
      "type": "object",
      "title": "Pose"
    },
    "ProvisionedThroughputExceededException": {
      "description": "The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Rekognition.",
      "properties": {},
      "type": "object",
      "title": "ProvisionedThroughputExceededException"
    },
    "RecognizeCelebritiesRequest": {
      "properties": {
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The input image to use for celebrity recognition."
        }
      },
      "required": [
        "Image"
      ],
      "type": "object",
      "title": "RecognizeCelebritiesRequest"
    },
    "RecognizeCelebritiesResponse": {
      "properties": {
        "CelebrityFaces": {
          "$ref": "#/definitions/CelebrityList",
          "description": "Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15 celebrities in an image."
        },
        "OrientationCorrection": {
          "$ref": "#/definitions/OrientationCorrection",
          "description": "<p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. </p> </note>"
        },
        "UnrecognizedFaces": {
          "$ref": "#/definitions/ComparedFaceList",
          "description": "Details about each unrecognized face in the image."
        }
      },
      "type": "object",
      "title": "RecognizeCelebritiesResponse"
    },
    "RekognitionUniqueId": {
      "pattern": "[0-9A-Za-z]*",
      "type": "string",
      "title": "RekognitionUniqueId"
    },
    "ResourceAlreadyExistsException": {
      "description": "A collection with the specified ID already exists.",
      "properties": {},
      "type": "object",
      "title": "ResourceAlreadyExistsException"
    },
    "ResourceNotFoundException": {
      "description": "Collection specified in the request is not found.",
      "properties": {},
      "type": "object",
      "title": "ResourceNotFoundException"
    },
    "S3Bucket": {
      "maxLength": 255,
      "minLength": 3,
      "pattern": "[0-9A-Za-z\\.\\-_]*",
      "type": "string",
      "title": "S3Bucket"
    },
    "S3Object": {
      "description": "<p>Provides the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see <a>manage-access-resource-policies</a>. </p>",
      "properties": {
        "Bucket": {
          "$ref": "#/definitions/S3Bucket",
          "description": "Name of the S3 bucket."
        },
        "Name": {
          "$ref": "#/definitions/S3ObjectName",
          "description": "S3 object key name."
        },
        "Version": {
          "$ref": "#/definitions/S3ObjectVersion",
          "description": "If the bucket is versioning enabled, you can specify the object version. "
        }
      },
      "type": "object",
      "title": "S3Object"
    },
    "S3ObjectName": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string",
      "title": "S3ObjectName"
    },
    "S3ObjectVersion": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string",
      "title": "S3ObjectVersion"
    },
    "SearchFacesByImageRequest": {
      "example": {
        "CollectionId": "myphotos",
        "FaceMatchThreshold": 95,
        "Image": {
          "S3Object": {
            "Bucket": "mybucket",
            "Name": "myphoto"
          }
        },
        "MaxFaces": 5
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "ID of the collection to search."
        },
        "FaceMatchThreshold": {
          "$ref": "#/definitions/Percent",
          "description": "(Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%."
        },
        "Image": {
          "$ref": "#/definitions/Image",
          "description": "The input image as bytes or an S3 object."
        },
        "MaxFaces": {
          "$ref": "#/definitions/MaxFaces",
          "description": "Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match."
        }
      },
      "required": [
        "CollectionId",
        "Image"
      ],
      "type": "object",
      "title": "SearchFacesByImageRequest"
    },
    "SearchFacesByImageResponse": {
      "example": {
        "FaceMatches": [
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.3234420120716095,
                "Left": 0.3233329951763153,
                "Top": 0.5,
                "Width": 0.24222199618816376
              },
              "Confidence": 99.99829864501953,
              "FaceId": "38271d79-7bc2-5efb-b752-398a8d575b85",
              "ImageId": "d5631190-d039-54e4-b267-abd22c8647c5"
            },
            "Similarity": 99.97036743164062
          }
        ],
        "SearchedFaceBoundingBox": {
          "Height": 0.33481481671333313,
          "Left": 0.31888890266418457,
          "Top": 0.4933333396911621,
          "Width": 0.25
        },
        "SearchedFaceConfidence": 99.9991226196289
      },
      "properties": {
        "FaceMatches": {
          "$ref": "#/definitions/FaceMatchList",
          "description": "An array of faces that match the input face, along with the confidence in the match."
        },
        "SearchedFaceBoundingBox": {
          "$ref": "#/definitions/BoundingBox",
          "description": "The bounding box around the face in the input image that Amazon Rekognition used for the search."
        },
        "SearchedFaceConfidence": {
          "$ref": "#/definitions/Percent",
          "description": "The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a face."
        }
      },
      "type": "object",
      "title": "SearchFacesByImageResponse"
    },
    "SearchFacesRequest": {
      "example": {
        "CollectionId": "myphotos",
        "FaceId": "70008e50-75e4-55d0-8e80-363fb73b3a14",
        "FaceMatchThreshold": 90,
        "MaxFaces": 10
      },
      "properties": {
        "CollectionId": {
          "$ref": "#/definitions/CollectionId",
          "description": "ID of the collection the face belongs to."
        },
        "FaceId": {
          "$ref": "#/definitions/FaceId",
          "description": "ID of a face to find matches for in the collection."
        },
        "FaceMatchThreshold": {
          "$ref": "#/definitions/Percent",
          "description": "Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%."
        },
        "MaxFaces": {
          "$ref": "#/definitions/MaxFaces",
          "description": "Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match."
        }
      },
      "required": [
        "CollectionId",
        "FaceId"
      ],
      "type": "object",
      "title": "SearchFacesRequest"
    },
    "SearchFacesResponse": {
      "example": {
        "FaceMatches": [
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.3259260058403015,
                "Left": 0.5144439935684204,
                "Top": 0.15111100673675537,
                "Width": 0.24444399774074554
              },
              "Confidence": 99.99949645996094,
              "FaceId": "8be04dba-4e58-520d-850e-9eae4af70eb2",
              "ImageId": "465f4e93-763e-51d0-b030-b9667a2d94b1"
            },
            "Similarity": 99.97222137451172
          },
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.16555599868297577,
                "Left": 0.30963000655174255,
                "Top": 0.7066670060157776,
                "Width": 0.22074100375175476
              },
              "Confidence": 100,
              "FaceId": "29a75abe-397b-5101-ba4f-706783b2246c",
              "ImageId": "147fdf82-7a71-52cf-819b-e786c7b9746e"
            },
            "Similarity": 97.04154968261719
          },
          {
            "Face": {
              "BoundingBox": {
                "Height": 0.18888899683952332,
                "Left": 0.3783380091190338,
                "Top": 0.2355560064315796,
                "Width": 0.25222599506378174
              },
              "Confidence": 99.9999008178711,
              "FaceId": "908544ad-edc3-59df-8faf-6a87cc256cf5",
              "ImageId": "3c731605-d772-541a-a5e7-0375dbc68a07"
            },
            "Similarity": 95.94520568847656
          }
        ],
        "SearchedFaceId": "70008e50-75e4-55d0-8e80-363fb73b3a14"
      },
      "properties": {
        "FaceMatches": {
          "$ref": "#/definitions/FaceMatchList",
          "description": "An array of faces that matched the input face, along with the confidence in the match."
        },
        "SearchedFaceId": {
          "$ref": "#/definitions/FaceId",
          "description": "ID of the face that was searched for matches in a collection."
        }
      },
      "type": "object",
      "title": "SearchFacesResponse"
    },
    "Smile": {
      "description": "Indicates whether or not the face is smiling, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the face is smiling or not."
        }
      },
      "type": "object",
      "title": "Smile"
    },
    "String": {
      "type": "string",
      "title": "String"
    },
    "Sunglasses": {
      "description": "Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.",
      "properties": {
        "Confidence": {
          "$ref": "#/definitions/Percent",
          "description": "Level of confidence in the determination."
        },
        "Value": {
          "$ref": "#/definitions/Boolean",
          "description": "Boolean value that indicates whether the face is wearing sunglasses or not."
        }
      },
      "type": "object",
      "title": "Sunglasses"
    },
    "ThrottlingException": {
      "description": "Amazon Rekognition is temporarily unable to process the request. Try your call again.",
      "properties": {},
      "type": "object",
      "title": "ThrottlingException"
    },
    "UInteger": {
      "minimum": 0,
      "type": "integer",
      "title": "UInteger"
    },
    "Url": {
      "type": "string",
      "title": "Url"
    },
    "Urls": {
      "items": {
        "$ref": "#/definitions/Url"
      },
      "type": "array",
      "title": "Urls"
    }
  },
  "actions": [
    {
      "id": "CompareFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/CompareFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CompareFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "CreateCollection",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/CreateCollectionRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateCollectionResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "DeleteCollection",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DeleteCollectionRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteCollectionResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "DeleteFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DeleteFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "DetectFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DetectFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetectFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "DetectLabels",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DetectLabelsRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetectLabelsResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "DetectModerationLabels",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/DetectModerationLabelsRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DetectModerationLabelsResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "GetCelebrityInfo",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/GetCelebrityInfoRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/GetCelebrityInfoResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "IndexFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/IndexFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/IndexFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "ListCollections",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "MaxResults": {
            "type": "string"
          },
          "NextToken": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/ListCollectionsRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListCollectionsResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "ListFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "MaxResults": {
            "type": "string"
          },
          "NextToken": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/definitions/ListFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "RecognizeCelebrities",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/RecognizeCelebritiesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RecognizeCelebritiesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "SearchFaces",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/SearchFacesRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/SearchFacesResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    },
    {
      "id": "SearchFacesByImage",
      "title": "",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "allOf": [
          {
            "$ref": "#/definitions/SearchFacesByImageRequest"
          }
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/SearchFacesByImageResponse"
      },
      "security": {
        "amazonaws_rekognition": {
          "integration": "amazonaws_rekognition"
        }
      }
    }
  ],
  "directory": "generated",
  "tags": [
    "cloud",
    "aws"
  ]
}