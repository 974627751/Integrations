{
  "id": "google_partners",
  "title": "Google Partners",
  "description": "Searches certified companies and creates contact leads with them, and also audits the usage of clients.",
  "security": {},
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/google_partners.jpg"
  },
  "actionCount": 18,
  "definitions": {
    "AdWordsManagerAccountInfo": {
      "description": "Information about a particular AdWords Manager Account.\nRead more at https://support.google.com/adwords/answer/6139186",
      "properties": {
        "customerName": {
          "description": "Name of the customer this account represents.",
          "type": "string"
        },
        "id": {
          "description": "The AdWords Manager Account id.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "title": "AdWordsManagerAccountInfo"
    },
    "Analytics": {
      "description": "Analytics data for a `Company` within a single day.",
      "properties": {
        "contacts": {
          "$ref": "#/definitions/AnalyticsDataPoint",
          "description": "Instances of users contacting the `Company`\non the specified date."
        },
        "eventDate": {
          "$ref": "#/definitions/Date",
          "description": "Date on which these events occurred."
        },
        "profileViews": {
          "$ref": "#/definitions/AnalyticsDataPoint",
          "description": "Instances of users viewing the `Company` profile\non the specified date."
        },
        "searchViews": {
          "$ref": "#/definitions/AnalyticsDataPoint",
          "description": "Instances of users seeing the `Company` in Google Partners Search results\non the specified date."
        }
      },
      "type": "object",
      "title": "Analytics"
    },
    "AnalyticsDataPoint": {
      "description": "Details of the analytics events for a `Company` within a single day.",
      "properties": {
        "eventCount": {
          "description": "Number of times the type of event occurred.\nMeaning depends on context (e.g. profile views, contacts, etc.).",
          "format": "int32",
          "type": "integer"
        },
        "eventLocations": {
          "description": "Location information of where these events occurred.",
          "items": {
            "$ref": "#/definitions/LatLng"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "AnalyticsDataPoint"
    },
    "AnalyticsSummary": {
      "description": "Analytics aggregated data for a `Company` for a given date range.",
      "properties": {
        "contactsCount": {
          "description": "Aggregated number of times users contacted the `Company`\nfor given date range.",
          "format": "int32",
          "type": "integer"
        },
        "profileViewsCount": {
          "description": "Aggregated number of profile views for the `Company` for given date range.",
          "format": "int32",
          "type": "integer"
        },
        "searchViewsCount": {
          "description": "Aggregated number of times users saw the `Company`\nin Google Partners Search results for given date range.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "AnalyticsSummary"
    },
    "AvailableOffer": {
      "description": "Available Offers to be distributed.",
      "properties": {
        "available": {
          "description": "The number of codes for this offer that are available for distribution.",
          "format": "int32",
          "type": "integer"
        },
        "countryOfferInfos": {
          "description": "Offer info by country.",
          "items": {
            "$ref": "#/definitions/CountryOfferInfo"
          },
          "type": "array"
        },
        "description": {
          "description": "Description of the offer.",
          "type": "string"
        },
        "id": {
          "description": "ID of this offer.",
          "format": "int64",
          "type": "string"
        },
        "maxAccountAge": {
          "description": "The maximum age of an account [in days] to be eligible.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of the offer.",
          "type": "string"
        },
        "offerLevel": {
          "description": "Level of this offer.",
          "enum": [
            "OFFER_LEVEL_UNSPECIFIED",
            "OFFER_LEVEL_DENY_PROBLEM",
            "OFFER_LEVEL_DENY_CONTRACT",
            "OFFER_LEVEL_MANUAL",
            "OFFER_LEVEL_LIMIT_0",
            "OFFER_LEVEL_LIMIT_5",
            "OFFER_LEVEL_LIMIT_15",
            "OFFER_LEVEL_LIMIT_50"
          ],
          "type": "string"
        },
        "offerType": {
          "description": "Type of offer.",
          "enum": [
            "OFFER_TYPE_UNSPECIFIED",
            "OFFER_TYPE_SPEND_X_GET_Y",
            "OFFER_TYPE_VIDEO",
            "OFFER_TYPE_SPEND_MATCH"
          ],
          "type": "string"
        },
        "qualifiedCustomer": {
          "description": "Customers who qualify for this offer.",
          "items": {
            "$ref": "#/definitions/OfferCustomer"
          },
          "type": "array"
        },
        "qualifiedCustomersComplete": {
          "description": "Whether or not the list of qualified customers is definitely complete.",
          "type": "boolean"
        },
        "showSpecialOfferCopy": {
          "description": "Should special text be shown on the offers page.",
          "type": "boolean"
        },
        "terms": {
          "description": "Terms of the offer.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "AvailableOffer"
    },
    "Certification": {
      "description": "A user's information on a specific certification.",
      "properties": {
        "achieved": {
          "description": "Whether this certification has been achieved.",
          "type": "boolean"
        },
        "certificationType": {
          "description": "The type of certification, the area of expertise.",
          "enum": [
            "CERTIFICATION_TYPE_UNSPECIFIED",
            "CT_ADWORDS",
            "CT_YOUTUBE",
            "CT_VIDEOADS",
            "CT_ANALYTICS",
            "CT_DOUBLECLICK",
            "CT_SHOPPING",
            "CT_MOBILE",
            "CT_DIGITAL_SALES",
            "CT_ADWORDS_SEARCH",
            "CT_ADWORDS_DISPLAY",
            "CT_MOBILE_SITES"
          ],
          "type": "string"
        },
        "expiration": {
          "description": "Date this certification is due to expire.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastAchieved": {
          "description": "The date the user last achieved certification.",
          "format": "google-datetime",
          "type": "string"
        },
        "warning": {
          "description": "Whether this certification is in the state of warning.",
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "Certification"
    },
    "CertificationExamStatus": {
      "description": "Status for a Google Partners certification exam.",
      "properties": {
        "numberUsersPass": {
          "description": "The number of people who have passed the certification exam.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "The type of certification exam.",
          "enum": [
            "CERTIFICATION_EXAM_TYPE_UNSPECIFIED",
            "CET_ADWORDS_FUNDAMENTALS",
            "CET_ADWORDS_ADVANCED_SEARCH",
            "CET_ADWORDS_ADVANCED_DISPLAY",
            "CET_VIDEO_ADS",
            "CET_DOUBLECLICK",
            "CET_ANALYTICS",
            "CET_SHOPPING",
            "CET_MOBILE",
            "CET_DIGITAL_SALES",
            "CET_MOBILE_SITES"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "CertificationExamStatus"
    },
    "CertificationStatus": {
      "description": "Google Partners certification status.",
      "properties": {
        "examStatuses": {
          "description": "List of certification exam statuses.",
          "items": {
            "$ref": "#/definitions/CertificationExamStatus"
          },
          "type": "array"
        },
        "isCertified": {
          "description": "Whether certification is passing.",
          "type": "boolean"
        },
        "type": {
          "description": "The type of the certification.",
          "enum": [
            "CERTIFICATION_TYPE_UNSPECIFIED",
            "CT_ADWORDS",
            "CT_YOUTUBE",
            "CT_VIDEOADS",
            "CT_ANALYTICS",
            "CT_DOUBLECLICK",
            "CT_SHOPPING",
            "CT_MOBILE",
            "CT_DIGITAL_SALES",
            "CT_ADWORDS_SEARCH",
            "CT_ADWORDS_DISPLAY",
            "CT_MOBILE_SITES"
          ],
          "type": "string"
        },
        "userCount": {
          "description": "Number of people who are certified,",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "CertificationStatus"
    },
    "Company": {
      "description": "A company resource in the Google Partners API. Once certified, it qualifies\nfor being searched by advertisers.",
      "properties": {
        "additionalWebsites": {
          "description": "URL of the company's additional websites used to verify the dynamic badges.\nThese are stored as full URLs as entered by the user, but only the TLD will\nbe used for the actual verification.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoApprovalEmailDomains": {
          "description": "Email domains that allow users with a matching email address to get\nauto-approved for associating with this company.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "badgeTier": {
          "description": "Partner badge tier",
          "enum": [
            "BADGE_TIER_NONE",
            "BADGE_TIER_REGULAR",
            "BADGE_TIER_PREMIER"
          ],
          "type": "string"
        },
        "certificationStatuses": {
          "description": "The list of Google Partners certification statuses for the company.",
          "items": {
            "$ref": "#/definitions/CertificationStatus"
          },
          "type": "array"
        },
        "companyTypes": {
          "description": "Company type labels listed on the company's profile.",
          "items": {
            "enum": [
              "COMPANY_TYPE_UNSPECIFIED",
              "FULL_SERVICE_AGENCY",
              "MEDIA_AGENCY",
              "CREATIVE_AGENCY",
              "CDIGITAL_AGENCY",
              "SEM_SEO",
              "PERFORMANCE_MARKETING",
              "ADVERTISING_TOOL_DEVELOPMENT",
              "PR",
              "SELF_MANAGED",
              "RESELLER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "convertedMinMonthlyBudget": {
          "$ref": "#/definitions/Money",
          "description": "The minimum monthly budget that the company accepts for partner business,\nconverted to the requested currency code."
        },
        "id": {
          "description": "The ID of the company.",
          "type": "string"
        },
        "industries": {
          "description": "Industries the company can help with.",
          "items": {
            "enum": [
              "INDUSTRY_UNSPECIFIED",
              "I_AUTOMOTIVE",
              "I_BUSINESS_TO_BUSINESS",
              "I_CONSUMER_PACKAGED_GOODS",
              "I_EDUCATION",
              "I_FINANCE",
              "I_HEALTHCARE",
              "I_MEDIA_AND_ENTERTAINMENT",
              "I_RETAIL",
              "I_TECHNOLOGY",
              "I_TRAVEL"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "localizedInfos": {
          "description": "The list of localized info for the company.",
          "items": {
            "$ref": "#/definitions/LocalizedCompanyInfo"
          },
          "type": "array"
        },
        "locations": {
          "description": "The list of all company locations.\nIf set, must include the\nprimary_location\nin the list.",
          "items": {
            "$ref": "#/definitions/Location"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the company.",
          "type": "string"
        },
        "originalMinMonthlyBudget": {
          "$ref": "#/definitions/Money",
          "description": "The unconverted minimum monthly budget that the company accepts for partner\nbusiness."
        },
        "primaryAdwordsManagerAccountId": {
          "description": "The Primary AdWords Manager Account id.",
          "format": "int64",
          "type": "string"
        },
        "primaryLanguageCode": {
          "description": "The primary language code of the company, as defined by\n<a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>\n(IETF BCP 47, \"Tags for Identifying Languages\").",
          "type": "string"
        },
        "primaryLocation": {
          "$ref": "#/definitions/Location",
          "description": "The primary location of the company."
        },
        "profileStatus": {
          "description": "The public viewability status of the company's profile.",
          "enum": [
            "COMPANY_PROFILE_STATUS_UNSPECIFIED",
            "HIDDEN",
            "PUBLISHED",
            "SEARCHABLE"
          ],
          "type": "string"
        },
        "publicProfile": {
          "$ref": "#/definitions/PublicProfile",
          "description": "Basic information from the company's public profile."
        },
        "ranks": {
          "description": "Information related to the ranking of the company within the list of\ncompanies.",
          "items": {
            "$ref": "#/definitions/Rank"
          },
          "type": "array"
        },
        "services": {
          "description": "Services the company can help with.",
          "items": {
            "enum": [
              "SERVICE_UNSPECIFIED",
              "S_ADVANCED_ADWORDS_SUPPORT",
              "S_ADVERTISING_ON_GOOGLE",
              "S_AN_ENHANCED_WEBSITE",
              "S_AN_ONLINE_MARKETING_PLAN",
              "S_MOBILE_AND_VIDEO_ADS",
              "S_MOBILE_WEBSITE_SERVICES"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "specializationStatus": {
          "description": "The list of Google Partners specialization statuses for the company.",
          "items": {
            "$ref": "#/definitions/SpecializationStatus"
          },
          "type": "array"
        },
        "websiteUrl": {
          "description": "URL of the company's website.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Company"
    },
    "CompanyRelation": {
      "description": "A CompanyRelation resource representing information about a user's\naffiliation and standing with a company in Partners.",
      "properties": {
        "address": {
          "description": "The primary address for this company.",
          "type": "string"
        },
        "badgeTier": {
          "description": "Whether the company is a Partner.",
          "enum": [
            "BADGE_TIER_NONE",
            "BADGE_TIER_REGULAR",
            "BADGE_TIER_PREMIER"
          ],
          "type": "string"
        },
        "companyAdmin": {
          "description": "Indicates if the user is an admin for this company.",
          "type": "boolean"
        },
        "companyId": {
          "description": "The ID of the company. There may be no id if this is a\npending company.5",
          "type": "string"
        },
        "creationTime": {
          "description": "The timestamp of when affiliation was requested.\n@OutputOnly",
          "format": "google-datetime",
          "type": "string"
        },
        "isPending": {
          "description": "The flag that indicates if the company is pending verification.",
          "type": "boolean"
        },
        "logoUrl": {
          "description": "A URL to a profile photo, e.g. a G+ profile photo.",
          "type": "string"
        },
        "managerAccount": {
          "description": "The AdWords manager account # associated this company.",
          "format": "int64",
          "type": "string"
        },
        "name": {
          "description": "The name (in the company's primary language) for the company.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The phone number for the company's primary address.",
          "type": "string"
        },
        "resolvedTimestamp": {
          "description": "The timestamp when the user was approved.\n@OutputOnly",
          "format": "google-datetime",
          "type": "string"
        },
        "segment": {
          "description": "The segment the company is classified as.",
          "items": {
            "enum": [
              "COMPANY_SEGMENT_UNKNOWN",
              "COMPANY_SEGMENT_NAL",
              "COMPANY_SEGMENT_PSP",
              "COMPANY_SEGMENT_PPSP"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "specializationStatus": {
          "description": "The list of Google Partners specialization statuses for the company.",
          "items": {
            "$ref": "#/definitions/SpecializationStatus"
          },
          "type": "array"
        },
        "state": {
          "description": "The state of relationship, in terms of approvals.",
          "enum": [
            "USER_COMPANY_REATION_STATE_NONE_SPECIFIED",
            "USER_COMPANY_RELATION_STATE_AWAIT_EMAIL",
            "USER_COMPANY_RELATION_STATE_AWAIT_ADMIN",
            "USER_COMPANY_RELATION_STATE_APPROVED"
          ],
          "type": "string"
        },
        "website": {
          "description": "The website URL for this company.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "CompanyRelation"
    },
    "CountryOfferInfo": {
      "description": "Offer info by country.",
      "properties": {
        "getYAmount": {
          "description": "(localized) Get Y amount for that country's offer.",
          "type": "string"
        },
        "offerCountryCode": {
          "description": "Country code for which offer codes may be requested.",
          "type": "string"
        },
        "offerType": {
          "description": "Type of offer country is eligible for.",
          "enum": [
            "OFFER_TYPE_UNSPECIFIED",
            "OFFER_TYPE_SPEND_X_GET_Y",
            "OFFER_TYPE_VIDEO",
            "OFFER_TYPE_SPEND_MATCH"
          ],
          "type": "string"
        },
        "spendXAmount": {
          "description": "(localized) Spend X amount for that country's offer.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "CountryOfferInfo"
    },
    "CreateLeadRequest": {
      "description": "Request message for CreateLead.",
      "properties": {
        "lead": {
          "$ref": "#/definitions/Lead",
          "description": "The lead resource. The `LeadType` must not be `LEAD_TYPE_UNSPECIFIED`\nand either `email` or `phone_number` must be provided."
        },
        "recaptchaChallenge": {
          "$ref": "#/definitions/RecaptchaChallenge",
          "description": "<a href=\"https://www.google.com/recaptcha/\">reCaptcha</a> challenge info."
        },
        "requestMetadata": {
          "$ref": "#/definitions/RequestMetadata",
          "description": "Current request metadata."
        }
      },
      "type": "object",
      "title": "CreateLeadRequest"
    },
    "CreateLeadResponse": {
      "description": "Response message for CreateLead.",
      "properties": {
        "lead": {
          "$ref": "#/definitions/Lead",
          "description": "Lead that was created depending on the outcome of\n<a href=\"https://www.google.com/recaptcha/\">reCaptcha</a> validation."
        },
        "recaptchaStatus": {
          "description": "The outcome of <a href=\"https://www.google.com/recaptcha/\">reCaptcha</a>\nvalidation.",
          "enum": [
            "RECAPTCHA_STATUS_UNSPECIFIED",
            "RS_NOT_NEEDED",
            "RS_PASSED",
            "RS_FAILED"
          ],
          "type": "string"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "CreateLeadResponse"
    },
    "Date": {
      "description": "Represents a whole calendar date, e.g. date of birth. The time of day and\ntime zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. The day may be 0 to\nrepresent a year and month where the day is not significant, e.g. credit card\nexpiration date. The year may be 0 to represent a month and day independent\nof year, e.g. anniversary date. Related types are google.type.TimeOfDay\nand `google.protobuf.Timestamp`.",
      "properties": {
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year/month where the day is not significant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of year. Must be from 1 to 12.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "Date"
    },
    "DebugInfo": {
      "description": "Debug information about this request.",
      "properties": {
        "serverInfo": {
          "description": "Info about the server that serviced this request.",
          "type": "string"
        },
        "serverTraceInfo": {
          "description": "Server-side debug stack trace.",
          "type": "string"
        },
        "serviceUrl": {
          "description": "URL of the service that handled this request.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "DebugInfo"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object",
      "title": "Empty"
    },
    "EventData": {
      "description": "Key value data pair for an event.",
      "properties": {
        "key": {
          "description": "Data type.",
          "enum": [
            "EVENT_DATA_TYPE_UNSPECIFIED",
            "ACTION",
            "AGENCY_ID",
            "AGENCY_NAME",
            "AGENCY_PHONE_NUMBER",
            "AGENCY_WEBSITE",
            "BUDGET",
            "CENTER_POINT",
            "CERTIFICATION",
            "COMMENT",
            "COUNTRY",
            "CURRENCY",
            "CURRENTLY_VIEWED_AGENCY_ID",
            "DISTANCE",
            "DISTANCE_TYPE",
            "EXAM",
            "HISTORY_TOKEN",
            "ID",
            "INDUSTRY",
            "INSIGHT_TAG",
            "LANGUAGE",
            "LOCATION",
            "MARKETING_OPT_IN",
            "QUERY",
            "SEARCH_START_INDEX",
            "SERVICE",
            "SHOW_VOW",
            "SOLUTION",
            "TRAFFIC_SOURCE_ID",
            "TRAFFIC_SUB_ID",
            "VIEW_PORT",
            "WEBSITE",
            "DETAILS",
            "EXPERIMENT_ID",
            "GPS_MOTIVATION",
            "URL",
            "ELEMENT_FOCUS",
            "PROGRESS"
          ],
          "type": "string"
        },
        "values": {
          "description": "Data values.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "EventData"
    },
    "ExamStatus": {
      "description": "A user's information on a specific exam.",
      "properties": {
        "examType": {
          "description": "The type of the exam.",
          "enum": [
            "CERTIFICATION_EXAM_TYPE_UNSPECIFIED",
            "CET_ADWORDS_FUNDAMENTALS",
            "CET_ADWORDS_ADVANCED_SEARCH",
            "CET_ADWORDS_ADVANCED_DISPLAY",
            "CET_VIDEO_ADS",
            "CET_DOUBLECLICK",
            "CET_ANALYTICS",
            "CET_SHOPPING",
            "CET_MOBILE",
            "CET_DIGITAL_SALES",
            "CET_MOBILE_SITES"
          ],
          "type": "string"
        },
        "expiration": {
          "description": "Date this exam is due to expire.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastPassed": {
          "description": "The date the user last passed this exam.",
          "format": "google-datetime",
          "type": "string"
        },
        "passed": {
          "description": "Whether this exam has been passed and not expired.",
          "type": "boolean"
        },
        "taken": {
          "description": "The date the user last taken this exam.",
          "format": "google-datetime",
          "type": "string"
        },
        "warning": {
          "description": "Whether this exam is in the state of warning.",
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "ExamStatus"
    },
    "ExamToken": {
      "description": "A token that allows a user to take an exam.",
      "properties": {
        "examId": {
          "description": "The id of the exam the token is for.",
          "format": "int64",
          "type": "string"
        },
        "examType": {
          "description": "The type of the exam the token belongs to.",
          "enum": [
            "CERTIFICATION_EXAM_TYPE_UNSPECIFIED",
            "CET_ADWORDS_FUNDAMENTALS",
            "CET_ADWORDS_ADVANCED_SEARCH",
            "CET_ADWORDS_ADVANCED_DISPLAY",
            "CET_VIDEO_ADS",
            "CET_DOUBLECLICK",
            "CET_ANALYTICS",
            "CET_SHOPPING",
            "CET_MOBILE",
            "CET_DIGITAL_SALES",
            "CET_MOBILE_SITES"
          ],
          "type": "string"
        },
        "token": {
          "description": "The token, only present if the user has access to the exam.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "ExamToken"
    },
    "GetCompanyResponse": {
      "description": "Response message for GetCompany.",
      "properties": {
        "company": {
          "$ref": "#/definitions/Company",
          "description": "The company."
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "GetCompanyResponse"
    },
    "GetPartnersStatusResponse": {
      "description": "Response message for\nGetPartnersStatus.",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "GetPartnersStatusResponse"
    },
    "HistoricalOffer": {
      "description": "Historical information about a Google Partners Offer.",
      "properties": {
        "adwordsUrl": {
          "description": "Client's AdWords page URL.",
          "type": "string"
        },
        "clientEmail": {
          "description": "Email address for client.",
          "type": "string"
        },
        "clientId": {
          "description": "ID of client.",
          "format": "int64",
          "type": "string"
        },
        "clientName": {
          "description": "Name of the client.",
          "type": "string"
        },
        "creationTime": {
          "description": "Time offer was first created.",
          "format": "google-datetime",
          "type": "string"
        },
        "expirationTime": {
          "description": "Time this offer expires.",
          "format": "google-datetime",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Time last action was taken.",
          "format": "google-datetime",
          "type": "string"
        },
        "offerCode": {
          "description": "Offer code.",
          "type": "string"
        },
        "offerCountryCode": {
          "description": "Country Code for the offer country.",
          "type": "string"
        },
        "offerType": {
          "description": "Type of offer.",
          "enum": [
            "OFFER_TYPE_UNSPECIFIED",
            "OFFER_TYPE_SPEND_X_GET_Y",
            "OFFER_TYPE_VIDEO",
            "OFFER_TYPE_SPEND_MATCH"
          ],
          "type": "string"
        },
        "senderName": {
          "description": "Name (First + Last) of the partners user to whom the incentive is allocated.",
          "type": "string"
        },
        "status": {
          "description": "Status of the offer.",
          "enum": [
            "OFFER_STATUS_UNSPECIFIED",
            "OFFER_STATUS_DISTRIBUTED",
            "OFFER_STATUS_REDEEMED",
            "OFFER_STATUS_AWARDED",
            "OFFER_STATUS_EXPIRED"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "HistoricalOffer"
    },
    "LatLng": {
      "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84\nstandard</a>. Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n    def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r > 180.0 or (r == 180.0 and q <= -1.0):\n        return r - 360.0\n      return r\n\n    def NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude and longitude to\n      [-90.0, 90.0] and [-180.0, 180.0], respectively.\"\"\"\n      r = latitude % 360.0\n      if r <= 90.0:\n        return r, NormalizeLongitude(longitude)\n      elif r >= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n      else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert 180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n    assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)\n\nThe code in logs/storage/validator/logs_validator_traits.cc treats this type\nas if it were annotated as ST_LOCATION.",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "title": "LatLng"
    },
    "Lead": {
      "description": "A lead resource that represents an advertiser contact for a `Company`. These\nare usually generated via Google Partner Search (the advertiser portal).",
      "properties": {
        "adwordsCustomerId": {
          "description": "The AdWords Customer ID of the lead.",
          "format": "int64",
          "type": "string"
        },
        "comments": {
          "description": "Comments lead source gave.",
          "type": "string"
        },
        "createTime": {
          "description": "Timestamp of when this lead was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "email": {
          "description": "Email address of lead source.",
          "type": "string"
        },
        "familyName": {
          "description": "Last name of lead source.",
          "type": "string"
        },
        "givenName": {
          "description": "First name of lead source.",
          "type": "string"
        },
        "gpsMotivations": {
          "description": "List of reasons for using Google Partner Search and creating a lead.",
          "items": {
            "enum": [
              "GPS_MOTIVATION_UNSPECIFIED",
              "GPSM_HELP_WITH_ADVERTISING",
              "GPSM_HELP_WITH_WEBSITE",
              "GPSM_NO_WEBSITE"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "ID of the lead.",
          "type": "string"
        },
        "languageCode": {
          "description": "Language code of the lead's language preference, as defined by\n<a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>\n(IETF BCP 47, \"Tags for Identifying Languages\").",
          "type": "string"
        },
        "marketingOptIn": {
          "description": "Whether or not the lead signed up for marketing emails",
          "type": "boolean"
        },
        "minMonthlyBudget": {
          "$ref": "#/definitions/Money",
          "description": "The minimum monthly budget lead source is willing to spend."
        },
        "phoneNumber": {
          "description": "Phone number of lead source.",
          "type": "string"
        },
        "state": {
          "description": "The lead's state in relation to the company.",
          "enum": [
            "LEAD_STATE_UNSPECIFIED",
            "LEAD",
            "CONTACTED",
            "CLIENT",
            "OTHER"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of lead.",
          "enum": [
            "LEAD_TYPE_UNSPECIFIED",
            "LT_GPS"
          ],
          "type": "string"
        },
        "websiteUrl": {
          "description": "Website URL of lead source.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Lead"
    },
    "ListAnalyticsResponse": {
      "description": "Response message for\nListAnalytics.",
      "properties": {
        "analytics": {
          "description": "The list of analytics.\nSorted in ascending order of\nAnalytics.event_date.",
          "items": {
            "$ref": "#/definitions/Analytics"
          },
          "type": "array"
        },
        "analyticsSummary": {
          "$ref": "#/definitions/AnalyticsSummary",
          "description": "Aggregated information across the response's\nanalytics."
        },
        "nextPageToken": {
          "description": "A token to retrieve next page of results.\nPass this value in the `ListAnalyticsRequest.page_token` field in the\nsubsequent call to\nListAnalytics to retrieve the\nnext page of results.",
          "type": "string"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "ListAnalyticsResponse"
    },
    "ListCompaniesResponse": {
      "description": "Response message for\nListCompanies.",
      "properties": {
        "companies": {
          "description": "The list of companies.",
          "items": {
            "$ref": "#/definitions/Company"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token to retrieve next page of results.\nPass this value in the `ListCompaniesRequest.page_token` field in the\nsubsequent call to\nListCompanies to retrieve the\nnext page of results.",
          "type": "string"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "ListCompaniesResponse"
    },
    "ListLeadsResponse": {
      "description": "Response message for ListLeads.",
      "properties": {
        "leads": {
          "description": "The list of leads.",
          "items": {
            "$ref": "#/definitions/Lead"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A token to retrieve next page of results.\nPass this value in the `ListLeadsRequest.page_token` field in the\nsubsequent call to\nListLeads to retrieve the\nnext page of results.",
          "type": "string"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        },
        "totalSize": {
          "description": "The total count of leads for the given company.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "ListLeadsResponse"
    },
    "ListOffersHistoryResponse": {
      "description": "Response for ListOfferHistory.",
      "properties": {
        "canShowEntireCompany": {
          "description": "True if the user has the option to show entire company history.",
          "type": "boolean"
        },
        "nextPageToken": {
          "description": "Supply this token in a ListOffersHistoryRequest to retrieve the next page.",
          "type": "string"
        },
        "offers": {
          "description": "Historical offers meeting request.",
          "items": {
            "$ref": "#/definitions/HistoricalOffer"
          },
          "type": "array"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        },
        "showingEntireCompany": {
          "description": "True if this response is showing entire company history.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Number of results across all pages.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "title": "ListOffersHistoryResponse"
    },
    "ListOffersResponse": {
      "description": "Response for ListOffer.",
      "properties": {
        "availableOffers": {
          "description": "Available Offers to be distributed.",
          "items": {
            "$ref": "#/definitions/AvailableOffer"
          },
          "type": "array"
        },
        "noOfferReason": {
          "description": "Reason why no Offers are available.",
          "enum": [
            "NO_OFFER_REASON_UNSPECIFIED",
            "NO_OFFER_REASON_NO_MCC",
            "NO_OFFER_REASON_LIMIT_REACHED",
            "NO_OFFER_REASON_INELIGIBLE"
          ],
          "type": "string"
        },
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "ListOffersResponse"
    },
    "ListUserStatesResponse": {
      "description": "Response message for\nListUserStates.",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        },
        "userStates": {
          "description": "User's states.",
          "items": {
            "enum": [
              "USER_STATE_UNSPECIFIED",
              "US_REQUIRES_RECAPTCHA_FOR_GPS_CONTACT"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "ListUserStatesResponse"
    },
    "LocalizedCompanyInfo": {
      "description": "The localized company information.",
      "properties": {
        "countryCodes": {
          "description": "List of country codes for the localized company info.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displayName": {
          "description": "Localized display name.",
          "type": "string"
        },
        "languageCode": {
          "description": "Language code of the localized company info, as defined by\n<a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>\n(IETF BCP 47, \"Tags for Identifying Languages\").",
          "type": "string"
        },
        "overview": {
          "description": "Localized brief description that the company uses to advertise themselves.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "LocalizedCompanyInfo"
    },
    "Location": {
      "description": "A location with address and geographic coordinates. May optionally contain a\ndetailed (multi-field) version of the address.",
      "properties": {
        "address": {
          "description": "The single string version of the address.",
          "type": "string"
        },
        "addressLine": {
          "description": "The following address lines represent the most specific part of any\naddress.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "administrativeArea": {
          "description": "Top-level administrative subdivision of this country.",
          "type": "string"
        },
        "dependentLocality": {
          "description": "Dependent locality or sublocality. Used for UK dependent localities, or\nneighborhoods or boroughs in other locations.",
          "type": "string"
        },
        "languageCode": {
          "description": "Language code of the address. Should be in BCP 47 format.",
          "type": "string"
        },
        "latLng": {
          "$ref": "#/definitions/LatLng",
          "description": "The latitude and longitude of the location, in degrees."
        },
        "locality": {
          "description": "Generally refers to the city/town portion of an address.",
          "type": "string"
        },
        "postalCode": {
          "description": "Values are frequently alphanumeric.",
          "type": "string"
        },
        "regionCode": {
          "description": "CLDR (Common Locale Data Repository) region code .",
          "type": "string"
        },
        "sortingCode": {
          "description": "Use of this code is very country-specific, but will refer to a secondary\nclassification code for sorting mail.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Location"
    },
    "LogMessageRequest": {
      "description": "Request message for\nLogClientMessage.",
      "properties": {
        "clientInfo": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of client info, such as URL, browser navigator, browser platform, etc.",
          "type": "object"
        },
        "details": {
          "description": "Details about the client message.",
          "type": "string"
        },
        "level": {
          "description": "Message level of client message.",
          "enum": [
            "MESSAGE_LEVEL_UNSPECIFIED",
            "ML_FINE",
            "ML_INFO",
            "ML_WARNING",
            "ML_SEVERE"
          ],
          "type": "string"
        },
        "requestMetadata": {
          "$ref": "#/definitions/RequestMetadata",
          "description": "Current request metadata."
        }
      },
      "type": "object",
      "title": "LogMessageRequest"
    },
    "LogMessageResponse": {
      "description": "Response message for\nLogClientMessage.",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "LogMessageResponse"
    },
    "LogUserEventRequest": {
      "description": "Request message for\nLogUserEvent.",
      "properties": {
        "eventAction": {
          "description": "The action that occurred.",
          "enum": [
            "EVENT_ACTION_UNSPECIFIED",
            "SMB_CLICKED_FIND_A_PARTNER_BUTTON_BOTTOM",
            "SMB_CLICKED_FIND_A_PARTNER_BUTTON_TOP",
            "AGENCY_CLICKED_JOIN_NOW_BUTTON_BOTTOM",
            "AGENCY_CLICKED_JOIN_NOW_BUTTON_TOP",
            "SMB_CANCELED_PARTNER_CONTACT_FORM",
            "SMB_CLICKED_CONTACT_A_PARTNER",
            "SMB_COMPLETED_PARTNER_CONTACT_FORM",
            "SMB_ENTERED_EMAIL_IN_CONTACT_PARTNER_FORM",
            "SMB_ENTERED_NAME_IN_CONTACT_PARTNER_FORM",
            "SMB_ENTERED_PHONE_IN_CONTACT_PARTNER_FORM",
            "SMB_FAILED_RECAPTCHA_IN_CONTACT_PARTNER_FORM",
            "PARTNER_VIEWED_BY_SMB",
            "SMB_CANCELED_PARTNER_CONTACT_FORM_ON_GPS",
            "SMB_CHANGED_A_SEARCH_PARAMETER_TOP",
            "SMB_CLICKED_CONTACT_A_PARTNER_ON_GPS",
            "SMB_CLICKED_SHOW_MORE_PARTNERS_BUTTON_BOTTOM",
            "SMB_COMPLETED_PARTNER_CONTACT_FORM_ON_GPS",
            "SMB_NO_PARTNERS_AVAILABLE_WITH_SEARCH_CRITERIA",
            "SMB_PERFORMED_SEARCH_ON_GPS",
            "SMB_VIEWED_A_PARTNER_ON_GPS",
            "SMB_CANCELED_PARTNER_CONTACT_FORM_ON_PROFILE_PAGE",
            "SMB_CLICKED_CONTACT_A_PARTNER_ON_PROFILE_PAGE",
            "SMB_CLICKED_PARTNER_WEBSITE",
            "SMB_COMPLETED_PARTNER_CONTACT_FORM_ON_PROFILE_PAGE",
            "SMB_VIEWED_A_PARTNER_PROFILE",
            "AGENCY_CLICKED_ACCEPT_TOS_BUTTON",
            "AGENCY_CHANGED_TOS_COUNTRY",
            "AGENCY_ADDED_ADDRESS_IN_MY_PROFILE_PORTAL",
            "AGENCY_ADDED_PHONE_NUMBER_IN_MY_PROFILE_PORTAL",
            "AGENCY_CHANGED_PRIMARY_ACCOUNT_ASSOCIATION",
            "AGENCY_CHANGED_PRIMARY_COUNTRY_ASSOCIATION",
            "AGENCY_CLICKED_AFFILIATE_BUTTON_IN_MY_PROFILE_IN_PORTAL",
            "AGENCY_CLICKED_GIVE_EDIT_ACCESS_IN_MY_PROFILE_PORTAL",
            "AGENCY_CLICKED_LOG_OUT_IN_MY_PROFILE_PORTAL",
            "AGENCY_CLICKED_MY_PROFILE_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_SAVE_AND_CONTINUE_AT_BOT_OF_COMPLETE_PROFILE",
            "AGENCY_CLICKED_UNAFFILIATE_IN_MY_PROFILE_PORTAL",
            "AGENCY_FILLED_OUT_COMP_AFFILIATION_IN_MY_PROFILE_PORTAL",
            "AGENCY_SUCCESSFULLY_CONNECTED_WITH_COMPANY_IN_MY_PROFILE",
            "AGENCY_CLICKED_CREATE_MCC_IN_MY_PROFILE_PORTAL",
            "AGENCY_DIDNT_HAVE_AN_MCC_ASSOCIATED_ON_COMPLETE_PROFILE",
            "AGENCY_HAD_AN_MCC_ASSOCIATED_ON_COMPLETE_PROFILE",
            "AGENCY_ADDED_JOB_FUNCTION_IN_MY_PROFILE_PORTAL",
            "AGENCY_LOOKED_AT_JOB_FUNCTION_DROP_DOWN",
            "AGENCY_SELECTED_ACCOUNT_MANAGER_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_ACCOUNT_PLANNER_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_ANALYTICS_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_CREATIVE_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_MEDIA_BUYER_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_MEDIA_PLANNER_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_OTHER_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_PRODUCTION_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_SEO_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_SALES_REP_AS_JOB_FUNCTION",
            "AGENCY_SELECTED_SEARCH_SPECIALIST_AS_JOB_FUNCTION",
            "AGENCY_ADDED_CHANNELS_IN_MY_PROFILE_PORTAL",
            "AGENCY_LOOKED_AT_ADD_CHANNEL_DROP_DOWN",
            "AGENCY_SELECTED_CROSS_CHANNEL_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_DISPLAY_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_MOBILE_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_SEARCH_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_SOCIAL_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_TOOLS_FROM_ADD_CHANNEL",
            "AGENCY_SELECTED_YOUTUBE_FROM_ADD_CHANNEL",
            "AGENCY_ADDED_INDUSTRIES_IN_MY_PROFILE_PORTAL",
            "AGENCY_CHANGED_ADD_INDUSTRIES_DROP_DOWN",
            "AGENCY_ADDED_MARKETS_IN_MY_PROFILE_PORTAL",
            "AGENCY_CHANGED_ADD_MARKETS_DROP_DOWN",
            "AGENCY_CHECKED_RECIEVE_MAIL_PROMOTIONS_MYPROFILE",
            "AGENCY_CHECKED_RECIEVE_MAIL_PROMOTIONS_SIGNUP",
            "AGENCY_SELECTED_OPT_IN_BETA_TESTS_AND_MKT_RESEARCH",
            "AGENCY_SELECTED_OPT_IN_BETA_TESTS_IN_MY_PROFILE_PORTAL",
            "AGENCY_SELECTED_OPT_IN_NEWS_IN_MY_PROFILE_PORTAL",
            "AGENCY_SELECTED_OPT_IN_NEWS_INVITATIONS_AND_PROMOS",
            "AGENCY_SELECTED_OPT_IN_PERFORMANCE_SUG_IN_MY_PROFILE_PORTAL",
            "AGENCY_SELECTED_OPT_IN_PERFORMANCE_SUGGESTIONS",
            "AGENCY_SELECTED_OPT_IN_SELECT_ALL_EMAIL_NOTIFICATIONS",
            "AGENCY_SELECTED_SELECT_ALL_OPT_INS_IN_MY_PROFILE_PORTAL",
            "AGENCY_CLICKED_BACK_BUTTON_ON_CONNECT_WITH_COMPANY",
            "AGENCY_CLICKED_CONTINUE_TO_OVERVIEW_ON_CONNECT_WITH_COMPANY",
            "AGECNY_CLICKED_CREATE_MCC_CONNECT_WITH_COMPANY_NOT_FOUND",
            "AGECNY_CLICKED_GIVE_EDIT_ACCESS_CONNECT_WITH_COMPANY_NOT_FOUND",
            "AGECNY_CLICKED_LOG_OUT_CONNECT_WITH_COMPANY_NOT_FOUND",
            "AGENCY_CLICKED_SKIP_FOR_NOW_ON_CONNECT_WITH_COMPANY_PAGE",
            "AGENCY_CLOSED_CONNECTED_TO_COMPANY_X_BUTTON_WRONG_COMPANY",
            "AGENCY_COMPLETED_FIELD_CONNECT_WITH_COMPANY",
            "AGECNY_FOUND_COMPANY_TO_CONNECT_WITH",
            "AGENCY_SUCCESSFULLY_CREATED_COMPANY",
            "AGENCY_ADDED_NEW_COMPANY_LOCATION",
            "AGENCY_CLICKED_COMMUNITY_JOIN_NOW_LINK_IN_PORTAL_NOTIFICATIONS",
            "AGENCY_CLICKED_CONNECT_TO_COMPANY_LINK_IN_PORTAL_NOTIFICATIONS",
            "AGENCY_CLICKED_GET_CERTIFIED_LINK_IN_PORTAL_NOTIFICATIONS",
            "AGENCY_CLICKED_GET_VIDEO_ADS_CERTIFIED_LINK_IN_PORTAL_NOTIFICATIONS",
            "AGENCY_CLICKED_LINK_TO_MCC_LINK_IN_PORTAL_NOTIFICATIONS",
            "AGENCY_CLICKED_INSIGHT_CONTENT_IN_PORTAL",
            "AGENCY_CLICKED_INSIGHTS_VIEW_NOW_PITCH_DECKS_IN_PORTAL",
            "AGENCY_CLICKED_INSIGHTS_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_INSIGHTS_UPLOAD_CONTENT",
            "AGENCY_CLICKED_INSIGHTS_VIEWED_DEPRECATED",
            "AGENCY_CLICKED_COMMUNITY_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_JOIN_COMMUNITY_BUTTON_COMMUNITY_PORTAL",
            "AGENCY_CLICKED_CERTIFICATIONS_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_CERTIFICATIONS_PRODUCT_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_PARTNER_STATUS_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_PARTNER_STATUS_PRODUCT_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_OFFERS_LEFT_NAV_IN_PORTAL",
            "AGENCY_CLICKED_SEND_BUTTON_ON_OFFERS_PAGE",
            "AGENCY_CLICKED_EXAM_DETAILS_ON_CERT_ADWORDS_PAGE",
            "AGENCY_CLICKED_SEE_EXAMS_CERTIFICATION_MAIN_PAGE",
            "AGENCY_CLICKED_TAKE_EXAM_ON_CERT_EXAM_PAGE",
            "AGENCY_OPENED_LAST_ADMIN_DIALOG",
            "AGENCY_OPENED_DIALOG_WITH_NO_USERS",
            "AGENCY_PROMOTED_USER_TO_ADMIN",
            "AGENCY_UNAFFILIATED",
            "AGENCY_CHANGED_ROLES",
            "SMB_CLICKED_COMPANY_NAME_LINK_TO_PROFILE",
            "SMB_VIEWED_ADWORDS_CERTIFICATE",
            "SMB_VIEWED_ADWORDS_SEARCH_CERTIFICATE",
            "SMB_VIEWED_ADWORDS_DISPLAY_CERTIFICATE",
            "SMB_CLICKED_ADWORDS_CERTIFICATE_HELP_ICON",
            "SMB_VIEWED_ANALYTICS_CERTIFICATE",
            "SMB_VIEWED_DOUBLECLICK_CERTIFICATE",
            "SMB_VIEWED_MOBILE_SITES_CERTIFICATE",
            "SMB_VIEWED_VIDEO_ADS_CERTIFICATE",
            "SMB_VIEWED_SHOPPING_CERTIFICATE",
            "SMB_CLICKED_VIDEO_ADS_CERTIFICATE_HELP_ICON",
            "CLICKED_HELP_AT_BOTTOM",
            "CLICKED_HELP_AT_TOP",
            "CLIENT_ERROR",
            "AGENCY_CLICKED_LEFT_NAV_STORIES",
            "CLICKED",
            "SMB_VIEWED_MOBILE_CERTIFICATE",
            "AGENCY_FAILED_COMPANY_VERIFICATION",
            "VISITED_LANDING",
            "VISITED_GPS",
            "VISITED_AGENCY_PORTAL",
            "CANCELLED_INDIVIDUAL_SIGN_UP",
            "CANCELLED_COMPANY_SIGN_UP",
            "AGENCY_CLICKED_SIGN_IN_BUTTON_TOP",
            "AGENCY_CLICKED_SAVE_AND_CONTINUE_AT_BOT_OF_INCOMPLETE_PROFILE",
            "AGENCY_UNSELECTED_OPT_IN_NEWS_INVITATIONS_AND_PROMOS",
            "AGENCY_UNSELECTED_OPT_IN_BETA_TESTS_AND_MKT_RESEARCH",
            "AGENCY_UNSELECTED_OPT_IN_PERFORMANCE_SUGGESTIONS",
            "AGENCY_SELECTED_OPT_OUT_UNSELECT_ALL_EMAIL_NOTIFICATIONS",
            "AGENCY_LINKED_INDIVIDUAL_MCC",
            "AGENCY_SUGGESTED_TO_USER",
            "AGENCY_IGNORED_SUGGESTED_AGENCIES_AND_SEARCHED",
            "AGENCY_PICKED_SUGGESTED_AGENCY",
            "AGENCY_SEARCHED_FOR_AGENCIES",
            "AGENCY_PICKED_SEARCHED_AGENCY",
            "AGENCY_DISMISSED_AFFILIATION_WIDGET",
            "AGENCY_CLICKED_INSIGHTS_DOWNLOAD_CONTENT",
            "AGENCY_PROGRESS_INSIGHTS_VIEW_CONTENT",
            "AGENCY_CLICKED_CANCEL_ACCEPT_TOS_BUTTON",
            "SMB_ENTERED_WEBSITE_IN_CONTACT_PARTNER_FORM"
          ],
          "type": "string"
        },
        "eventCategory": {
          "description": "The category the action belongs to.",
          "enum": [
            "EVENT_CATEGORY_UNSPECIFIED",
            "GOOGLE_PARTNER_SEARCH",
            "GOOGLE_PARTNER_SIGNUP_FLOW",
            "GOOGLE_PARTNER_PORTAL",
            "GOOGLE_PARTNER_PORTAL_MY_PROFILE",
            "GOOGLE_PARTNER_PORTAL_CERTIFICATIONS",
            "GOOGLE_PARTNER_PORTAL_COMMUNITY",
            "GOOGLE_PARTNER_PORTAL_INSIGHTS",
            "GOOGLE_PARTNER_PORTAL_CLIENTS",
            "GOOGLE_PARTNER_PUBLIC_USER_PROFILE",
            "GOOGLE_PARTNER_PANEL",
            "GOOGLE_PARTNER_PORTAL_LAST_ADMIN_DIALOG",
            "GOOGLE_PARTNER_CLIENT",
            "GOOGLE_PARTNER_PORTAL_COMPANY_PROFILE",
            "EXTERNAL_LINKS",
            "GOOGLE_PARTNER_LANDING"
          ],
          "type": "string"
        },
        "eventDatas": {
          "description": "List of event data for the event.",
          "items": {
            "$ref": "#/definitions/EventData"
          },
          "type": "array"
        },
        "eventScope": {
          "description": "The scope of the event.",
          "enum": [
            "EVENT_SCOPE_UNSPECIFIED",
            "VISITOR",
            "SESSION",
            "PAGE"
          ],
          "type": "string"
        },
        "lead": {
          "$ref": "#/definitions/Lead",
          "description": "Advertiser lead information."
        },
        "requestMetadata": {
          "$ref": "#/definitions/RequestMetadata",
          "description": "Current request metadata."
        },
        "url": {
          "description": "The URL where the event occurred.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "LogUserEventRequest"
    },
    "LogUserEventResponse": {
      "description": "Response message for\nLogUserEvent.",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata",
          "description": "Current response metadata."
        }
      },
      "type": "object",
      "title": "LogUserEventResponse"
    },
    "Money": {
      "description": "Represents an amount of money with its currency type.",
      "properties": {
        "currencyCode": {
          "description": "The 3-letter currency code defined in ISO 4217.",
          "type": "string"
        },
        "nanos": {
          "description": "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
          "format": "int32",
          "type": "integer"
        },
        "units": {
          "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Money"
    },
    "OfferCustomer": {
      "description": "Customers qualified for an offer.",
      "properties": {
        "adwordsUrl": {
          "description": "URL to the customer's AdWords page.",
          "type": "string"
        },
        "countryCode": {
          "description": "Country code of the customer.",
          "type": "string"
        },
        "creationTime": {
          "description": "Time the customer was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "eligibilityDaysLeft": {
          "description": "Days the customer is still eligible.",
          "format": "int32",
          "type": "integer"
        },
        "externalCid": {
          "description": "External CID for the customer.",
          "format": "int64",
          "type": "string"
        },
        "getYAmount": {
          "description": "Formatted Get Y amount with currency code.",
          "type": "string"
        },
        "name": {
          "description": "Name of the customer.",
          "type": "string"
        },
        "offerType": {
          "description": "Type of the offer",
          "enum": [
            "OFFER_TYPE_UNSPECIFIED",
            "OFFER_TYPE_SPEND_X_GET_Y",
            "OFFER_TYPE_VIDEO",
            "OFFER_TYPE_SPEND_MATCH"
          ],
          "type": "string"
        },
        "spendXAmount": {
          "description": "Formatted Spend X amount with currency code.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "OfferCustomer"
    },
    "OptIns": {
      "description": "A set of opt-ins for a user.",
      "properties": {
        "marketComm": {
          "description": "An opt-in about receiving email from Partners marketing teams. Includes\nmember-only events and special promotional offers for Google products.",
          "type": "boolean"
        },
        "performanceSuggestions": {
          "description": "An opt-in about receiving email with customized AdWords campaign management\ntips.",
          "type": "boolean"
        },
        "phoneContact": {
          "description": "An opt-in to allow recieivng phone calls about their Partners account.",
          "type": "boolean"
        },
        "physicalMail": {
          "description": "An opt-in to receive special promotional gifts and material in the mail.",
          "type": "boolean"
        },
        "specialOffers": {
          "description": "An opt-in about receiving email regarding new features and products.",
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "OptIns"
    },
    "PublicProfile": {
      "description": "Basic information from a public profile.",
      "properties": {
        "displayImageUrl": {
          "description": "The URL to the main display image of the public profile. Being deprecated.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the public profile.",
          "type": "string"
        },
        "id": {
          "description": "The ID which can be used to retrieve more details about the public profile.",
          "type": "string"
        },
        "profileImage": {
          "description": "The URL to the main profile image of the public profile.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the public profile.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "PublicProfile"
    },
    "Rank": {
      "description": "Information related to ranking of results.",
      "properties": {
        "type": {
          "description": "The type of rank.",
          "enum": [
            "RANK_TYPE_UNSPECIFIED",
            "RT_FINAL_SCORE"
          ],
          "type": "string"
        },
        "value": {
          "description": "The numerical value of the rank.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "title": "Rank"
    },
    "RecaptchaChallenge": {
      "description": "<a href=\"https://www.google.com/recaptcha/\">reCaptcha</a> challenge info.",
      "properties": {
        "id": {
          "description": "The ID of the reCaptcha challenge.",
          "type": "string"
        },
        "response": {
          "description": "The response to the reCaptcha challenge.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "RecaptchaChallenge"
    },
    "RequestMetadata": {
      "description": "Common data that is in each API request.",
      "properties": {
        "experimentIds": {
          "description": "Experiment IDs the current request belongs to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "locale": {
          "description": "Locale to use for the current request.",
          "type": "string"
        },
        "partnersSessionId": {
          "description": "Google Partners session ID.",
          "type": "string"
        },
        "trafficSource": {
          "$ref": "#/definitions/TrafficSource",
          "description": "Source of traffic for the current request."
        },
        "userOverrides": {
          "$ref": "#/definitions/UserOverrides",
          "description": "Values to use instead of the user's respective defaults for the current\nrequest. These are only honored by whitelisted products."
        }
      },
      "type": "object",
      "title": "RequestMetadata"
    },
    "ResponseMetadata": {
      "description": "Common data that is in each API response.",
      "properties": {
        "debugInfo": {
          "$ref": "#/definitions/DebugInfo",
          "description": "Debug information about this request."
        }
      },
      "type": "object",
      "title": "ResponseMetadata"
    },
    "SpecializationStatus": {
      "description": "Agency specialization status",
      "properties": {
        "badgeSpecialization": {
          "description": "The specialization this status is for.",
          "enum": [
            "BADGE_SPECIALIZATION_UNKNOWN",
            "BADGE_SPECIALIZATION_ADWORDS_SEARCH",
            "BADGE_SPECIALIZATION_ADWORDS_DISPLAY",
            "BADGE_SPECIALIZATION_ADWORDS_MOBILE",
            "BADGE_SPECIALIZATION_ADWORDS_VIDEO",
            "BADGE_SPECIALIZATION_ADWORDS_SHOPPING"
          ],
          "type": "string"
        },
        "badgeSpecializationState": {
          "description": "State of agency specialization.",
          "enum": [
            "BADGE_SPECIALIZATION_STATE_UNKNOWN",
            "BADGE_SPECIALIZATION_STATE_PASSED",
            "BADGE_SPECIALIZATION_STATE_NOT_PASSED",
            "BADGE_SPECIALIZATION_STATE_IN_GRACE"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "title": "SpecializationStatus"
    },
    "TrafficSource": {
      "description": "Source of traffic for the current request.",
      "properties": {
        "trafficSourceId": {
          "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us.",
          "type": "string"
        },
        "trafficSubId": {
          "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "TrafficSource"
    },
    "User": {
      "description": "A resource representing a user of the Partners platform.",
      "properties": {
        "availableAdwordsManagerAccounts": {
          "description": "This is the list of AdWords Manager Accounts the user has edit access to.\nIf the user has edit access to multiple accounts, the user can choose the\npreferred account and we use this when a personal account is needed. Can\nbe empty meaning the user has access to no accounts.\n@OutputOnly",
          "items": {
            "$ref": "#/definitions/AdWordsManagerAccountInfo"
          },
          "type": "array"
        },
        "certificationStatus": {
          "description": "The list of achieved certifications. These are calculated based on exam\nresults and other requirements.\n@OutputOnly",
          "items": {
            "$ref": "#/definitions/Certification"
          },
          "type": "array"
        },
        "company": {
          "$ref": "#/definitions/CompanyRelation",
          "description": "The company that the user is associated with.\nIf not present, the user is not associated with any company."
        },
        "companyVerificationEmail": {
          "description": "The email address used by the user used for company verification.\n@OutputOnly",
          "type": "string"
        },
        "examStatus": {
          "description": "The list of exams the user ever taken. For each type of exam, only one\nentry is listed.",
          "items": {
            "$ref": "#/definitions/ExamStatus"
          },
          "type": "array"
        },
        "id": {
          "description": "The ID of the user.",
          "type": "string"
        },
        "lastAccessTime": {
          "description": "The most recent time the user interacted with the Partners site.\n@OutputOnly",
          "format": "google-datetime",
          "type": "string"
        },
        "primaryEmails": {
          "description": "The list of emails the user has access to/can select as primary.\n@OutputOnly",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "profile": {
          "$ref": "#/definitions/UserProfile",
          "description": "The profile information of a Partners user, contains all the directly\neditable user information."
        },
        "publicProfile": {
          "$ref": "#/definitions/PublicProfile",
          "description": "Information about a user's external public profile outside Google Partners."
        }
      },
      "type": "object",
      "title": "User"
    },
    "UserOverrides": {
      "description": "Values to use instead of the user's respective defaults. These are only\nhonored by whitelisted products.",
      "properties": {
        "ipAddress": {
          "description": "IP address to use instead of the user's geo-located IP address.",
          "type": "string"
        },
        "userId": {
          "description": "Logged-in user ID to impersonate instead of the user's ID.",
          "type": "string"
        }
      },
      "type": "object",
      "title": "UserOverrides"
    },
    "UserProfile": {
      "description": "The profile information of a Partners user.",
      "properties": {
        "address": {
          "$ref": "#/definitions/Location",
          "description": "The user's mailing address, contains multiple fields."
        },
        "adwordsManagerAccount": {
          "description": "If the user has edit access to multiple accounts, the user can choose the\npreferred account and it is used when a personal account is needed. Can\nbe empty.",
          "format": "int64",
          "type": "string"
        },
        "channels": {
          "description": "A list of ids representing which channels the user selected they were in.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "emailAddress": {
          "description": "The email address the user has selected on the Partners site as primary.",
          "type": "string"
        },
        "emailOptIns": {
          "$ref": "#/definitions/OptIns",
          "description": "The list of opt-ins for the user, related to communication preferences."
        },
        "familyName": {
          "description": "The user's family name.",
          "type": "string"
        },
        "givenName": {
          "description": "The user's given name.",
          "type": "string"
        },
        "industries": {
          "description": "A list of ids representing which industries the user selected.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "jobFunctions": {
          "description": "A list of ids represnting which job categories the user selected.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "languages": {
          "description": "The list of languages this user understands.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "markets": {
          "description": "A list of ids representing which markets the user was interested in.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phoneNumber": {
          "description": "The user's phone number.",
          "type": "string"
        },
        "primaryCountryCode": {
          "description": "The user's primary country, an ISO 2-character code.",
          "type": "string"
        },
        "profilePublic": {
          "description": "Whether the user's public profile is visible to anyone with the URL.",
          "type": "boolean"
        }
      },
      "type": "object",
      "title": "UserProfile"
    }
  },
  "actions": [
    {
      "id": "analytics.list",
      "title": "analytics.list",
      "description": "Lists analytics data for a user's associated company.\nShould only be called within the context of an authorized logged in user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "pageToken": {
            "type": "string",
            "description": "A token identifying a page of results that the server returns.\nTypically, this is the value of `ListAnalyticsResponse.next_page_token`\nreturned from the previous call to\nListAnalytics.\nWill be a date string in `YYYY-MM-DD` format representing the end date\nof the date range of results to return.\nIf unspecified or set to \"\", default value is the current date."
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size. Server may return fewer analytics than requested.\nIf unspecified or set to 0, default value is 30.\nSpecifies the number of days in the date range when querying analytics.\nThe `page_token` represents the end date of the date range\nand the start date is calculated using the `page_size` as the number\nof days BEFORE the end date.\nMust be a non-negative integer."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListAnalyticsResponse"
      }
    },
    {
      "id": "clientMessages.log",
      "title": "clientMessages.log",
      "description": "Logs a generic message from the client, such as\n`Failed to render component`, `Profile page is running slow`,\n`More than 500 users have accessed this result.`, etc.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "body": {
            "$ref": "#/definitions/LogMessageRequest"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LogMessageResponse"
      }
    },
    {
      "id": "companies.list",
      "title": "companies.list",
      "description": "Lists companies.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "pageToken": {
            "type": "string",
            "description": "A token identifying a page of results that the server returns.\nTypically, this is the value of `ListCompaniesResponse.next_page_token`\nreturned from the previous call to\nListCompanies."
          },
          "companyName": {
            "type": "string",
            "description": "Company name to search for."
          },
          "industries": {
            "type": "array",
            "description": "List of industries the company can help with."
          },
          "websiteUrl": {
            "type": "string",
            "description": "Website URL that will help to find a better matched company.\n."
          },
          "gpsMotivations": {
            "type": "array",
            "description": "List of reasons for using Google Partner Search to get companies."
          },
          "languageCodes": {
            "type": "array",
            "description": "List of language codes that company can support. Only primary language\nsubtags are accepted as defined by\n<a href=\"https://tools.ietf.org/html/bcp47\">BCP 47</a>\n(IETF BCP 47, \"Tags for Identifying Languages\")."
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size. Server may return fewer companies than requested.\nIf unspecified, server picks an appropriate default."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "orderBy": {
            "type": "string",
            "description": "How to order addresses within the returned companies. Currently, only\n`address` and `address desc` is supported which will sorted by closest to\nfarthest in distance from given address and farthest to closest distance\nfrom given address respectively."
          },
          "specializations": {
            "type": "array",
            "description": "List of specializations that the returned agencies should provide. If this\nis not empty, any returned agency must have at least one of these\nspecializations, or one of the services in the \"services\" field."
          },
          "maxMonthlyBudget.currencyCode": {
            "type": "string",
            "description": "The 3-letter currency code defined in ISO 4217."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "minMonthlyBudget.currencyCode": {
            "type": "string",
            "description": "The 3-letter currency code defined in ISO 4217."
          },
          "view": {
            "type": "string",
            "description": "The view of the `Company` resource to be returned. This must not be\n`COMPANY_VIEW_UNSPECIFIED`.",
            "enum": [
              "COMPANY_VIEW_UNSPECIFIED",
              "CV_GOOGLE_PARTNER_SEARCH"
            ]
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "address": {
            "type": "string",
            "description": "The address to use when searching for companies.\nIf not given, the geo-located address of the request is used."
          },
          "minMonthlyBudget.units": {
            "type": "string",
            "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
          },
          "maxMonthlyBudget.nanos": {
            "type": "integer",
            "description": "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
          },
          "services": {
            "type": "array",
            "description": "List of services that the returned agencies should provide. If this is\nnot empty, any returned agency must have at least one of these services,\nor one of the specializations in the \"specializations\" field."
          },
          "maxMonthlyBudget.units": {
            "type": "string",
            "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "minMonthlyBudget.nanos": {
            "type": "integer",
            "description": "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListCompaniesResponse"
      }
    },
    {
      "id": "updateCompanies",
      "title": "updateCompanies",
      "description": "Update company.\nShould only be called within the context of an authorized logged in user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "updateMask": {
            "type": "string",
            "description": "Standard field mask for the set of fields to be updated.\nRequired with at least 1 value in FieldMask's paths."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "body": {
            "$ref": "#/definitions/Company"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Company"
      }
    },
    {
      "id": "companies.get",
      "title": "companies.get",
      "description": "Gets a company.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "The ID of the company to retrieve."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "currencyCode": {
            "type": "string",
            "description": "If the company's budget is in a different currency code than this one, then\nthe converted budget is converted to this currency code."
          },
          "orderBy": {
            "type": "string",
            "description": "How to order addresses within the returned company. Currently, only\n`address` and `address desc` is supported which will sorted by closest to\nfarthest in distance from given address and farthest to closest distance\nfrom given address respectively."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "view": {
            "type": "string",
            "description": "The view of `Company` resource to be returned. This must not be\n`COMPANY_VIEW_UNSPECIFIED`.",
            "enum": [
              "COMPANY_VIEW_UNSPECIFIED",
              "CV_GOOGLE_PARTNER_SEARCH"
            ]
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "address": {
            "type": "string",
            "description": "The address to use for sorting the company's addresses by proximity.\nIf not given, the geo-located address of the request is used.\nUsed when order_by is set."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "companyId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/GetCompanyResponse"
      }
    },
    {
      "id": "companies.leads.create",
      "title": "companies.leads.create",
      "description": "Creates an advertiser lead for the given company ID.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "The ID of the company to contact."
          },
          "body": {
            "$ref": "#/definitions/CreateLeadRequest"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "companyId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateLeadResponse"
      }
    },
    {
      "id": "exams.getToken",
      "title": "exams.getToken",
      "description": "Gets an Exam Token for a Partner's user to take an exam in the Exams System",
      "inputSchema": {
        "type": "object",
        "properties": {
          "examType": {
            "type": "string",
            "description": "The exam type we are requesting a token for.",
            "enum": [
              "CERTIFICATION_EXAM_TYPE_UNSPECIFIED",
              "CET_ADWORDS_FUNDAMENTALS",
              "CET_ADWORDS_ADVANCED_SEARCH",
              "CET_ADWORDS_ADVANCED_DISPLAY",
              "CET_VIDEO_ADS",
              "CET_DOUBLECLICK",
              "CET_ANALYTICS",
              "CET_SHOPPING",
              "CET_MOBILE",
              "CET_DIGITAL_SALES",
              "CET_MOBILE_SITES"
            ]
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "examType"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ExamToken"
      }
    },
    {
      "id": "leads.list",
      "title": "leads.list",
      "description": "Lists advertiser leads for a user's associated company.\nShould only be called within the context of an authorized logged in user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "orderBy": {
            "type": "string",
            "description": "How to order Leads. Currently, only `create_time`\nand `create_time desc` are supported"
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "pageToken": {
            "type": "string",
            "description": "A token identifying a page of results that the server returns.\nTypically, this is the value of `ListLeadsResponse.next_page_token`\nreturned from the previous call to\nListLeads."
          },
          "pageSize": {
            "type": "integer",
            "description": "Requested page size. Server may return fewer leads than requested.\nIf unspecified, server picks an appropriate default."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListLeadsResponse"
      }
    },
    {
      "id": "updateLeads",
      "title": "updateLeads",
      "description": "Updates the specified lead.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "updateMask": {
            "type": "string",
            "description": "Standard field mask for the set of fields to be updated.\nRequired with at least 1 value in FieldMask's paths.\nOnly `state` and `adwords_customer_id` are currently supported."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "body": {
            "$ref": "#/definitions/Lead"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Lead"
      }
    },
    {
      "id": "offers.list",
      "title": "offers.list",
      "description": "Lists the Offers available for the current user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListOffersResponse"
      }
    },
    {
      "id": "offers.history.list",
      "title": "offers.history.list",
      "description": "Lists the Historical Offers for the current user (or user's entire company)",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "pageToken": {
            "type": "string",
            "description": "Token to retrieve a specific page."
          },
          "pageSize": {
            "type": "integer",
            "description": "Maximum number of rows to return per page."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "entireCompany": {
            "type": "boolean",
            "description": "if true, show history for the entire company.  Requires user to be admin."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "orderBy": {
            "type": "string",
            "description": "Comma-separated list of fields to order by, e.g.: \"foo,bar,baz\".\nUse \"foo desc\" to sort descending.\nList of valid field names is: name, offer_code, expiration_time, status,\n    last_modified_time, sender_name, creation_time, country_code,\n    offer_type."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListOffersHistoryResponse"
      }
    },
    {
      "id": "getPartnersstatus",
      "title": "getPartnersstatus",
      "description": "Gets Partners Status of the logged in user's agency.\nShould only be called if the logged in user is the admin of the agency.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GetPartnersStatusResponse"
      }
    },
    {
      "id": "userEvents.log",
      "title": "userEvents.log",
      "description": "Logs a user event.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "body": {
            "$ref": "#/definitions/LogUserEventRequest"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/LogUserEventResponse"
      }
    },
    {
      "id": "userStates.list",
      "title": "userStates.list",
      "description": "Lists states for current user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ListUserStatesResponse"
      }
    },
    {
      "id": "users.updateProfile",
      "title": "users.updateProfile",
      "description": "Updates a user's profile. A user can only update their own profile and\nshould only be called within the context of a logged in user.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "body": {
            "$ref": "#/definitions/UserProfile"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserProfile"
      }
    },
    {
      "id": "users.get",
      "title": "users.get",
      "description": "Gets a user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Identifier of the user. Can be set to <code>me</code> to mean the currently\nauthenticated user."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "userView": {
            "type": "string",
            "description": "Specifies what parts of the user information to return.",
            "enum": [
              "BASIC",
              "PROFILE",
              "PUBLIC_PROFILE"
            ]
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/User"
      }
    },
    {
      "id": "users.deleteCompanyRelation",
      "title": "users.deleteCompanyRelation",
      "description": "Deletes a user's company relation. Unaffiliaites the user from a company.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user. Can be set to <code>me</code> to mean\nthe currently authenticated user."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Empty"
      }
    },
    {
      "id": "users.createCompanyRelation",
      "title": "users.createCompanyRelation",
      "description": "Creates a user's company relation. Affiliates the user to a company.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user. Can be set to <code>me</code> to mean\nthe currently authenticated user."
          },
          "requestMetadata.userOverrides.userId": {
            "type": "string",
            "description": "Logged-in user ID to impersonate instead of the user's ID."
          },
          "requestMetadata.partnersSessionId": {
            "type": "string",
            "description": "Google Partners session ID."
          },
          "requestMetadata.trafficSource.trafficSourceId": {
            "type": "string",
            "description": "Identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "requestMetadata.locale": {
            "type": "string",
            "description": "Locale to use for the current request."
          },
          "requestMetadata.userOverrides.ipAddress": {
            "type": "string",
            "description": "IP address to use instead of the user's geo-located IP address."
          },
          "requestMetadata.experimentIds": {
            "type": "array",
            "description": "Experiment IDs the current request belongs to."
          },
          "requestMetadata.trafficSource.trafficSubId": {
            "type": "string",
            "description": "Second level identifier to indicate where the traffic comes from.\nAn identifier has multiple letters created by a team which redirected the\ntraffic to us."
          },
          "body": {
            "$ref": "#/definitions/CompanyRelation"
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          "pp": {
            "type": "boolean",
            "description": "Pretty-print response.",
            "default": true
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "bearer_token": {
            "type": "string",
            "description": "OAuth bearer token."
          },
          "upload_protocol": {
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "uploadType": {
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          "$.xgafv": {
            "type": "string",
            "description": "V1 error format.",
            "enum": [
              "1",
              "2"
            ]
          },
          "callback": {
            "type": "string",
            "description": "JSONP"
          },
          "alt": {
            "type": "string",
            "description": "Data format for response.",
            "enum": [
              "json",
              "media",
              "proto"
            ],
            "default": "json"
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "access_token": {
            "type": "string",
            "description": "OAuth access token."
          }
        },
        "additionalProperties": false,
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CompanyRelation"
      }
    }
  ],
  "tags": [
    "google"
  ]
}