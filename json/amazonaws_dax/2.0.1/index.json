{
  "id": "amazonaws_dax",
  "title": "Amazon DynamoDB Accelerator (DAX)",
  "description": "DAX is a managed caching service engineered for Amazon DynamoDB. DAX dramatically speeds up database reads by caching frequently-accessed data from DynamoDB, so applications can access that data with sub-millisecond latency. You can create a DAX cluster easily, using the AWS Management Console. With a few simple modifications to your code, your application can begin taking advantage of the DAX cluster and realize significant improvements in read performance.",
  "security": {
    "amazonaws_dax": {
      "integration": "amazonaws_dax",
      "fields": {
        "hmac": "Amazon Signature authorization v4"
      }
    }
  },
  "logo": {
    "backgroundColor": "#FFFFFF",
    "url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
  },
  "tags": [
    "cloud",
    "aws"
  ],
  "definitions": {
    "AvailabilityZoneList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "AwsQueryErrorMessage": {
      "type": "string"
    },
    "ChangeType": {
      "enum": [
        "IMMEDIATE",
        "REQUIRES_REBOOT"
      ],
      "type": "string"
    },
    "Cluster": {
      "description": "Contains all of the attributes of a specific DAX cluster.",
      "properties": {
        "ActiveNodes": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "The number of nodes in the cluster that are active (i.e., capable of serving requests)."
        },
        "ClusterArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that uniquely identifies the cluster. "
        },
        "ClusterDiscoveryEndpoint": {
          "$ref": "#/definitions/Endpoint",
          "description": "The configuration endpoint for this DAX cluster, consisting of a DNS name and a port number. Client applications can specify this endpoint, rather than an individual node endpoint, and allow the DAX client software to intelligently route requests and responses to nodes in the DAX cluster."
        },
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX cluster."
        },
        "Description": {
          "$ref": "#/definitions/String",
          "description": "The description of the cluster."
        },
        "IamRoleArn": {
          "$ref": "#/definitions/String",
          "description": "A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf."
        },
        "NodeIdsToRemove": {
          "$ref": "#/definitions/NodeIdentifierList",
          "description": "A list of nodes to be removed from the cluster."
        },
        "NodeType": {
          "$ref": "#/definitions/String",
          "description": "The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)"
        },
        "Nodes": {
          "$ref": "#/definitions/NodeList",
          "description": "A list of nodes that are currently in the cluster."
        },
        "NotificationConfiguration": {
          "$ref": "#/definitions/NotificationConfiguration",
          "description": "Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS)."
        },
        "ParameterGroup": {
          "$ref": "#/definitions/ParameterGroupStatus",
          "description": "The parameter group being used by nodes in the cluster."
        },
        "PreferredMaintenanceWindow": {
          "$ref": "#/definitions/String",
          "description": "A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window."
        },
        "SecurityGroups": {
          "$ref": "#/definitions/SecurityGroupMembershipList",
          "description": "A list of security groups, and the status of each, for the nodes in the cluster."
        },
        "Status": {
          "$ref": "#/definitions/String",
          "description": "The current status of the cluster."
        },
        "SubnetGroup": {
          "$ref": "#/definitions/String",
          "description": "The subnet group where the DAX cluster is running."
        },
        "TotalNodes": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "The total number of nodes in the cluster."
        }
      },
      "type": "object"
    },
    "ClusterAlreadyExistsFault": {
      "description": "You already have a DAX cluster with the given identifier.",
      "properties": {},
      "type": "object"
    },
    "ClusterList": {
      "items": {
        "$ref": "#/definitions/Cluster"
      },
      "type": "array"
    },
    "ClusterNameList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "ClusterNotFoundFault": {
      "description": "The requested cluster ID does not refer to an existing DAX cluster.",
      "properties": {},
      "type": "object"
    },
    "ClusterQuotaForCustomerExceededFault": {
      "description": "You have attempted to exceed the maximum number of DAX clusters for your AWS account.",
      "properties": {},
      "type": "object"
    },
    "CreateClusterRequest": {
      "properties": {
        "AvailabilityZones": {
          "$ref": "#/definitions/AvailabilityZoneList",
          "description": "The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs."
        },
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "<p>The cluster identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 20 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"
        },
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the cluster."
        },
        "IamRoleArn": {
          "$ref": "#/definitions/String",
          "description": "A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf."
        },
        "NodeType": {
          "$ref": "#/definitions/String",
          "description": "The compute and memory capacity of the nodes in the cluster."
        },
        "NotificationTopicArn": {
          "$ref": "#/definitions/String",
          "description": "<p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will be sent.</p> <note> <p>The Amazon SNS topic owner must be same as the DAX cluster owner.</p> </note>"
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The parameter group to be associated with the DAX cluster."
        },
        "PreferredMaintenanceWindow": {
          "$ref": "#/definitions/String",
          "description": "<p>Specifies the weekly time range during which maintenance on the DAX cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:05:00-sun:09:00</code> </p> <note> <p>If you don't specify a preferred maintenance window when you create or modify a cache cluster, DAX assigns a 60-minute maintenance window on a randomly selected day of the week.</p> </note>"
        },
        "ReplicationFactor": {
          "$ref": "#/definitions/Integer",
          "description": "<p>The number of nodes in the DAX cluster. A replication factor of 1 will create a single-node cluster, without any read replicas. For additional fault tolerance, you can create a multiple node cluster with one or more read replicas. To do this, set <i>ReplicationFactor</i> to 2 or more.</p> <note> <p>AWS recommends that you have at least two read replicas per cluster.</p> </note>"
        },
        "SecurityGroupIds": {
          "$ref": "#/definitions/SecurityGroupIdentifierList",
          "description": "<p>A list of security group IDs to be assigned to each node in the DAX cluster. (Each of the security group ID is system-generated.)</p> <p>If this parameter is not specified, DAX assigns the default VPC security group to each node.</p>"
        },
        "SubnetGroupName": {
          "$ref": "#/definitions/String",
          "description": "<p>The name of the subnet group to be used for the replication group.</p> <important> <p>DAX clusters can only run in an Amazon VPC environment. All of the subnets that you specify in a subnet group must exist in the same VPC.</p> </important>"
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "A set of tags to associate with the DAX cluster. "
        }
      },
      "required": [
        "ClusterName",
        "NodeType",
        "ReplicationFactor",
        "IamRoleArn"
      ],
      "type": "object"
    },
    "CreateClusterResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster that you have created."
        }
      },
      "type": "object"
    },
    "CreateParameterGroupRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the parameter group."
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group to apply to all of the clusters in this replication group."
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "object"
    },
    "CreateParameterGroupResponse": {
      "properties": {
        "ParameterGroup": {
          "$ref": "#/definitions/ParameterGroup",
          "description": "Represents the output of a <i>CreateParameterGroup</i> action."
        }
      },
      "type": "object"
    },
    "CreateSubnetGroupRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description for the subnet group"
        },
        "SubnetGroupName": {
          "$ref": "#/definitions/String",
          "description": "A name for the subnet group. This value is stored as a lowercase string. "
        },
        "SubnetIds": {
          "$ref": "#/definitions/SubnetIdentifierList",
          "description": "A list of VPC subnet IDs for the subnet group."
        }
      },
      "required": [
        "SubnetGroupName",
        "SubnetIds"
      ],
      "type": "object"
    },
    "CreateSubnetGroupResponse": {
      "properties": {
        "SubnetGroup": {
          "$ref": "#/definitions/SubnetGroup",
          "description": "Represents the output of a <i>CreateSubnetGroup</i> operation."
        }
      },
      "type": "object"
    },
    "DecreaseReplicationFactorRequest": {
      "properties": {
        "AvailabilityZones": {
          "$ref": "#/definitions/AvailabilityZoneList",
          "description": "The Availability Zone(s) from which to remove nodes."
        },
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX cluster from which you want to remove nodes."
        },
        "NewReplicationFactor": {
          "$ref": "#/definitions/Integer",
          "description": "The new number of nodes for the DAX cluster."
        },
        "NodeIdsToRemove": {
          "$ref": "#/definitions/NodeIdentifierList",
          "description": "The unique identifiers of the nodes to be removed from the cluster."
        }
      },
      "required": [
        "ClusterName",
        "NewReplicationFactor"
      ],
      "type": "object"
    },
    "DecreaseReplicationFactorResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster, after you have decreased its replication factor."
        }
      },
      "type": "object"
    },
    "DeleteClusterRequest": {
      "properties": {
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the cluster to be deleted."
        }
      },
      "required": [
        "ClusterName"
      ],
      "type": "object"
    },
    "DeleteClusterResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster that is being deleted."
        }
      },
      "type": "object"
    },
    "DeleteParameterGroupRequest": {
      "properties": {
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group to delete."
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "object"
    },
    "DeleteParameterGroupResponse": {
      "properties": {
        "DeletionMessage": {
          "$ref": "#/definitions/String",
          "description": "A user-specified message for this action (i.e., a reason for deleting the parameter group)."
        }
      },
      "type": "object"
    },
    "DeleteSubnetGroupRequest": {
      "properties": {
        "SubnetGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the subnet group to delete."
        }
      },
      "required": [
        "SubnetGroupName"
      ],
      "type": "object"
    },
    "DeleteSubnetGroupResponse": {
      "properties": {
        "DeletionMessage": {
          "$ref": "#/definitions/String",
          "description": "A user-specified message for this action (i.e., a reason for deleting the subnet group)."
        }
      },
      "type": "object"
    },
    "DescribeClustersRequest": {
      "properties": {
        "ClusterNames": {
          "$ref": "#/definitions/ClusterNameList",
          "description": "The names of the DAX clusters being described."
        },
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        }
      },
      "type": "object"
    },
    "DescribeClustersResponse": {
      "properties": {
        "Clusters": {
          "$ref": "#/definitions/ClusterList",
          "description": "The descriptions of your DAX clusters, in response to a <i>DescribeClusters</i> request."
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        }
      },
      "type": "object"
    },
    "DescribeDefaultParametersRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        }
      },
      "type": "object"
    },
    "DescribeDefaultParametersResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterList",
          "description": "A list of parameters. Each element in the list represents one parameter."
        }
      },
      "type": "object"
    },
    "DescribeEventsRequest": {
      "properties": {
        "Duration": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "The number of minutes' worth of events to retrieve."
        },
        "EndTime": {
          "$ref": "#/definitions/TStamp",
          "description": "The end of the time interval for which to retrieve events, specified in ISO 8601 format."
        },
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        },
        "SourceName": {
          "$ref": "#/definitions/String",
          "description": "The identifier of the event source for which events will be returned. If not specified, then all sources are included in the response."
        },
        "SourceType": {
          "$ref": "#/definitions/SourceType",
          "description": "The event source to retrieve events for. If no value is specified, all events are returned."
        },
        "StartTime": {
          "$ref": "#/definitions/TStamp",
          "description": "The beginning of the time interval to retrieve events for, specified in ISO 8601 format."
        }
      },
      "type": "object"
    },
    "DescribeEventsResponse": {
      "properties": {
        "Events": {
          "$ref": "#/definitions/EventList",
          "description": "An array of events. Each element in the array represents one event."
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        }
      },
      "type": "object"
    },
    "DescribeParameterGroupsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        },
        "ParameterGroupNames": {
          "$ref": "#/definitions/ParameterGroupNameList",
          "description": "The names of the parameter groups."
        }
      },
      "type": "object"
    },
    "DescribeParameterGroupsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        },
        "ParameterGroups": {
          "$ref": "#/definitions/ParameterGroupList",
          "description": "An array of parameter groups. Each element in the array represents one parameter group."
        }
      },
      "type": "object"
    },
    "DescribeParametersRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group."
        },
        "Source": {
          "$ref": "#/definitions/String",
          "description": "How the parameter is defined. For example, <code>system</code> denotes a system-defined parameter."
        }
      },
      "required": [
        "ParameterGroupName"
      ],
      "type": "object"
    },
    "DescribeParametersResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        },
        "Parameters": {
          "$ref": "#/definitions/ParameterList",
          "description": "A list of parameters within a parameter group. Each element in the list represents one parameter."
        }
      },
      "type": "object"
    },
    "DescribeSubnetGroupsRequest": {
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/IntegerOptional",
          "description": "<p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p> <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>"
        },
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>."
        },
        "SubnetGroupNames": {
          "$ref": "#/definitions/SubnetGroupNameList",
          "description": "The name of the subnet group."
        }
      },
      "type": "object"
    },
    "DescribeSubnetGroupsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "Provides an identifier to allow retrieval of paginated results."
        },
        "SubnetGroups": {
          "$ref": "#/definitions/SubnetGroupList",
          "description": "An array of subnet groups. Each element in the array represents a single subnet group."
        }
      },
      "type": "object"
    },
    "Endpoint": {
      "description": "Represents the information required for client programs to connect to the configuration endpoint for a DAX cluster, or to an individual node within the cluster.",
      "properties": {
        "Address": {
          "$ref": "#/definitions/String",
          "description": "The DNS hostname of the endpoint."
        },
        "Port": {
          "$ref": "#/definitions/Integer",
          "description": "The port number that applications should use to connect to the endpoint."
        }
      },
      "type": "object"
    },
    "Event": {
      "description": "Represents a single occurrence of something interesting within the system. Some examples of events are creating a DAX cluster, adding or removing a node, or rebooting a node.",
      "properties": {
        "Date": {
          "$ref": "#/definitions/TStamp",
          "description": "The date and time when the event occurred."
        },
        "Message": {
          "$ref": "#/definitions/String",
          "description": "A user-defined message associated with the event."
        },
        "SourceName": {
          "$ref": "#/definitions/String",
          "description": "The source of the event. For example, if the event occurred at the node level, the source would be the node ID."
        },
        "SourceType": {
          "$ref": "#/definitions/SourceType",
          "description": "Specifies the origin of this event - a cluster, a parameter group, a node ID, etc."
        }
      },
      "type": "object"
    },
    "EventList": {
      "items": {
        "$ref": "#/definitions/Event"
      },
      "type": "array"
    },
    "IncreaseReplicationFactorRequest": {
      "properties": {
        "AvailabilityZones": {
          "$ref": "#/definitions/AvailabilityZoneList",
          "description": "The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs."
        },
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX cluster that will receive additional nodes."
        },
        "NewReplicationFactor": {
          "$ref": "#/definitions/Integer",
          "description": "The new number of nodes for the DAX cluster."
        }
      },
      "required": [
        "ClusterName",
        "NewReplicationFactor"
      ],
      "type": "object"
    },
    "IncreaseReplicationFactorResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster. with its new replication factor."
        }
      },
      "type": "object"
    },
    "InsufficientClusterCapacityFault": {
      "description": "There are not enough system resources to create the cluster you requested (or to resize an already-existing cluster). ",
      "properties": {},
      "type": "object"
    },
    "Integer": {
      "type": "integer"
    },
    "IntegerOptional": {
      "type": "integer"
    },
    "InvalidARNFault": {
      "description": "The Amazon Resource Name (ARN) supplied in the request is not valid.",
      "properties": {},
      "type": "object"
    },
    "InvalidClusterStateFault": {
      "description": "The requested DAX cluster is not in the <i>available</i> state.",
      "properties": {},
      "type": "object"
    },
    "InvalidParameterCombinationException": {
      "description": "Two or more incompatible parameters were specified.",
      "properties": {
        "message": {
          "$ref": "#/definitions/AwsQueryErrorMessage"
        }
      },
      "type": "object"
    },
    "InvalidParameterGroupStateFault": {
      "description": "One or more parameters in a parameter group are in an invalid state.",
      "properties": {},
      "type": "object"
    },
    "InvalidParameterValueException": {
      "description": "The value for a parameter is invalid.",
      "properties": {
        "message": {
          "$ref": "#/definitions/AwsQueryErrorMessage"
        }
      },
      "type": "object"
    },
    "InvalidSubnet": {
      "description": "An invalid subnet identifier was specified.",
      "properties": {},
      "type": "object"
    },
    "InvalidVPCNetworkStateFault": {
      "description": "The VPC network is in an invalid state.",
      "properties": {},
      "type": "object"
    },
    "IsModifiable": {
      "enum": [
        "TRUE",
        "FALSE",
        "CONDITIONAL"
      ],
      "type": "string"
    },
    "KeyList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "ListTagsRequest": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token."
        },
        "ResourceName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX resource to which the tags belong."
        }
      },
      "required": [
        "ResourceName"
      ],
      "type": "object"
    },
    "ListTagsResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/String",
          "description": "If this value is present, there are additional results to be displayed. To retrieve them, call <code>ListTags</code> again, with <code>NextToken</code> set to this value."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "A list of tags currently associated with the DAX cluster."
        }
      },
      "type": "object"
    },
    "Node": {
      "description": "Represents an individual node within a DAX cluster.",
      "properties": {
        "AvailabilityZone": {
          "$ref": "#/definitions/String",
          "description": "The Availability Zone (AZ) in which the node has been deployed."
        },
        "Endpoint": {
          "$ref": "#/definitions/Endpoint",
          "description": "The endpoint for the node, consisting of a DNS name and a port number. Client applications can connect directly to a node endpoint, if desired (as an alternative to allowing DAX client software to intelligently route requests and responses to nodes in the DAX cluster."
        },
        "NodeCreateTime": {
          "$ref": "#/definitions/TStamp",
          "description": "The date and time (in UNIX epoch format) when the node was launched."
        },
        "NodeId": {
          "$ref": "#/definitions/String",
          "description": "A system-generated identifier for the node."
        },
        "NodeStatus": {
          "$ref": "#/definitions/String",
          "description": "The current status of the node. For example: <code>available</code>."
        },
        "ParameterGroupStatus": {
          "$ref": "#/definitions/String",
          "description": "The status of the parameter group associated with this node. For example, <code>in-sync</code>."
        }
      },
      "type": "object"
    },
    "NodeIdentifierList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "NodeList": {
      "items": {
        "$ref": "#/definitions/Node"
      },
      "type": "array"
    },
    "NodeNotFoundFault": {
      "description": "None of the nodes in the cluster have the given node ID.",
      "properties": {},
      "type": "object"
    },
    "NodeQuotaForClusterExceededFault": {
      "description": "You have attempted to exceed the maximum number of nodes for a DAX cluster.",
      "properties": {},
      "type": "object"
    },
    "NodeQuotaForCustomerExceededFault": {
      "description": "You have attempted to exceed the maximum number of nodes for your AWS account.",
      "properties": {},
      "type": "object"
    },
    "NodeTypeSpecificValue": {
      "description": "Represents a parameter value that is applicable to a particular node type.",
      "properties": {
        "NodeType": {
          "$ref": "#/definitions/String",
          "description": "A node type to which the parameter value applies."
        },
        "Value": {
          "$ref": "#/definitions/String",
          "description": "The parameter value for this node type."
        }
      },
      "type": "object"
    },
    "NodeTypeSpecificValueList": {
      "items": {
        "$ref": "#/definitions/NodeTypeSpecificValue"
      },
      "type": "array"
    },
    "NotificationConfiguration": {
      "description": "Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS).",
      "properties": {
        "TopicArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that identifies the topic. "
        },
        "TopicStatus": {
          "$ref": "#/definitions/String",
          "description": "The current state of the topic."
        }
      },
      "type": "object"
    },
    "Parameter": {
      "description": "Describes an individual setting that controls some aspect of DAX behavior.",
      "properties": {
        "AllowedValues": {
          "$ref": "#/definitions/String",
          "description": "A range of values within which the parameter can be set."
        },
        "ChangeType": {
          "$ref": "#/definitions/ChangeType",
          "description": "The conditions under which changes to this parameter can be applied. For example, <code>requires-reboot</code> indicates that a new value for this parameter will only take effect if a node is rebooted."
        },
        "DataType": {
          "$ref": "#/definitions/String",
          "description": "The data type of the parameter. For example, <code>integer</code>:"
        },
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the parameter"
        },
        "IsModifiable": {
          "$ref": "#/definitions/IsModifiable",
          "description": "Whether the customer is allowed to modify the parameter."
        },
        "NodeTypeSpecificValues": {
          "$ref": "#/definitions/NodeTypeSpecificValueList",
          "description": "A list of node types, and specific parameter values for each node."
        },
        "ParameterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter."
        },
        "ParameterType": {
          "$ref": "#/definitions/ParameterType",
          "description": "Determines whether the parameter can be applied to any nodes, or only nodes of a particular type."
        },
        "ParameterValue": {
          "$ref": "#/definitions/String",
          "description": "The value for the parameter."
        },
        "Source": {
          "$ref": "#/definitions/String",
          "description": "How the parameter is defined. For example, <code>system</code> denotes a system-defined parameter."
        }
      },
      "type": "object"
    },
    "ParameterGroup": {
      "description": "A named set of parameters that are applied to all of the nodes in a DAX cluster.",
      "properties": {
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the parameter group."
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group."
        }
      },
      "type": "object"
    },
    "ParameterGroupAlreadyExistsFault": {
      "description": "The specified parameter group already exists.",
      "properties": {},
      "type": "object"
    },
    "ParameterGroupList": {
      "items": {
        "$ref": "#/definitions/ParameterGroup"
      },
      "type": "array"
    },
    "ParameterGroupNameList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "ParameterGroupNotFoundFault": {
      "description": "The specified parameter group does not exist.",
      "properties": {},
      "type": "object"
    },
    "ParameterGroupQuotaExceededFault": {
      "description": "You have attempted to exceed the maximum number of parameter groups.",
      "properties": {},
      "type": "object"
    },
    "ParameterGroupStatus": {
      "description": "The status of a parameter group.",
      "properties": {
        "NodeIdsToReboot": {
          "$ref": "#/definitions/NodeIdentifierList",
          "description": "The node IDs of one or more nodes to be rebooted."
        },
        "ParameterApplyStatus": {
          "$ref": "#/definitions/String",
          "description": "The status of parameter updates. "
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group."
        }
      },
      "type": "object"
    },
    "ParameterList": {
      "items": {
        "$ref": "#/definitions/Parameter"
      },
      "type": "array"
    },
    "ParameterNameValue": {
      "description": "An individual DAX parameter.",
      "properties": {
        "ParameterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter."
        },
        "ParameterValue": {
          "$ref": "#/definitions/String",
          "description": "The value of the parameter."
        }
      },
      "type": "object"
    },
    "ParameterNameValueList": {
      "items": {
        "$ref": "#/definitions/ParameterNameValue"
      },
      "type": "array"
    },
    "ParameterType": {
      "enum": [
        "DEFAULT",
        "NODE_TYPE_SPECIFIC"
      ],
      "type": "string"
    },
    "RebootNodeRequest": {
      "properties": {
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX cluster containing the node to be rebooted."
        },
        "NodeId": {
          "$ref": "#/definitions/String",
          "description": "The system-assigned ID of the node to be rebooted."
        }
      },
      "required": [
        "ClusterName",
        "NodeId"
      ],
      "type": "object"
    },
    "RebootNodeResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster after a node has been rebooted."
        }
      },
      "type": "object"
    },
    "SecurityGroupIdentifierList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "SecurityGroupMembership": {
      "description": "An individual VPC security group and its status.",
      "properties": {
        "SecurityGroupIdentifier": {
          "$ref": "#/definitions/String",
          "description": "The unique ID for this security group."
        },
        "Status": {
          "$ref": "#/definitions/String",
          "description": "The status of this security group."
        }
      },
      "type": "object"
    },
    "SecurityGroupMembershipList": {
      "items": {
        "$ref": "#/definitions/SecurityGroupMembership"
      },
      "type": "array"
    },
    "SourceType": {
      "enum": [
        "CLUSTER",
        "PARAMETER_GROUP",
        "SUBNET_GROUP"
      ],
      "type": "string"
    },
    "String": {
      "type": "string"
    },
    "Subnet": {
      "description": "Represents the subnet associated with a DAX cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with DAX.",
      "properties": {
        "SubnetAvailabilityZone": {
          "$ref": "#/definitions/String",
          "description": "The Availability Zone (AZ) for subnet subnet."
        },
        "SubnetIdentifier": {
          "$ref": "#/definitions/String",
          "description": "The system-assigned identifier for the subnet."
        }
      },
      "type": "object"
    },
    "SubnetGroup": {
      "description": "<p>Represents the output of one of the following actions:</p> <ul> <li> <p> <i>CreateSubnetGroup</i> </p> </li> <li> <p> <i>ModifySubnetGroup</i> </p> </li> </ul>",
      "properties": {
        "Description": {
          "$ref": "#/definitions/String",
          "description": "The description of the subnet group."
        },
        "SubnetGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the subnet group."
        },
        "Subnets": {
          "$ref": "#/definitions/SubnetList",
          "description": "A list of subnets associated with the subnet group. "
        },
        "VpcId": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group."
        }
      },
      "type": "object"
    },
    "SubnetGroupAlreadyExistsFault": {
      "description": "The specified subnet group already exists.",
      "properties": {},
      "type": "object"
    },
    "SubnetGroupInUseFault": {
      "description": "The specified subnet group is currently in use.",
      "properties": {},
      "type": "object"
    },
    "SubnetGroupList": {
      "items": {
        "$ref": "#/definitions/SubnetGroup"
      },
      "type": "array"
    },
    "SubnetGroupNameList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "SubnetGroupNotFoundFault": {
      "description": "The requested subnet group name does not refer to an existing subnet group.",
      "properties": {},
      "type": "object"
    },
    "SubnetGroupQuotaExceededFault": {
      "description": "The request cannot be processed because it would exceed the allowed number of subnets in a subnet group.",
      "properties": {},
      "type": "object"
    },
    "SubnetIdentifierList": {
      "items": {
        "$ref": "#/definitions/String"
      },
      "type": "array"
    },
    "SubnetInUse": {
      "description": "The requested subnet is being used by another subnet group.",
      "properties": {},
      "type": "object"
    },
    "SubnetList": {
      "items": {
        "$ref": "#/definitions/Subnet"
      },
      "type": "array"
    },
    "SubnetQuotaExceededFault": {
      "description": "The request cannot be processed because it would exceed the allowed number of subnets in a subnet group.",
      "properties": {},
      "type": "object"
    },
    "TStamp": {
      "format": "date-time",
      "type": "string"
    },
    "Tag": {
      "description": "<p>A description of a tag. Every tag is a key-value pair. You can add up to 50 tags to a single DAX cluster.</p> <p>AWS-assigned tag names and values are automatically assigned the <code>aws:</code> prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix <code>user:</code>.</p> <p>You cannot backdate the application of a tag.</p>",
      "properties": {
        "Key": {
          "$ref": "#/definitions/String",
          "description": "The key for the tag. Tag keys are case sensitive. Every DAX cluster can only have one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value."
        },
        "Value": {
          "$ref": "#/definitions/String",
          "description": "The value of the tag. Tag values are case-sensitive and can be null. "
        }
      },
      "type": "object"
    },
    "TagList": {
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "type": "array"
    },
    "TagNotFoundFault": {
      "description": "The tag does not exist.",
      "properties": {},
      "type": "object"
    },
    "TagQuotaPerResourceExceeded": {
      "description": "You have exceeded the maximum number of tags for this DAX cluster.",
      "properties": {},
      "type": "object"
    },
    "TagResourceRequest": {
      "properties": {
        "ResourceName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX resource to which tags should be added."
        },
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tags to be assigned to the DAX resource. "
        }
      },
      "required": [
        "ResourceName",
        "Tags"
      ],
      "type": "object"
    },
    "TagResourceResponse": {
      "properties": {
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The list of tags that are associated with the DAX resource."
        }
      },
      "type": "object"
    },
    "UntagResourceRequest": {
      "properties": {
        "ResourceName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX resource from which the tags should be removed."
        },
        "TagKeys": {
          "$ref": "#/definitions/KeyList",
          "description": "A list of tag keys. If the DAX cluster has any tags with these keys, then the tags are removed from the cluster."
        }
      },
      "required": [
        "ResourceName",
        "TagKeys"
      ],
      "type": "object"
    },
    "UntagResourceResponse": {
      "properties": {
        "Tags": {
          "$ref": "#/definitions/TagList",
          "description": "The tag keys that have been removed from the cluster."
        }
      },
      "type": "object"
    },
    "UpdateClusterRequest": {
      "properties": {
        "ClusterName": {
          "$ref": "#/definitions/String",
          "description": "The name of the DAX cluster to be modified."
        },
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the changes being made to the cluster."
        },
        "NotificationTopicArn": {
          "$ref": "#/definitions/String",
          "description": "The Amazon Resource Name (ARN) that identifies the topic."
        },
        "NotificationTopicStatus": {
          "$ref": "#/definitions/String",
          "description": "The current state of the topic."
        },
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of a parameter group for this cluster."
        },
        "PreferredMaintenanceWindow": {
          "$ref": "#/definitions/String",
          "description": "A range of time when maintenance of DAX cluster software will be performed. For example: <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window."
        },
        "SecurityGroupIds": {
          "$ref": "#/definitions/SecurityGroupIdentifierList",
          "description": "A list of user-specified security group IDs to be assigned to each node in the DAX cluster. If this parameter is not specified, DAX assigns the default VPC security group to each node."
        }
      },
      "required": [
        "ClusterName"
      ],
      "type": "object"
    },
    "UpdateClusterResponse": {
      "properties": {
        "Cluster": {
          "$ref": "#/definitions/Cluster",
          "description": "A description of the DAX cluster, after it has been modified."
        }
      },
      "type": "object"
    },
    "UpdateParameterGroupRequest": {
      "properties": {
        "ParameterGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the parameter group."
        },
        "ParameterNameValues": {
          "$ref": "#/definitions/ParameterNameValueList",
          "description": "An array of name-value pairs for the parameters in the group. Each element in the array represents a single parameter."
        }
      },
      "required": [
        "ParameterGroupName",
        "ParameterNameValues"
      ],
      "type": "object"
    },
    "UpdateParameterGroupResponse": {
      "properties": {
        "ParameterGroup": {
          "$ref": "#/definitions/ParameterGroup",
          "description": "The parameter group that has been modified."
        }
      },
      "type": "object"
    },
    "UpdateSubnetGroupRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/String",
          "description": "A description of the subnet group."
        },
        "SubnetGroupName": {
          "$ref": "#/definitions/String",
          "description": "The name of the subnet group."
        },
        "SubnetIds": {
          "$ref": "#/definitions/SubnetIdentifierList",
          "description": "A list of subnet IDs in the subnet group."
        }
      },
      "required": [
        "SubnetGroupName"
      ],
      "type": "object"
    },
    "UpdateSubnetGroupResponse": {
      "properties": {
        "SubnetGroup": {
          "$ref": "#/definitions/SubnetGroup",
          "description": "The subnet group that has been modified."
        }
      },
      "type": "object"
    }
  },
  "actions": [
    {
      "id": "CreateCluster",
      "title": "CreateCluster",
      "description": "Creates a DAX cluster. All nodes in the cluster run the same DAX caching software.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateClusterRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateClusterResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "CreateParameterGroup",
      "title": "CreateParameterGroup",
      "description": "Creates a new parameter group. A parameter group is a collection of parameters that you apply to all of the nodes in a DAX cluster.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateParameterGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateParameterGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "CreateSubnetGroup",
      "title": "CreateSubnetGroup",
      "description": "Creates a new subnet group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/CreateSubnetGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/CreateSubnetGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DecreaseReplicationFactor",
      "title": "DecreaseReplicationFactor",
      "description": "<p>Removes one or more nodes from a DAX cluster.</p> <note> <p>You cannot use <code>DecreaseReplicationFactor</code> to remove the last node in a DAX cluster. If you need to do this, use <code>DeleteCluster</code> instead.</p> </note>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DecreaseReplicationFactorRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DecreaseReplicationFactorResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DeleteCluster",
      "title": "DeleteCluster",
      "description": "Deletes a previously provisioned DAX cluster. <i>DeleteCluster</i> deletes all associated nodes, node endpoints and the DAX cluster itself. When you receive a successful response from this action, DAX immediately begins deleting the cluster; you cannot cancel or revert this action.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteClusterRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteClusterResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DeleteParameterGroup",
      "title": "DeleteParameterGroup",
      "description": "Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any DAX clusters.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteParameterGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteParameterGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DeleteSubnetGroup",
      "title": "DeleteSubnetGroup",
      "description": "<p>Deletes a subnet group.</p> <note> <p>You cannot delete a subnet group if it is associated with any DAX clusters.</p> </note>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DeleteSubnetGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DeleteSubnetGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeClusters",
      "title": "DescribeClusters",
      "description": "<p>Returns information about all provisioned DAX clusters if no cluster identifier is specified, or about a specific DAX cluster if a cluster identifier is supplied.</p> <p>If the cluster is in the CREATING state, only cluster level information will be displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the DELETING state, only cluster level information will be displayed.</p> <p>If nodes are currently being added to the DAX cluster, node endpoint information and creation time for the additional nodes will not be displayed until they are completely provisioned. When the DAX cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If nodes are currently being removed from the DAX cluster, no endpoint information for the removed nodes is displayed.</p>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeClustersRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeClustersResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeDefaultParameters",
      "title": "DescribeDefaultParameters",
      "description": "Returns the default system parameter information for the DAX caching software.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeDefaultParametersRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeDefaultParametersResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeEvents",
      "title": "DescribeEvents",
      "description": "<p>Returns events related to DAX clusters and parameter groups. You can obtain events specific to a particular DAX cluster or parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeEventsRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeEventsResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeParameterGroups",
      "title": "DescribeParameterGroups",
      "description": "Returns a list of parameter group descriptions. If a parameter group name is specified, the list will contain only the descriptions for that group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeParameterGroupsRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeParameterGroupsResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeParameters",
      "title": "DescribeParameters",
      "description": "Returns the detailed parameter list for a particular parameter group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeParametersRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeParametersResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "DescribeSubnetGroups",
      "title": "DescribeSubnetGroups",
      "description": "Returns a list of subnet group descriptions. If a subnet group name is specified, the list will contain only the description of that group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/DescribeSubnetGroupsRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/DescribeSubnetGroupsResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "IncreaseReplicationFactor",
      "title": "IncreaseReplicationFactor",
      "description": "Adds one or more nodes to a DAX cluster.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/IncreaseReplicationFactorRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/IncreaseReplicationFactorResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "ListTags",
      "title": "ListTags",
      "description": "List all of the tags for a DAX cluster. You can call <code>ListTags</code> up to 10 times per second, per account.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/ListTagsRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/ListTagsResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "RebootNode",
      "title": "RebootNode",
      "description": "Reboots a single node of a DAX cluster. The reboot action takes place as soon as possible. During the reboot, the node status is set to REBOOTING.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/RebootNodeRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/RebootNodeResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "TagResource",
      "title": "TagResource",
      "description": "Associates a set of tags with a DAX resource. You can call <code>TagResource</code> up to 5 times per second, per account. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/TagResourceRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/TagResourceResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "UntagResource",
      "title": "UntagResource",
      "description": "Removes the association of tags from a DAX resource. You can call <code>UntagResource</code> up to 5 times per second, per account. ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UntagResourceRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UntagResourceResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "UpdateCluster",
      "title": "UpdateCluster",
      "description": "Modifies the settings for a DAX cluster. You can use this action to change one or more cluster configuration parameters by specifying the parameters and the new values.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateClusterRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateClusterResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "UpdateParameterGroup",
      "title": "UpdateParameterGroup",
      "description": "Modifies the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateParameterGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateParameterGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    },
    {
      "id": "UpdateSubnetGroup",
      "title": "UpdateSubnetGroup",
      "description": "Modifies an existing subnet group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/definitions/UpdateSubnetGroupRequest"
          },
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "X-Amz-Content-Sha256": {
            "type": "string"
          },
          "X-Amz-Date": {
            "type": "string"
          },
          "X-Amz-Algorithm": {
            "type": "string"
          },
          "X-Amz-Credential": {
            "type": "string"
          },
          "X-Amz-Security-Token": {
            "type": "string"
          },
          "X-Amz-Signature": {
            "type": "string"
          },
          "X-Amz-SignedHeaders": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "body",
          "Action",
          "Version"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/UpdateSubnetGroupResponse"
      },
      "security": {
        "amazonaws_dax": {
          "integration": "amazonaws_dax"
        }
      }
    }
  ]
}