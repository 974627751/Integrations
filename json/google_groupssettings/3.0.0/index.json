{
  "id": "google_groupssettings",
  "title": "Groups Settings",
  "description": "Lets you manage permission levels and related settings of a group.",
  "security": {
    "google_groupssettings": {
      "integration": "google_groupssettings",
      "fields": {
        "access_token": "An OAuth access token",
        "refresh_token": "An OAuth refresh token (optional)",
        "client_id": "An OAuth client ID (optional)",
        "client_secret": "An OAuth client secret (optional)",
        "redirect_uri": "The callback URL for your application"
      },
      "oauth": {
        "type": "oauth2",
        "flow": "accessCode",
        "scopes": {
          "https://www.googleapis.com/auth/apps.groups.settings": "View and manage the settings of a G Suite group"
        },
        "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
        "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
        "description": "Allows offline access using a refresh_token"
      }
    }
  },
  "logo": {
    "url": "https://s3-us-west-2.amazonaws.com/datafire-logos/google_groupssettings.png"
  },
  "actionCount": 5,
  "definitions": {
    "Groups": {
      "description": "JSON template for Group resource",
      "properties": {
        "allowExternalMembers": {
          "description": "Are external members allowed to join the group.",
          "type": "string"
        },
        "allowGoogleCommunication": {
          "description": "Is google allowed to contact admins.",
          "type": "string"
        },
        "allowWebPosting": {
          "description": "If posting from web is allowed.",
          "type": "string"
        },
        "archiveOnly": {
          "description": "If the group is archive only",
          "type": "string"
        },
        "customFooterText": {
          "description": "Custom footer text.",
          "type": "string"
        },
        "customReplyTo": {
          "description": "Default email to which reply to any message should go.",
          "type": "string"
        },
        "defaultMessageDenyNotificationText": {
          "description": "Default message deny notification message",
          "type": "string"
        },
        "description": {
          "description": "Description of the group",
          "type": "string"
        },
        "email": {
          "description": "Email id of the group",
          "type": "string"
        },
        "includeCustomFooter": {
          "description": "Whether to include custom footer.",
          "type": "string"
        },
        "includeInGlobalAddressList": {
          "description": "If this groups should be included in global address list or not.",
          "type": "string"
        },
        "isArchived": {
          "description": "If the contents of the group are archived.",
          "type": "string"
        },
        "kind": {
          "default": "groupsSettings#groups",
          "description": "The type of the resource.",
          "type": "string"
        },
        "maxMessageBytes": {
          "description": "Maximum message size allowed.",
          "format": "int32",
          "type": "integer"
        },
        "membersCanPostAsTheGroup": {
          "description": "Can members post using the group email address.",
          "type": "string"
        },
        "messageDisplayFont": {
          "description": "Default message display font. Possible values are: DEFAULT_FONT FIXED_WIDTH_FONT",
          "type": "string"
        },
        "messageModerationLevel": {
          "description": "Moderation level for messages. Possible values are: MODERATE_ALL_MESSAGES MODERATE_NON_MEMBERS MODERATE_NEW_MEMBERS MODERATE_NONE",
          "type": "string"
        },
        "name": {
          "description": "Name of the Group",
          "type": "string"
        },
        "primaryLanguage": {
          "description": "Primary language for the group.",
          "type": "string"
        },
        "replyTo": {
          "description": "Whome should the default reply to a message go to. Possible values are: REPLY_TO_CUSTOM REPLY_TO_SENDER REPLY_TO_LIST REPLY_TO_OWNER REPLY_TO_IGNORE REPLY_TO_MANAGERS",
          "type": "string"
        },
        "sendMessageDenyNotification": {
          "description": "Should the member be notified if his message is denied by owner.",
          "type": "string"
        },
        "showInGroupDirectory": {
          "description": "Is the group listed in groups directory",
          "type": "string"
        },
        "spamModerationLevel": {
          "description": "Moderation level for messages detected as spam. Possible values are: ALLOW MODERATE SILENTLY_MODERATE REJECT",
          "type": "string"
        },
        "whoCanAdd": {
          "description": "Permissions to add members. Possible values are: ALL_MANAGERS_CAN_ADD ALL_MEMBERS_CAN_ADD NONE_CAN_ADD",
          "type": "string"
        },
        "whoCanContactOwner": {
          "description": "Permission to contact owner of the group via web UI. Possible values are: ANYONE_CAN_CONTACT ALL_IN_DOMAIN_CAN_CONTACT ALL_MEMBERS_CAN_CONTACT ALL_MANAGERS_CAN_CONTACT",
          "type": "string"
        },
        "whoCanInvite": {
          "description": "Permissions to invite members. Possible values are: ALL_MEMBERS_CAN_INVITE ALL_MANAGERS_CAN_INVITE NONE_CAN_INVITE",
          "type": "string"
        },
        "whoCanJoin": {
          "description": "Permissions to join the group. Possible values are: ANYONE_CAN_JOIN ALL_IN_DOMAIN_CAN_JOIN INVITED_CAN_JOIN CAN_REQUEST_TO_JOIN",
          "type": "string"
        },
        "whoCanLeaveGroup": {
          "description": "Permission to leave the group. Possible values are: ALL_MANAGERS_CAN_LEAVE ALL_MEMBERS_CAN_LEAVE NONE_CAN_LEAVE",
          "type": "string"
        },
        "whoCanPostMessage": {
          "description": "Permissions to post messages to the group. Possible values are: NONE_CAN_POST ALL_MANAGERS_CAN_POST ALL_MEMBERS_CAN_POST ALL_OWNERS_CAN_POST ALL_IN_DOMAIN_CAN_POST ANYONE_CAN_POST",
          "type": "string"
        },
        "whoCanViewGroup": {
          "description": "Permissions to view group. Possible values are: ANYONE_CAN_VIEW ALL_IN_DOMAIN_CAN_VIEW ALL_MEMBERS_CAN_VIEW ALL_MANAGERS_CAN_VIEW",
          "type": "string"
        },
        "whoCanViewMembership": {
          "description": "Permissions to view membership. Possible values are: ALL_IN_DOMAIN_CAN_VIEW ALL_MEMBERS_CAN_VIEW ALL_MANAGERS_CAN_VIEW",
          "type": "string"
        }
      },
      "type": "object",
      "title": "Groups"
    }
  },
  "actions": [
    {
      "id": "oauthCallback",
      "title": "",
      "description": "Exchange the code passed to your redirect URI for an access_token",
      "inputSchema": {
        "type": "object",
        "properties": {
          "code": {
            "title": "code",
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "google_groupssettings": {
          "integration": "google_groupssettings"
        }
      }
    },
    {
      "id": "oauthRefresh",
      "title": "",
      "description": "Exchange a refresh_token for an access_token",
      "inputSchema": {},
      "outputSchema": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "expiration": {
            "type": "string"
          }
        }
      },
      "security": {
        "google_groupssettings": {
          "integration": "google_groupssettings"
        }
      }
    },
    {
      "id": "groups.get",
      "title": "groups.get",
      "description": "Gets one resource by id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "groupUniqueId": {
            "type": "string",
            "description": "The resource ID"
          },
          "alt": {
            "type": "string",
            "description": "Data format for the response.",
            "enum": [
              "atom",
              "json"
            ],
            "default": "atom"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
          },
          "userIp": {
            "type": "string",
            "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
          }
        },
        "additionalProperties": false,
        "required": [
          "groupUniqueId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Groups"
      },
      "security": {
        "google_groupssettings": {
          "integration": "google_groupssettings"
        }
      }
    },
    {
      "id": "groups.patch",
      "title": "groups.patch",
      "description": "Updates an existing resource. This method supports patch semantics.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "groupUniqueId": {
            "type": "string",
            "description": "The resource ID"
          },
          "body": {
            "$ref": "#/definitions/Groups"
          },
          "alt": {
            "type": "string",
            "description": "Data format for the response.",
            "enum": [
              "atom",
              "json"
            ],
            "default": "atom"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
          },
          "userIp": {
            "type": "string",
            "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
          }
        },
        "additionalProperties": false,
        "required": [
          "groupUniqueId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Groups"
      },
      "security": {
        "google_groupssettings": {
          "integration": "google_groupssettings"
        }
      }
    },
    {
      "id": "groups.update",
      "title": "groups.update",
      "description": "Updates an existing resource.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "groupUniqueId": {
            "type": "string",
            "description": "The resource ID"
          },
          "body": {
            "$ref": "#/definitions/Groups"
          },
          "alt": {
            "type": "string",
            "description": "Data format for the response.",
            "enum": [
              "atom",
              "json"
            ],
            "default": "atom"
          },
          "fields": {
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          "key": {
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          "oauth_token": {
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          "prettyPrint": {
            "type": "boolean",
            "description": "Returns response with indentations and line breaks.",
            "default": true
          },
          "quotaUser": {
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
          },
          "userIp": {
            "type": "string",
            "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
          }
        },
        "additionalProperties": false,
        "required": [
          "groupUniqueId"
        ]
      },
      "outputSchema": {
        "$ref": "#/definitions/Groups"
      },
      "security": {
        "google_groupssettings": {
          "integration": "google_groupssettings"
        }
      }
    }
  ],
  "directory": "generated",
  "tags": [
    "cloud",
    "google"
  ]
}