{
  "id": "gitlab",
  "title": "Gitlab",
  "description": "The platform for modern developers\nGitLab unifies issues, code review, CI and CD into a single UI",
  "definitions": {
    "AccessRequester": {
      "description": "This feature was introduced in GitLab 8.11.",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "requested_at": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplicationSetting": {
      "description": "Modify application settings",
      "properties": {
        "after_sign_out_path": {
          "type": "string"
        },
        "after_sign_up_text": {
          "type": "string"
        },
        "container_registry_token_expire_delay": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "default_branch_protection": {
          "type": "string"
        },
        "default_group_visibility": {
          "type": "string"
        },
        "default_project_visibility": {
          "type": "string"
        },
        "default_projects_limit": {
          "type": "string"
        },
        "default_snippet_visibility": {
          "type": "string"
        },
        "domain_blacklist": {
          "type": "string"
        },
        "domain_blacklist_enabled": {
          "type": "string"
        },
        "domain_whitelist": {
          "type": "string"
        },
        "gravatar_enabled": {
          "type": "string"
        },
        "home_page_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "koding_enabled": {
          "type": "string"
        },
        "koding_url": {
          "type": "string"
        },
        "max_attachment_size": {
          "type": "string"
        },
        "plantuml_enabled": {
          "type": "string"
        },
        "plantuml_url": {
          "type": "string"
        },
        "repository_storage": {
          "type": "string"
        },
        "repository_storages": {
          "type": "string"
        },
        "restricted_visibility_levels": {
          "type": "string"
        },
        "session_expire_delay": {
          "type": "string"
        },
        "sign_in_text": {
          "type": "string"
        },
        "signin_enabled": {
          "type": "string"
        },
        "signup_enabled": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_oauth_applications": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AwardEmoji": {
      "description": "This feature was introduced in 8.9",
      "properties": {
        "awardable_id": {
          "type": "string"
        },
        "awardable_type": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        }
      },
      "type": "object"
    },
    "BasicProjectDetails": {
      "description": "Get all projects for admin user",
      "properties": {
        "http_url_to_repo": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Board": {
      "description": "This feature was introduced in 8.13",
      "properties": {
        "id": {
          "type": "string"
        },
        "lists": {
          "$ref": "#/definitions/List"
        }
      },
      "type": "object"
    },
    "Build": {
      "description": "This feature was added in GitLab 8.11",
      "properties": {
        "artifacts_file": {
          "$ref": "#/definitions/BuildArtifactFile"
        },
        "commit": {
          "$ref": "#/definitions/RepoCommit"
        },
        "coverage": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pipeline": {
          "$ref": "#/definitions/PipelineBasic"
        },
        "ref": {
          "type": "string"
        },
        "runner": {
          "$ref": "#/definitions/Runner"
        },
        "stage": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "type": "object"
    },
    "BuildArtifactFile": {
      "properties": {
        "filename": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitNote": {
      "description": "Post comment to commit",
      "properties": {
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "line": {
          "type": "string"
        },
        "line_type": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitStatus": {
      "description": "Post status to a commit",
      "properties": {
        "allow_failure": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "target_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Compare": {
      "description": "Compare two branches, tags, or commits",
      "properties": {
        "commit": {
          "$ref": "#/definitions/RepoCommit"
        },
        "commits": {
          "$ref": "#/definitions/RepoCommit"
        },
        "compare_same_ref": {
          "type": "string"
        },
        "compare_timeout": {
          "type": "string"
        },
        "diffs": {
          "$ref": "#/definitions/RepoDiff"
        }
      },
      "type": "object"
    },
    "Contributor": {
      "description": "Get repository contributors",
      "properties": {
        "additions": {
          "type": "string"
        },
        "commits": {
          "type": "string"
        },
        "deletions": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Deployment": {
      "description": "This feature was introduced in GitLab 8.11.",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "deployable": {
          "$ref": "#/definitions/Build"
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentBasic"
        },
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        }
      },
      "type": "object"
    },
    "Email": {
      "description": "Add new email address to the currently authenticated user",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Environment": {
      "description": "This feature was introduced in GitLab 8.11.",
      "properties": {
        "external_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "slug": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvironmentBasic": {
      "properties": {
        "external_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Event": {
      "description": "This feature was introduced in GitLab 8.13.",
      "properties": {
        "action_name": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "author_id": {
          "type": "string"
        },
        "author_username": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/Note"
        },
        "project_id": {
          "type": "string"
        },
        "target_id": {
          "type": "string"
        },
        "target_title": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GlobalNotificationSetting": {
      "description": "This feature was introduced in GitLab 8.12",
      "properties": {
        "events": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "notification_email": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Group": {
      "description": "Update a group. Available only for users who can administrate groups.",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "statistics": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupDetail": {
      "description": "Transfer a project to the group namespace. Available only for admin.",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "projects": {
          "$ref": "#/definitions/Project"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "shared_projects": {
          "$ref": "#/definitions/Project"
        },
        "statistics": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Hook": {
      "description": "Delete a hook",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "enable_ssl_verification": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Identity": {
      "properties": {
        "extern_uid": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Issue": {
      "description": "Get currently authenticated user's issues",
      "properties": {
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "confidential": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "project_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Label": {
      "description": "Unsubscribe from a resource",
      "properties": {
        "closed_issues_count": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "open_merge_requests_count": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LabelBasic": {
      "properties": {
        "color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "List": {
      "description": "This feature was introduced in 8.13",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LabelBasic"
        },
        "position": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MRNote": {
      "description": "List issues that will be closed on merge",
      "properties": {
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "note": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Member": {
      "description": "Updates a member of a group or project.",
      "properties": {
        "access_level": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MergeRequest": {
      "description": "Unsubscribe from a resource",
      "properties": {
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "force_remove_source_branch": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "merge_commit_sha": {
          "type": "string"
        },
        "merge_status": {
          "type": "string"
        },
        "merge_when_build_succeeds": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "project_id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "should_remove_source_branch": {
          "type": "string"
        },
        "source_branch": {
          "type": "string"
        },
        "source_project_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        },
        "target_branch": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "work_in_progress": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MergeRequestChanges": {
      "description": "Show the merge request changes",
      "properties": {
        "assignee": {
          "$ref": "#/definitions/UserBasic"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "changes": {
          "$ref": "#/definitions/RepoDiff"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "downvotes": {
          "type": "string"
        },
        "force_remove_source_branch": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "labels": {
          "type": "string"
        },
        "merge_commit_sha": {
          "type": "string"
        },
        "merge_status": {
          "type": "string"
        },
        "merge_when_build_succeeds": {
          "type": "string"
        },
        "milestone": {
          "$ref": "#/definitions/Milestone"
        },
        "project_id": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "should_remove_source_branch": {
          "type": "string"
        },
        "source_branch": {
          "type": "string"
        },
        "source_project_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscribed": {
          "type": "string"
        },
        "target_branch": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "upvotes": {
          "type": "string"
        },
        "user_notes_count": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "work_in_progress": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MergeRequestDiff": {
      "description": "This feature was introduced in GitLab 8.12.",
      "properties": {
        "base_commit_sha": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "head_commit_sha": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "merge_request_id": {
          "type": "string"
        },
        "real_size": {
          "type": "string"
        },
        "start_commit_sha": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MergeRequestDiffFull": {
      "description": "This feature was introduced in GitLab 8.12.",
      "properties": {
        "base_commit_sha": {
          "type": "string"
        },
        "commits": {
          "$ref": "#/definitions/RepoCommit"
        },
        "created_at": {
          "type": "string"
        },
        "diffs": {
          "$ref": "#/definitions/RepoDiff"
        },
        "head_commit_sha": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "merge_request_id": {
          "type": "string"
        },
        "real_size": {
          "type": "string"
        },
        "start_commit_sha": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Milestone": {
      "description": "Update an existing project milestone",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_date": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "iid": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Namespace": {
      "description": "Get a namespaces list",
      "properties": {
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Note": {
      "description": "Delete a +noteable+ note",
      "properties": {
        "attachment": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "body": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "downvote?": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "noteable_id": {
          "type": "string"
        },
        "noteable_type": {
          "type": "string"
        },
        "system": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "upvote?": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NotificationSetting": {
      "description": "This feature was introduced in GitLab 8.12",
      "properties": {
        "events": {
          "type": "string"
        },
        "level": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PersonalSnippet": {
      "description": "This feature was introduced in GitLab 8.15.",
      "properties": {
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "raw_url": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Pipeline": {
      "description": "This feature was introduced in GitLab 8.11.",
      "properties": {
        "before_sha": {
          "type": "string"
        },
        "committed_at": {
          "type": "string"
        },
        "coverage": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "finished_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "started_at": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserBasic"
        },
        "yaml_errors": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PipelineBasic": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Project": {
      "description": "Unstar a project",
      "properties": {
        "archived": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "builds_enabled": {
          "type": "string"
        },
        "container_registry_enabled": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "creator_id": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "forked_from_project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "forks_count": {
          "type": "string"
        },
        "http_url_to_repo": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "issues_enabled": {
          "type": "string"
        },
        "last_activity_at": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "merge_requests_enabled": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/Namespace"
        },
        "only_allow_merge_if_all_discussions_are_resolved": {
          "type": "string"
        },
        "only_allow_merge_if_build_succeeds": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserBasic"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        },
        "public": {
          "type": "string"
        },
        "public_builds": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "runners_token": {
          "type": "string"
        },
        "shared_runners_enabled": {
          "type": "string"
        },
        "shared_with_groups": {
          "type": "string"
        },
        "snippets_enabled": {
          "type": "string"
        },
        "ssh_url_to_repo": {
          "type": "string"
        },
        "star_count": {
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/ProjectStatistics"
        },
        "tag_list": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "wiki_enabled": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectGroupLink": {
      "description": "Share the project with a group",
      "properties": {
        "expires_at": {
          "type": "string"
        },
        "group_access": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectHook": {
      "description": "Deletes project hook",
      "properties": {
        "build_events": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "enable_ssl_verification": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "issues_events": {
          "type": "string"
        },
        "merge_requests_events": {
          "type": "string"
        },
        "note_events": {
          "type": "string"
        },
        "pipeline_events": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "wiki_page_events": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectService": {
      "description": "Get the service settings for project",
      "properties": {
        "active": {
          "type": "string"
        },
        "build_events": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "issues_events": {
          "type": "string"
        },
        "merge_requests_events": {
          "type": "string"
        },
        "note_events": {
          "type": "string"
        },
        "pipeline_events": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "push_events": {
          "type": "string"
        },
        "tag_push_events": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectSnippet": {
      "description": "Update an existing project snippet",
      "properties": {
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "created_at": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectStatistics": {
      "properties": {
        "build_artifacts_size": {
          "type": "string"
        },
        "commit_count": {
          "type": "string"
        },
        "lfs_objects_size": {
          "type": "string"
        },
        "repository_size": {
          "type": "string"
        },
        "storage_size": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectWithAccess": {
      "description": "Get a single project",
      "properties": {
        "archived": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "builds_enabled": {
          "type": "string"
        },
        "container_registry_enabled": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "creator_id": {
          "type": "string"
        },
        "default_branch": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "forked_from_project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "forks_count": {
          "type": "string"
        },
        "http_url_to_repo": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "issues_enabled": {
          "type": "string"
        },
        "last_activity_at": {
          "type": "string"
        },
        "lfs_enabled": {
          "type": "string"
        },
        "merge_requests_enabled": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "name_with_namespace": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/Namespace"
        },
        "only_allow_merge_if_all_discussions_are_resolved": {
          "type": "string"
        },
        "only_allow_merge_if_build_succeeds": {
          "type": "string"
        },
        "open_issues_count": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserBasic"
        },
        "path": {
          "type": "string"
        },
        "path_with_namespace": {
          "type": "string"
        },
        "permissions": {
          "type": "string"
        },
        "public": {
          "type": "string"
        },
        "public_builds": {
          "type": "string"
        },
        "request_access_enabled": {
          "type": "string"
        },
        "runners_token": {
          "type": "string"
        },
        "shared_runners_enabled": {
          "type": "string"
        },
        "shared_with_groups": {
          "type": "string"
        },
        "snippets_enabled": {
          "type": "string"
        },
        "ssh_url_to_repo": {
          "type": "string"
        },
        "star_count": {
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/ProjectStatistics"
        },
        "tag_list": {
          "type": "string"
        },
        "visibility_level": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "wiki_enabled": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Release": {
      "description": "Update a tag's release note",
      "properties": {
        "description": {
          "type": "string"
        },
        "tag_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoBranch": {
      "description": "Create branch",
      "properties": {
        "commit": {
          "type": "string"
        },
        "developers_can_merge": {
          "type": "string"
        },
        "developers_can_push": {
          "type": "string"
        },
        "merged": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "protected": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoCommit": {
      "description": "Get the commits of a merge request",
      "properties": {
        "author_email": {
          "type": "string"
        },
        "author_name": {
          "type": "string"
        },
        "committer_email": {
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "short_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoCommitDetail": {
      "description": "Get a specific commit of a project",
      "properties": {
        "author_email": {
          "type": "string"
        },
        "author_name": {
          "type": "string"
        },
        "authored_date": {
          "type": "string"
        },
        "committed_date": {
          "type": "string"
        },
        "committer_email": {
          "type": "string"
        },
        "committer_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "parent_ids": {
          "type": "string"
        },
        "short_id": {
          "type": "string"
        },
        "stats": {
          "$ref": "#/definitions/RepoCommitStats"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoCommitStats": {
      "properties": {
        "additions": {
          "type": "string"
        },
        "deletions": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoDiff": {
      "properties": {
        "a_mode": {
          "type": "string"
        },
        "b_mode": {
          "type": "string"
        },
        "deleted_file": {
          "type": "string"
        },
        "diff": {
          "type": "string"
        },
        "new_file": {
          "type": "string"
        },
        "new_path": {
          "type": "string"
        },
        "old_path": {
          "type": "string"
        },
        "renamed_file": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoLicense": {
      "description": "This feature was introduced in GitLab 8.7.",
      "properties": {
        "conditions": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "html_url": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "limitations": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "permissions": {
          "type": "string"
        },
        "popular": {
          "type": "string"
        },
        "source_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoTag": {
      "description": "Create a new repository tag",
      "properties": {
        "commit": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      },
      "type": "object"
    },
    "RepoTreeObject": {
      "description": "Get a project repository tree",
      "properties": {
        "id": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Runner": {
      "description": "Remove a runner",
      "properties": {
        "active": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_shared": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RunnerDetails": {
      "description": "Update runner's details",
      "properties": {
        "active": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        },
        "contacted_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_shared": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "projects": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "revision": {
          "type": "string"
        },
        "run_untagged": {
          "type": "string"
        },
        "tag_list": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SSHKey": {
      "description": "Delete an SSH key from the currently authenticated user",
      "properties": {
        "can_push": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SSHKeyWithUser": {
      "description": "Get single ssh key by id. Only available to admin users",
      "properties": {
        "can_push": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserPublic"
        }
      },
      "type": "object"
    },
    "Template": {
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TemplatesList": {
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Todo": {
      "description": "Mark a todo as done",
      "properties": {
        "action_name": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/UserBasic"
        },
        "body": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/BasicProjectDetails"
        },
        "state": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "target_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Trigger": {
      "description": "Delete a trigger",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string"
        },
        "last_used": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TriggerRequest": {
      "description": "Trigger a GitLab project build",
      "properties": {
        "id": {
          "type": "string"
        },
        "variables": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_admin": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserBasic": {
      "description": "Get a single user",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserPublic": {
      "description": "Get the currently authenticated user",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "can_create_group": {
          "type": "string"
        },
        "can_create_project": {
          "type": "string"
        },
        "color_scheme_id": {
          "type": "string"
        },
        "confirmed_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "current_sign_in_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "external": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "identities": {
          "$ref": "#/definitions/Identity"
        },
        "is_admin": {
          "type": "string"
        },
        "last_sign_in_at": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "projects_limit": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "theme_id": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "two_factor_enabled": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserWithPrivateToken": {
      "description": "Login to get token",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "can_create_group": {
          "type": "string"
        },
        "can_create_project": {
          "type": "string"
        },
        "color_scheme_id": {
          "type": "string"
        },
        "confirmed_at": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "current_sign_in_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "external": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "identities": {
          "$ref": "#/definitions/Identity"
        },
        "is_admin": {
          "type": "string"
        },
        "last_sign_in_at": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "private_token": {
          "type": "string"
        },
        "projects_limit": {
          "type": "string"
        },
        "skype": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "theme_id": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "two_factor_enabled": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        },
        "website_url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Variable": {
      "description": "Delete an existing variable from a project",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "actions": [
    {
      "id": "getV3ApplicationSettings",
      "title": "getV3ApplicationSettings",
      "description": "Get the current application settings",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/ApplicationSetting"
      }
    },
    {
      "id": "putV3ApplicationSettings",
      "title": "putV3ApplicationSettings",
      "description": "Modify application settings",
      "inputSchema": {
        "type": "object",
        "properties": {
          "default_branch_protection": {
            "type": "integer",
            "format": "int32",
            "description": "Determine if developers can push to master",
            "enum": [
              0,
              1,
              2
            ]
          },
          "default_project_visibility": {
            "type": "integer",
            "format": "int32",
            "description": "The default project visibility",
            "enum": [
              0,
              10,
              20
            ]
          },
          "default_snippet_visibility": {
            "type": "integer",
            "format": "int32",
            "description": "The default snippet visibility",
            "enum": [
              0,
              10,
              20
            ]
          },
          "default_group_visibility": {
            "type": "integer",
            "format": "int32",
            "description": "The default group visibility",
            "enum": [
              0,
              10,
              20
            ]
          },
          "restricted_visibility_levels": {
            "type": "array",
            "description": "Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users."
          },
          "import_sources": {
            "type": "array",
            "description": "Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com",
            "enum": [
              "github",
              "bitbucket",
              "gitlab",
              "google_code",
              "fogbugz",
              "git",
              "gitlab_project"
            ]
          },
          "disabled_oauth_sign_in_sources": {
            "type": "array",
            "description": "Disable certain OAuth sign-in sources"
          },
          "enabled_git_access_protocol": {
            "type": "string",
            "description": "Allow only the selected protocols to be used for Git access.",
            "enum": [
              "ssh",
              "http",
              "nil"
            ]
          },
          "gravatar_enabled": {
            "type": "boolean",
            "description": "Flag indicating if the Gravatar service is enabled"
          },
          "default_projects_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of personal projects"
          },
          "max_attachment_size": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum attachment size in MB"
          },
          "session_expire_delay": {
            "type": "integer",
            "format": "int32",
            "description": "Session duration in minutes. GitLab restart is required to apply changes."
          },
          "user_oauth_applications": {
            "type": "boolean",
            "description": "Allow users to register any application to use GitLab as an OAuth provider"
          },
          "user_default_external": {
            "type": "boolean",
            "description": "Newly registered users will by default be external"
          },
          "signup_enabled": {
            "type": "boolean",
            "description": "Flag indicating if sign up is enabled"
          },
          "send_user_confirmation_email": {
            "type": "boolean",
            "description": "Send confirmation email on sign-up"
          },
          "domain_whitelist": {
            "type": "string",
            "description": "ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com"
          },
          "domain_blacklist_enabled": {
            "type": "boolean",
            "description": "Enable domain blacklist for sign ups"
          },
          "domain_blacklist": {
            "type": "string",
            "description": "Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com"
          },
          "after_sign_up_text": {
            "type": "string",
            "description": "Text shown after sign up"
          },
          "signin_enabled": {
            "type": "boolean",
            "description": "Flag indicating if sign in is enabled"
          },
          "require_two_factor_authentication": {
            "type": "boolean",
            "description": "Require all users to setup Two-factor authentication"
          },
          "two_factor_grace_period": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication"
          },
          "home_page_url": {
            "type": "string",
            "description": "We will redirect non-logged in users to this page"
          },
          "after_sign_out_path": {
            "type": "string",
            "description": "We will redirect users to this page after they sign out"
          },
          "sign_in_text": {
            "type": "string",
            "description": "The sign in text of the GitLab application"
          },
          "help_page_text": {
            "type": "string",
            "description": "Custom text displayed on the help page"
          },
          "shared_runners_enabled": {
            "type": "boolean",
            "description": "Enable shared runners for new projects"
          },
          "shared_runners_text": {
            "type": "string",
            "description": "Shared runners text "
          },
          "max_artifacts_size": {
            "type": "integer",
            "format": "int32",
            "description": "Set the maximum file size each build's artifacts can have"
          },
          "container_registry_token_expire_delay": {
            "type": "integer",
            "format": "int32",
            "description": "Authorization token duration (minutes)"
          },
          "metrics_enabled": {
            "type": "boolean",
            "description": "Enable the InfluxDB metrics"
          },
          "metrics_host": {
            "type": "string",
            "description": "The InfluxDB host"
          },
          "metrics_port": {
            "type": "integer",
            "format": "int32",
            "description": "The UDP port to use for connecting to InfluxDB"
          },
          "metrics_pool_size": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of InfluxDB connections to open"
          },
          "metrics_timeout": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of seconds after which an InfluxDB connection will time out"
          },
          "metrics_method_call_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "A method call is only tracked when it takes longer to complete than the given amount of milliseconds."
          },
          "metrics_sample_interval": {
            "type": "integer",
            "format": "int32",
            "description": "The sampling interval in seconds"
          },
          "metrics_packet_size": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of points to store in a single UDP packet"
          },
          "sidekiq_throttling_enabled": {
            "type": "boolean",
            "description": "Enable Sidekiq Job Throttling"
          },
          "sidekiq_throttling_queus": {
            "type": "array",
            "description": "Choose which queues you wish to throttle"
          },
          "sidekiq_throttling_factor": {
            "type": "number",
            "format": "float",
            "description": "The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive."
          },
          "recaptcha_enabled": {
            "type": "boolean",
            "description": "Helps prevent bots from creating accounts"
          },
          "recaptcha_site_key": {
            "type": "string",
            "description": "Generate site key at http://www.google.com/recaptcha"
          },
          "recaptcha_private_key": {
            "type": "string",
            "description": "Generate private key at http://www.google.com/recaptcha"
          },
          "akismet_enabled": {
            "type": "boolean",
            "description": "Helps prevent bots from creating issues"
          },
          "akismet_api_key": {
            "type": "string",
            "description": "Generate API key at http://www.akismet.com"
          },
          "admin_notification_email": {
            "type": "string",
            "description": "Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area."
          },
          "sentry_enabled": {
            "type": "boolean",
            "description": "Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com"
          },
          "sentry_dsn": {
            "type": "string",
            "description": "Sentry Data Source Name"
          },
          "repository_storage": {
            "type": "string",
            "description": "Storage paths for new projects"
          },
          "repository_checks_enabled": {
            "type": "boolean",
            "description": "GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues."
          },
          "koding_enabled": {
            "type": "boolean",
            "description": "Enable Koding"
          },
          "koding_url": {
            "type": "string",
            "description": "The Koding team URL"
          },
          "plantuml_enabled": {
            "type": "boolean",
            "description": "Enable PlantUML"
          },
          "plantuml_url": {
            "type": "string",
            "description": "The PlantUML server URL"
          },
          "version_check_enabled": {
            "type": "boolean",
            "description": "Let GitLab inform you when an update is available."
          },
          "email_author_in_body": {
            "type": "boolean",
            "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead."
          },
          "html_emails_enabled": {
            "type": "boolean",
            "description": "By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format."
          },
          "housekeeping_enabled": {
            "type": "boolean",
            "description": "Enable automatic repository housekeeping (git repack, git gc)"
          },
          "housekeeping_bitmaps_enabled": {
            "type": "boolean",
            "description": "Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance."
          },
          "housekeeping_incremental_repack_period": {
            "type": "integer",
            "format": "int32",
            "description": "Number of Git pushes after which an incremental 'git repack' is run."
          },
          "housekeeping_full_repack_period": {
            "type": "integer",
            "format": "int32",
            "description": "Number of Git pushes after which a full 'git repack' is run."
          },
          "housekeeping_gc_period": {
            "type": "integer",
            "format": "int32",
            "description": "Number of Git pushes after which 'git gc' is run."
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ApplicationSetting"
      }
    },
    {
      "id": "postV3CiLint",
      "title": "postV3CiLint",
      "description": "Validation of .gitlab-ci.yml content",
      "inputSchema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of .gitlab-ci.yml"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3DeployKeys",
      "title": "getV3DeployKeys",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3Dockerfiles",
      "title": "getV3Dockerfiles",
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3DockerfilesName",
      "title": "getV3DockerfilesName",
      "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3Gitignores",
      "title": "getV3Gitignores",
      "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3GitignoresName",
      "title": "getV3GitignoresName",
      "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3GitlabCiYmls",
      "title": "getV3GitlabCiYmls",
      "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3GitlabCiYmlsName",
      "title": "getV3GitlabCiYmlsName",
      "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3Groups",
      "title": "getV3Groups",
      "description": "Get a groups list",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "statistics": {
            "type": "boolean",
            "description": "Include project statistics"
          },
          "skip_groups": {
            "type": "array",
            "description": "Array of group ids to exclude from list"
          },
          "all_available": {
            "type": "boolean",
            "description": "Show all group that you have access to"
          },
          "search": {
            "type": "string",
            "description": "Search for a specific group"
          },
          "order_by": {
            "type": "string",
            "description": "Order by name or path",
            "enum": [
              "name",
              "path"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Sort by asc (ascending) or desc (descending)",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Group"
      }
    },
    {
      "id": "postV3Groups",
      "title": "postV3Groups",
      "description": "Create a group. Available only for users who can create groups.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group"
          },
          "path": {
            "type": "string",
            "description": "The path of the group"
          },
          "description": {
            "type": "string",
            "description": "The description of the group"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the group"
          },
          "lfs_enabled": {
            "type": "boolean",
            "description": "Enable/disable LFS for the projects in this group"
          },
          "request_access_enabled": {
            "type": "boolean",
            "description": "Allow users to request member access"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Group"
      }
    },
    {
      "id": "getV3GroupsOwned",
      "title": "getV3GroupsOwned",
      "description": "Get list of owned groups for authenticated user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "statistics": {
            "type": "boolean",
            "description": "Include project statistics"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Group"
      }
    },
    {
      "id": "deleteV3GroupsId",
      "title": "deleteV3GroupsId",
      "description": "Remove a group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3GroupsId",
      "title": "getV3GroupsId",
      "description": "Get a single group, with containing projects.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GroupDetail"
      }
    },
    {
      "id": "putV3GroupsId",
      "title": "putV3GroupsId",
      "description": "Update a group. Available only for users who can administrate groups.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          },
          "name": {
            "type": "string",
            "description": "The name of the group"
          },
          "path": {
            "type": "string",
            "description": "The path of the group"
          },
          "description": {
            "type": "string",
            "description": "The description of the group"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the group"
          },
          "lfs_enabled": {
            "type": "boolean",
            "description": "Enable/disable LFS for the projects in this group"
          },
          "request_access_enabled": {
            "type": "boolean",
            "description": "Allow users to request member access"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Group"
      }
    },
    {
      "id": "getV3GroupsIdAccessRequests",
      "title": "getV3GroupsIdAccessRequests",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AccessRequester"
      }
    },
    {
      "id": "postV3GroupsIdAccessRequests",
      "title": "postV3GroupsIdAccessRequests",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AccessRequester"
      }
    },
    {
      "id": "deleteV3GroupsIdAccessRequestsUserId",
      "title": "deleteV3GroupsIdAccessRequestsUserId",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the access requester"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3GroupsIdAccessRequestsUserIdApprove",
      "title": "putV3GroupsIdAccessRequestsUserIdApprove",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the access requester"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level (defaults: `30`, developer access level)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "getV3GroupsIdIssues",
      "title": "getV3GroupsIdIssues",
      "description": "Get a list of group issues",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          },
          "state": {
            "type": "string",
            "description": "Return opened, closed, or all issues",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "milestone": {
            "type": "string",
            "description": "Return issues for a specific milestone"
          },
          "order_by": {
            "type": "string",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "getV3GroupsIdMembers",
      "title": "getV3GroupsIdMembers",
      "description": "Gets a list of group or project members viewable by the authenticated user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "query": {
            "type": "string",
            "description": "A query string to search for members"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "postV3GroupsIdMembers",
      "title": "postV3GroupsIdMembers",
      "description": "Adds a member to a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the new member"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level (defaults: `30`, developer access level)"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date string in the format YEAR-MONTH-DAY"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "deleteV3GroupsIdMembersUserId",
      "title": "deleteV3GroupsIdMembersUserId",
      "description": "Removes a user from a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the member"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3GroupsIdMembersUserId",
      "title": "getV3GroupsIdMembersUserId",
      "description": "Gets a member of a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the member"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "putV3GroupsIdMembersUserId",
      "title": "putV3GroupsIdMembersUserId",
      "description": "Updates a member of a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the new member"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date string in the format YEAR-MONTH-DAY"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "getV3GroupsIdNotificationSettings",
      "title": "getV3GroupsIdNotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/NotificationSetting"
      }
    },
    {
      "id": "putV3GroupsIdNotificationSettings",
      "title": "putV3GroupsIdNotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME"
          },
          "level": {
            "type": "string",
            "description": "The group notification level"
          },
          "new_note": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "merge_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "failed_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "success_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/NotificationSetting"
      }
    },
    {
      "id": "getV3GroupsIdProjects",
      "title": "getV3GroupsIdProjects",
      "description": "Get a list of projects in this group.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "postV3GroupsIdProjectsProjectId",
      "title": "postV3GroupsIdProjectsProjectId",
      "description": "Transfer a project to the group namespace. Available only for admin.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a group"
          },
          "project_id": {
            "type": "string",
            "description": "The ID or path of the project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GroupDetail"
      }
    },
    {
      "id": "getV3Hooks",
      "title": "getV3Hooks",
      "description": "Get the list of system hooks",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/Hook"
      }
    },
    {
      "id": "postV3Hooks",
      "title": "postV3Hooks",
      "description": "Create a new system hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to send the request to"
          },
          "token": {
            "type": "string",
            "description": "The token used to validate payloads"
          },
          "push_events": {
            "type": "boolean",
            "description": "Trigger hook on push events"
          },
          "tag_push_events": {
            "type": "boolean",
            "description": "Trigger hook on tag push events"
          },
          "enable_ssl_verification": {
            "type": "boolean",
            "description": "Do SSL verification when triggering the hook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Hook"
      }
    },
    {
      "id": "deleteV3HooksId",
      "title": "deleteV3HooksId",
      "description": "Delete a hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the system hook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Hook"
      }
    },
    {
      "id": "getV3HooksId",
      "title": "getV3HooksId",
      "description": "Test a hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the system hook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Hook"
      }
    },
    {
      "id": "postV3InternalAllowed",
      "title": "postV3InternalAllowed",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3InternalBroadcastMessage",
      "title": "getV3InternalBroadcastMessage",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3InternalCheck",
      "title": "getV3InternalCheck",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3InternalDiscover",
      "title": "getV3InternalDiscover",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "postV3InternalLfsAuthenticate",
      "title": "postV3InternalLfsAuthenticate",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3InternalMergeRequestUrls",
      "title": "getV3InternalMergeRequestUrls",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "postV3InternalTwoFactorRecoveryCodes",
      "title": "postV3InternalTwoFactorRecoveryCodes",
      "description": "",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3Issues",
      "title": "getV3Issues",
      "description": "Get currently authenticated user's issues",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Return opened, closed, or all issues",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "milestone": {
            "type": "string",
            "description": "Return issues for a specific milestone"
          },
          "order_by": {
            "type": "string",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "getV3KeysId",
      "title": "getV3KeysId",
      "description": "Get single ssh key by id. Only available to admin users",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKeyWithUser"
      }
    },
    {
      "id": "getV3Licenses",
      "title": "getV3Licenses",
      "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "popular": {
            "type": "boolean",
            "description": "If passed, returns only popular licenses"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoLicense"
      }
    },
    {
      "id": "getV3LicensesName",
      "title": "getV3LicensesName",
      "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoLicense"
      }
    },
    {
      "id": "getV3Namespaces",
      "title": "getV3Namespaces",
      "description": "Get a namespaces list",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "search": {
            "type": "string",
            "description": "Search query for namespaces"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Namespace"
      }
    },
    {
      "id": "getV3NotificationSettings",
      "title": "getV3NotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/GlobalNotificationSetting"
      }
    },
    {
      "id": "putV3NotificationSettings",
      "title": "putV3NotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "The global notification level"
          },
          "notification_email": {
            "type": "string",
            "description": "The email address to send notifications"
          },
          "new_note": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "merge_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "failed_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "success_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/GlobalNotificationSetting"
      }
    },
    {
      "id": "getV3Projects",
      "title": "getV3Projects",
      "description": "Get a projects list for authenticated user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BasicProjectDetails"
      }
    },
    {
      "id": "postV3Projects",
      "title": "postV3Projects",
      "description": "Create new project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the project"
          },
          "path": {
            "type": "string",
            "description": "The path of the repository"
          },
          "description": {
            "type": "string",
            "description": "The description of the project"
          },
          "issues_enabled": {
            "type": "boolean",
            "description": "Flag indication if the issue tracker is enabled"
          },
          "merge_requests_enabled": {
            "type": "boolean",
            "description": "Flag indication if merge requests are enabled"
          },
          "wiki_enabled": {
            "type": "boolean",
            "description": "Flag indication if the wiki is enabled"
          },
          "builds_enabled": {
            "type": "boolean",
            "description": "Flag indication if builds are enabled"
          },
          "snippets_enabled": {
            "type": "boolean",
            "description": "Flag indication if snippets are enabled"
          },
          "shared_runners_enabled": {
            "type": "boolean",
            "description": "Flag indication if shared runners are enabled for that project"
          },
          "container_registry_enabled": {
            "type": "boolean",
            "description": "Flag indication if the container registry is enabled for that project"
          },
          "lfs_enabled": {
            "type": "boolean",
            "description": "Flag indication if Git LFS is enabled for that project"
          },
          "public": {
            "type": "boolean",
            "description": "Create a public project. The same as visibility_level = 20."
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "Create a public project. The same as visibility_level = 20.",
            "enum": [
              0,
              10,
              20
            ]
          },
          "public_builds": {
            "type": "boolean",
            "description": "Perform public builds"
          },
          "request_access_enabled": {
            "type": "boolean",
            "description": "Allow users to request member access"
          },
          "only_allow_merge_if_build_succeeds": {
            "type": "boolean",
            "description": "Only allow to merge if builds succeed"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean",
            "description": "Only allow to merge if all discussions are resolved"
          },
          "namespace_id": {
            "type": "integer",
            "format": "int32",
            "description": "Namespace ID for the new project. Default to the user namespace."
          },
          "import_url": {
            "type": "string",
            "description": "URL from which the project is imported"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "getV3ProjectsAll",
      "title": "getV3ProjectsAll",
      "description": "Get all projects for admin user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          },
          "statistics": {
            "type": "boolean",
            "description": "Include project statistics"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BasicProjectDetails"
      }
    },
    {
      "id": "postV3ProjectsForkId",
      "title": "postV3ProjectsForkId",
      "description": "Fork new project for the current user or provided namespace.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "namespace": {
            "type": "string",
            "description": "The ID or name of the namespace that the project will be forked into"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "getV3ProjectsOwned",
      "title": "getV3ProjectsOwned",
      "description": "Get an owned projects list for authenticated user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          },
          "statistics": {
            "type": "boolean",
            "description": "Include project statistics"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BasicProjectDetails"
      }
    },
    {
      "id": "getV3ProjectsSearchQuery",
      "title": "getV3ProjectsSearchQuery",
      "description": "Search for projects the current user has access to",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The project name to be searched"
          },
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "getV3ProjectsStarred",
      "title": "getV3ProjectsStarred",
      "description": "Gets starred project for the authenticated user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BasicProjectDetails"
      }
    },
    {
      "id": "postV3ProjectsUserUserId",
      "title": "postV3ProjectsUserUserId",
      "description": "Create new project for a specified user. Only available to admin users.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the project"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user"
          },
          "default_branch": {
            "type": "string",
            "description": "The default branch of the project"
          },
          "description": {
            "type": "string",
            "description": "The description of the project"
          },
          "issues_enabled": {
            "type": "boolean",
            "description": "Flag indication if the issue tracker is enabled"
          },
          "merge_requests_enabled": {
            "type": "boolean",
            "description": "Flag indication if merge requests are enabled"
          },
          "wiki_enabled": {
            "type": "boolean",
            "description": "Flag indication if the wiki is enabled"
          },
          "builds_enabled": {
            "type": "boolean",
            "description": "Flag indication if builds are enabled"
          },
          "snippets_enabled": {
            "type": "boolean",
            "description": "Flag indication if snippets are enabled"
          },
          "shared_runners_enabled": {
            "type": "boolean",
            "description": "Flag indication if shared runners are enabled for that project"
          },
          "container_registry_enabled": {
            "type": "boolean",
            "description": "Flag indication if the container registry is enabled for that project"
          },
          "lfs_enabled": {
            "type": "boolean",
            "description": "Flag indication if Git LFS is enabled for that project"
          },
          "public": {
            "type": "boolean",
            "description": "Create a public project. The same as visibility_level = 20."
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "Create a public project. The same as visibility_level = 20.",
            "enum": [
              0,
              10,
              20
            ]
          },
          "public_builds": {
            "type": "boolean",
            "description": "Perform public builds"
          },
          "request_access_enabled": {
            "type": "boolean",
            "description": "Allow users to request member access"
          },
          "only_allow_merge_if_build_succeeds": {
            "type": "boolean",
            "description": "Only allow to merge if builds succeed"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean",
            "description": "Only allow to merge if all discussions are resolved"
          },
          "namespace_id": {
            "type": "integer",
            "format": "int32",
            "description": "Namespace ID for the new project. Default to the user namespace."
          },
          "import_url": {
            "type": "string",
            "description": "URL from which the project is imported"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "getV3ProjectsVisible",
      "title": "getV3ProjectsVisible",
      "description": "Get a list of visible projects for authenticated user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "order_by": {
            "type": "string",
            "description": "Return projects ordered by field",
            "enum": [
              "id",
              "name",
              "path",
              "created_at",
              "updated_at",
              "last_activity_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return projects sorted in ascending and descending order",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Limit by archived status"
          },
          "visibility": {
            "type": "string",
            "description": "Limit by visibility",
            "enum": [
              "public",
              "internal",
              "private"
            ]
          },
          "search": {
            "type": "string",
            "description": "Return list of authorized projects matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "simple": {
            "type": "boolean",
            "description": "Return only the ID, URL, name, and path of each project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/BasicProjectDetails"
      }
    },
    {
      "id": "deleteV3ProjectsId",
      "title": "deleteV3ProjectsId",
      "description": "Remove a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsId",
      "title": "getV3ProjectsId",
      "description": "Get a single project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectWithAccess"
      }
    },
    {
      "id": "putV3ProjectsId",
      "title": "putV3ProjectsId",
      "description": "Update an existing project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "name": {
            "type": "string",
            "description": "The name of the project"
          },
          "default_branch": {
            "type": "string",
            "description": "The default branch of the project"
          },
          "path": {
            "type": "string",
            "description": "The path of the repository"
          },
          "description": {
            "type": "string",
            "description": "The description of the project"
          },
          "issues_enabled": {
            "type": "boolean",
            "description": "Flag indication if the issue tracker is enabled"
          },
          "merge_requests_enabled": {
            "type": "boolean",
            "description": "Flag indication if merge requests are enabled"
          },
          "wiki_enabled": {
            "type": "boolean",
            "description": "Flag indication if the wiki is enabled"
          },
          "builds_enabled": {
            "type": "boolean",
            "description": "Flag indication if builds are enabled"
          },
          "snippets_enabled": {
            "type": "boolean",
            "description": "Flag indication if snippets are enabled"
          },
          "shared_runners_enabled": {
            "type": "boolean",
            "description": "Flag indication if shared runners are enabled for that project"
          },
          "container_registry_enabled": {
            "type": "boolean",
            "description": "Flag indication if the container registry is enabled for that project"
          },
          "lfs_enabled": {
            "type": "boolean",
            "description": "Flag indication if Git LFS is enabled for that project"
          },
          "public": {
            "type": "boolean",
            "description": "Create a public project. The same as visibility_level = 20."
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "Create a public project. The same as visibility_level = 20.",
            "enum": [
              0,
              10,
              20
            ]
          },
          "public_builds": {
            "type": "boolean",
            "description": "Perform public builds"
          },
          "request_access_enabled": {
            "type": "boolean",
            "description": "Allow users to request member access"
          },
          "only_allow_merge_if_build_succeeds": {
            "type": "boolean",
            "description": "Only allow to merge if builds succeed"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean",
            "description": "Only allow to merge if all discussions are resolved"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "v3.projects.id._ref.ref._trigger.builds.post",
      "title": "v3.projects.id._ref.ref._trigger.builds.post",
      "description": "Trigger a GitLab project build",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "ref": {
            "type": "string",
            "description": "The commit sha or name of a branch or tag"
          },
          "token": {
            "type": "string",
            "description": "The unique token of trigger"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/TriggerRequest"
      }
    },
    {
      "id": "getV3ProjectsIdAccessRequests",
      "title": "getV3ProjectsIdAccessRequests",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AccessRequester"
      }
    },
    {
      "id": "postV3ProjectsIdAccessRequests",
      "title": "postV3ProjectsIdAccessRequests",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AccessRequester"
      }
    },
    {
      "id": "deleteV3ProjectsIdAccessRequestsUserId",
      "title": "deleteV3ProjectsIdAccessRequestsUserId",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the access requester"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdAccessRequestsUserIdApprove",
      "title": "putV3ProjectsIdAccessRequestsUserIdApprove",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the access requester"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level (defaults: `30`, developer access level)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "postV3ProjectsIdArchive",
      "title": "postV3ProjectsIdArchive",
      "description": "Archive a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "getV3ProjectsIdBoards",
      "title": "getV3ProjectsIdBoards",
      "description": "This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Board"
      }
    },
    {
      "id": "getV3ProjectsIdBoardsBoardIdLists",
      "title": "getV3ProjectsIdBoardsBoardIdLists",
      "description": "Does not include `backlog` and `done` lists. This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "board_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      }
    },
    {
      "id": "postV3ProjectsIdBoardsBoardIdLists",
      "title": "postV3ProjectsIdBoardsBoardIdLists",
      "description": "This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "board_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board"
          },
          "label_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an existing label"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      }
    },
    {
      "id": "deleteV3ProjectsIdBoardsBoardIdListsListId",
      "title": "deleteV3ProjectsIdBoardsBoardIdListsListId",
      "description": "This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "board_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board"
          },
          "list_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board list"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      }
    },
    {
      "id": "getV3ProjectsIdBoardsBoardIdListsListId",
      "title": "getV3ProjectsIdBoardsBoardIdListsListId",
      "description": "This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "board_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board"
          },
          "list_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a list"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      }
    },
    {
      "id": "putV3ProjectsIdBoardsBoardIdListsListId",
      "title": "putV3ProjectsIdBoardsBoardIdListsListId",
      "description": "This feature was introduced in 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "board_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a board"
          },
          "list_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a list"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position of the list"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/List"
      }
    },
    {
      "id": "getV3ProjectsIdBuilds",
      "title": "getV3ProjectsIdBuilds",
      "description": "Get a project builds",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "scope": {
            "type": "string",
            "description": "The scope of builds to show",
            "enum": [
              "pending",
              "running",
              "failed",
              "success",
              "canceled"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "getV3ProjectsIdBuildsArtifactsRefNameDownload",
      "title": "getV3ProjectsIdBuildsArtifactsRefNameDownload",
      "description": "This feature was introduced in GitLab 8.10",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "ref_name": {
            "type": "string",
            "description": "The ref from repository"
          },
          "job": {
            "type": "string",
            "description": "The name for the build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdBuildsBuildId",
      "title": "getV3ProjectsIdBuildsBuildId",
      "description": "Get a specific build of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "getV3ProjectsIdBuildsBuildIdArtifacts",
      "title": "getV3ProjectsIdBuildsBuildIdArtifacts",
      "description": "This feature was introduced in GitLab 8.5",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdBuildsBuildIdArtifactsKeep",
      "title": "postV3ProjectsIdBuildsBuildIdArtifactsKeep",
      "description": "Keep the artifacts to prevent them from being deleted",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "postV3ProjectsIdBuildsBuildIdCancel",
      "title": "postV3ProjectsIdBuildsBuildIdCancel",
      "description": "Cancel a specific build of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "postV3ProjectsIdBuildsBuildIdErase",
      "title": "postV3ProjectsIdBuildsBuildIdErase",
      "description": "Erase build (remove artifacts and build trace)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "postV3ProjectsIdBuildsBuildIdPlay",
      "title": "postV3ProjectsIdBuildsBuildIdPlay",
      "description": "This feature was added in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a Build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "postV3ProjectsIdBuildsBuildIdRetry",
      "title": "postV3ProjectsIdBuildsBuildIdRetry",
      "description": "Retry a specific build of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "getV3ProjectsIdBuildsBuildIdTrace",
      "title": "getV3ProjectsIdBuildsBuildIdTrace",
      "description": "Get a trace of a specific build of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "build_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a build"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdDeployKeys",
      "title": "getV3ProjectsIdDeployKeys",
      "description": "Get a specific project's deploy keys",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3ProjectsIdDeployKeys",
      "title": "postV3ProjectsIdDeployKeys",
      "description": "Add new deploy key to currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key": {
            "type": "string",
            "description": "The new deploy key"
          },
          "title": {
            "type": "string",
            "description": "The name of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3ProjectsIdDeployKeysKeyId",
      "title": "deleteV3ProjectsIdDeployKeysKeyId",
      "description": "Delete deploy key for a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "getV3ProjectsIdDeployKeysKeyId",
      "title": "getV3ProjectsIdDeployKeysKeyId",
      "description": "Get single deploy key",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3ProjectsIdDeployKeysKeyIdDisable",
      "title": "deleteV3ProjectsIdDeployKeysKeyIdDisable",
      "description": "This feature was added in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3ProjectsIdDeployKeysKeyIdEnable",
      "title": "postV3ProjectsIdDeployKeysKeyIdEnable",
      "description": "This feature was added in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "getV3ProjectsIdDeployments",
      "title": "getV3ProjectsIdDeployments",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Deployment"
      }
    },
    {
      "id": "getV3ProjectsIdDeploymentsDeploymentId",
      "title": "getV3ProjectsIdDeploymentsDeploymentId",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "deployment_id": {
            "type": "integer",
            "format": "int32",
            "description": "The deployment ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Deployment"
      }
    },
    {
      "id": "getV3ProjectsIdEnvironments",
      "title": "getV3ProjectsIdEnvironments",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Environment"
      }
    },
    {
      "id": "postV3ProjectsIdEnvironments",
      "title": "postV3ProjectsIdEnvironments",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the environment to be created"
          },
          "external_url": {
            "type": "string",
            "description": "URL on which this deployment is viewable"
          },
          "slug": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Environment"
      }
    },
    {
      "id": "deleteV3ProjectsIdEnvironmentsEnvironmentId",
      "title": "deleteV3ProjectsIdEnvironmentsEnvironmentId",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "environment_id": {
            "type": "integer",
            "format": "int32",
            "description": "The environment ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Environment"
      }
    },
    {
      "id": "putV3ProjectsIdEnvironmentsEnvironmentId",
      "title": "putV3ProjectsIdEnvironmentsEnvironmentId",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "environment_id": {
            "type": "integer",
            "format": "int32",
            "description": "The environment ID"
          },
          "name": {
            "type": "string",
            "description": "The new environment name"
          },
          "external_url": {
            "type": "string",
            "description": "The new URL on which this deployment is viewable"
          },
          "slug": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Environment"
      }
    },
    {
      "id": "getV3ProjectsIdEvents",
      "title": "getV3ProjectsIdEvents",
      "description": "Get events for a single project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Event"
      }
    },
    {
      "id": "deleteV3ProjectsIdFork",
      "title": "deleteV3ProjectsIdFork",
      "description": "Remove a forked_from relationship",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdForkForkedFromId",
      "title": "postV3ProjectsIdForkForkedFromId",
      "description": "Mark this project as forked from another",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "forked_from_id": {
            "type": "string",
            "description": "The ID of the project it was forked from"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdHooks",
      "title": "getV3ProjectsIdHooks",
      "description": "Get project hooks",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHook"
      }
    },
    {
      "id": "postV3ProjectsIdHooks",
      "title": "postV3ProjectsIdHooks",
      "description": "Add hook to project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "url": {
            "type": "string",
            "description": "The URL to send the request to"
          },
          "push_events": {
            "type": "boolean",
            "description": "Trigger hook on push events"
          },
          "issues_events": {
            "type": "boolean",
            "description": "Trigger hook on issues events"
          },
          "merge_requests_events": {
            "type": "boolean",
            "description": "Trigger hook on merge request events"
          },
          "tag_push_events": {
            "type": "boolean",
            "description": "Trigger hook on tag push events"
          },
          "note_events": {
            "type": "boolean",
            "description": "Trigger hook on note(comment) events"
          },
          "build_events": {
            "type": "boolean",
            "description": "Trigger hook on build events"
          },
          "pipeline_events": {
            "type": "boolean",
            "description": "Trigger hook on pipeline events"
          },
          "wiki_page_events": {
            "type": "boolean",
            "description": "Trigger hook on wiki events"
          },
          "enable_ssl_verification": {
            "type": "boolean",
            "description": "Do SSL verification when triggering the hook"
          },
          "token": {
            "type": "string",
            "description": "Secret token to validate received payloads; this will not be returned in the response"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHook"
      }
    },
    {
      "id": "deleteV3ProjectsIdHooksHookId",
      "title": "deleteV3ProjectsIdHooksHookId",
      "description": "Deletes project hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "hook_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the hook to delete"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHook"
      }
    },
    {
      "id": "getV3ProjectsIdHooksHookId",
      "title": "getV3ProjectsIdHooksHookId",
      "description": "Get a project hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "hook_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project hook"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHook"
      }
    },
    {
      "id": "putV3ProjectsIdHooksHookId",
      "title": "putV3ProjectsIdHooksHookId",
      "description": "Update an existing project hook",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "hook_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the hook to update"
          },
          "url": {
            "type": "string",
            "description": "The URL to send the request to"
          },
          "push_events": {
            "type": "boolean",
            "description": "Trigger hook on push events"
          },
          "issues_events": {
            "type": "boolean",
            "description": "Trigger hook on issues events"
          },
          "merge_requests_events": {
            "type": "boolean",
            "description": "Trigger hook on merge request events"
          },
          "tag_push_events": {
            "type": "boolean",
            "description": "Trigger hook on tag push events"
          },
          "note_events": {
            "type": "boolean",
            "description": "Trigger hook on note(comment) events"
          },
          "build_events": {
            "type": "boolean",
            "description": "Trigger hook on build events"
          },
          "pipeline_events": {
            "type": "boolean",
            "description": "Trigger hook on pipeline events"
          },
          "wiki_page_events": {
            "type": "boolean",
            "description": "Trigger hook on wiki events"
          },
          "enable_ssl_verification": {
            "type": "boolean",
            "description": "Do SSL verification when triggering the hook"
          },
          "token": {
            "type": "string",
            "description": "Secret token to validate received payloads; this will not be returned in the response"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectHook"
      }
    },
    {
      "id": "getV3ProjectsIdIssues",
      "title": "getV3ProjectsIdIssues",
      "description": "Get a list of project issues",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "state": {
            "type": "string",
            "description": "Return opened, closed, or all issues",
            "enum": [
              "opened",
              "closed",
              "all"
            ]
          },
          "iid": {
            "type": "integer",
            "format": "int32",
            "description": "Return the issue having the given `iid`"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "milestone": {
            "type": "string",
            "description": "Return issues for a specific milestone"
          },
          "order_by": {
            "type": "string",
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return issues sorted in `asc` or `desc` order.",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "postV3ProjectsIdIssues",
      "title": "postV3ProjectsIdIssues",
      "description": "Create a new project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of an issue"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the issue was created. Available only for admins and project owners."
          },
          "merge_request_for_resolving_discussions": {
            "type": "integer",
            "format": "int32",
            "description": "The IID of a merge request for which to resolve discussions"
          },
          "description": {
            "type": "string",
            "description": "The description of an issue"
          },
          "assignee_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user to assign issue"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a milestone to assign issue"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "due_date": {
            "type": "string",
            "description": "Date time string in the format YEAR-MONTH-DAY"
          },
          "confidential": {
            "type": "boolean",
            "description": "Boolean parameter if the issue should be confidential"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "deleteV3ProjectsIdIssuesIssueId",
      "title": "deleteV3ProjectsIdIssuesIssueId",
      "description": "Delete a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdIssuesIssueId",
      "title": "getV3ProjectsIdIssuesIssueId",
      "description": "Get a single project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "putV3ProjectsIdIssuesIssueId",
      "title": "putV3ProjectsIdIssuesIssueId",
      "description": "Update an existing issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          },
          "title": {
            "type": "string",
            "description": "The title of an issue"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when the issue was updated. Available only for admins and project owners."
          },
          "state_event": {
            "type": "string",
            "description": "State of the issue",
            "enum": [
              "reopen",
              "close"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of an issue"
          },
          "assignee_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user to assign issue"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a milestone to assign issue"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "due_date": {
            "type": "string",
            "description": "Date time string in the format YEAR-MONTH-DAY"
          },
          "confidential": {
            "type": "boolean",
            "description": "Boolean parameter if the issue should be confidential"
          },
          "created_at": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
      "title": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
      "description": "Add spent time for a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          },
          "duration": {
            "type": "string",
            "description": "The duration to be parsed"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdIssuesIssueIdAwardEmoji",
      "title": "getV3ProjectsIdIssuesIssueIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an Issue, Merge Request or Snippet"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdAwardEmoji",
      "title": "postV3ProjectsIdIssuesIssueIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdMove",
      "title": "postV3ProjectsIdIssuesIssueIdMove",
      "description": "Move an existing issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          },
          "to_project_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the new project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
      "title": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
      "title": "postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdResetSpentTime",
      "title": "postV3ProjectsIdIssuesIssueIdResetSpentTime",
      "description": "Reset spent time for a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdResetTimeEstimate",
      "title": "postV3ProjectsIdIssuesIssueIdResetTimeEstimate",
      "description": "Reset the time estimate for a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdTimeEstimate",
      "title": "postV3ProjectsIdIssuesIssueIdTimeEstimate",
      "description": "Set a time estimate for a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          },
          "duration": {
            "type": "string",
            "description": "The duration to be parsed"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdIssuesIssueIdTimeStats",
      "title": "getV3ProjectsIdIssuesIssueIdTimeStats",
      "description": "Show time stats for a project issue",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project issue"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdIssuesIssueIdTodo",
      "title": "postV3ProjectsIdIssuesIssueIdTodo",
      "description": "Create a todo on an issuable",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "issue_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an issuable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Todo"
      }
    },
    {
      "id": "getV3ProjectsIdIssuesNoteableIdNotes",
      "title": "getV3ProjectsIdIssuesNoteableIdNotes",
      "description": "Get a list of project +noteable+ notes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesNoteableIdNotes",
      "title": "postV3ProjectsIdIssuesNoteableIdNotes",
      "description": "Create a new +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of the note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "title": "deleteV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "description": "Delete a +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "getV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "title": "getV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "description": "Get a single +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "putV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "title": "putV3ProjectsIdIssuesNoteableIdNotesNoteId",
      "description": "Update an existing +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdIssuesSubscribableIdSubscription",
      "title": "deleteV3ProjectsIdIssuesSubscribableIdSubscription",
      "description": "Unsubscribe from a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "postV3ProjectsIdIssuesSubscribableIdSubscription",
      "title": "postV3ProjectsIdIssuesSubscribableIdSubscription",
      "description": "Subscribe to a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "getV3ProjectsIdKeys",
      "title": "getV3ProjectsIdKeys",
      "description": "Get a specific project's deploy keys",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3ProjectsIdKeys",
      "title": "postV3ProjectsIdKeys",
      "description": "Add new deploy key to currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key": {
            "type": "string",
            "description": "The new deploy key"
          },
          "title": {
            "type": "string",
            "description": "The name of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3ProjectsIdKeysKeyId",
      "title": "deleteV3ProjectsIdKeysKeyId",
      "description": "Delete deploy key for a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "getV3ProjectsIdKeysKeyId",
      "title": "getV3ProjectsIdKeysKeyId",
      "description": "Get single deploy key",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3ProjectsIdKeysKeyIdDisable",
      "title": "deleteV3ProjectsIdKeysKeyIdDisable",
      "description": "This feature was added in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3ProjectsIdKeysKeyIdEnable",
      "title": "postV3ProjectsIdKeysKeyIdEnable",
      "description": "This feature was added in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the project"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the deploy key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3ProjectsIdLabels",
      "title": "deleteV3ProjectsIdLabels",
      "description": "Delete an existing label",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "name": {
            "type": "string",
            "description": "The name of the label to be deleted"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "getV3ProjectsIdLabels",
      "title": "getV3ProjectsIdLabels",
      "description": "Get all labels of the project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "postV3ProjectsIdLabels",
      "title": "postV3ProjectsIdLabels",
      "description": "Create a new label",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "name": {
            "type": "string",
            "description": "The name of the label to be created"
          },
          "color": {
            "type": "string",
            "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)"
          },
          "description": {
            "type": "string",
            "description": "The description of label to be created"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "description": "The priority of the label"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "putV3ProjectsIdLabels",
      "title": "putV3ProjectsIdLabels",
      "description": "Update an existing label. At least one optional parameter is required.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "name": {
            "type": "string",
            "description": "The name of the label to be updated"
          },
          "new_name": {
            "type": "string",
            "description": "The new name of the label"
          },
          "color": {
            "type": "string",
            "description": "The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)"
          },
          "description": {
            "type": "string",
            "description": "The new description of label"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "description": "The priority of the label"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "deleteV3ProjectsIdLabelsSubscribableIdSubscription",
      "title": "deleteV3ProjectsIdLabelsSubscribableIdSubscription",
      "description": "Unsubscribe from a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "postV3ProjectsIdLabelsSubscribableIdSubscription",
      "title": "postV3ProjectsIdLabelsSubscribableIdSubscription",
      "description": "Subscribe to a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Label"
      }
    },
    {
      "id": "getV3ProjectsIdMembers",
      "title": "getV3ProjectsIdMembers",
      "description": "Gets a list of group or project members viewable by the authenticated user.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "query": {
            "type": "string",
            "description": "A query string to search for members"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "postV3ProjectsIdMembers",
      "title": "postV3ProjectsIdMembers",
      "description": "Adds a member to a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the new member"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level (defaults: `30`, developer access level)"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date string in the format YEAR-MONTH-DAY"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "deleteV3ProjectsIdMembersUserId",
      "title": "deleteV3ProjectsIdMembersUserId",
      "description": "Removes a user from a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the member"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdMembersUserId",
      "title": "getV3ProjectsIdMembersUserId",
      "description": "Gets a member of a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the member"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "putV3ProjectsIdMembersUserId",
      "title": "putV3ProjectsIdMembersUserId",
      "description": "Updates a member of a group or project.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "The user ID of the new member"
          },
          "access_level": {
            "type": "integer",
            "format": "int32",
            "description": "A valid access level"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date string in the format YEAR-MONTH-DAY"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Member"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestMergeRequestId",
      "title": "getV3ProjectsIdMergeRequestMergeRequestId",
      "description": "This endpoint is deprecated and will be removed in GitLab 9.0.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a merge request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "putV3ProjectsIdMergeRequestMergeRequestId",
      "title": "putV3ProjectsIdMergeRequestMergeRequestId",
      "description": "Update a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of the merge request"
          },
          "target_branch": {
            "type": "string",
            "description": "The target branch"
          },
          "state_event": {
            "type": "string",
            "description": "Status of the merge request",
            "enum": [
              "close",
              "reopen",
              "merge"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the merge request"
          },
          "assignee_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user to assign the merge request"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a milestone to assign the merge request"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "remove_source_branch": {
            "type": "boolean",
            "description": "Remove source branch when merging"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds",
      "title": "postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds",
      "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestMergeRequestIdChanges",
      "title": "getV3ProjectsIdMergeRequestMergeRequestIdChanges",
      "description": "Show the merge request changes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequestChanges"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues",
      "title": "getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues",
      "description": "List issues that will be closed on merge",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestMergeRequestIdComments",
      "title": "getV3ProjectsIdMergeRequestMergeRequestIdComments",
      "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestMergeRequestIdComments",
      "title": "postV3ProjectsIdMergeRequestMergeRequestIdComments",
      "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "note": {
            "type": "string",
            "description": "The text of the comment"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestMergeRequestIdCommits",
      "title": "getV3ProjectsIdMergeRequestMergeRequestIdCommits",
      "description": "Get the commits of a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommit"
      }
    },
    {
      "id": "putV3ProjectsIdMergeRequestMergeRequestIdMerge",
      "title": "putV3ProjectsIdMergeRequestMergeRequestIdMerge",
      "description": "Merge a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_commit_message": {
            "type": "string",
            "description": "Custom merge commit message"
          },
          "should_remove_source_branch": {
            "type": "boolean",
            "description": "When true, the source branch will be deleted if possible"
          },
          "merge_when_build_succeeds": {
            "type": "boolean",
            "description": "When true, this merge request will be merged when the pipeline succeeds"
          },
          "sha": {
            "type": "string",
            "description": "When present, must have the HEAD SHA of the source branch"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestSubscribableIdSubscription",
      "title": "deleteV3ProjectsIdMergeRequestSubscribableIdSubscription",
      "description": "Unsubscribe from a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestSubscribableIdSubscription",
      "title": "postV3ProjectsIdMergeRequestSubscribableIdSubscription",
      "description": "Subscribe to a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequests",
      "title": "getV3ProjectsIdMergeRequests",
      "description": "List merge requests",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "state": {
            "type": "string",
            "description": "Return opened, closed, merged, or all merge requests",
            "enum": [
              "opened",
              "closed",
              "merged",
              "all"
            ]
          },
          "order_by": {
            "type": "string",
            "description": "Return merge requests ordered by `created_at` or `updated_at` fields.",
            "enum": [
              "created_at",
              "updated_at"
            ]
          },
          "sort": {
            "type": "string",
            "description": "Return merge requests sorted in `asc` or `desc` order.",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "iid": {
            "type": "array",
            "description": "The IID of the merge requests"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequests",
      "title": "postV3ProjectsIdMergeRequests",
      "description": "Create a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of the merge request"
          },
          "source_branch": {
            "type": "string",
            "description": "The source branch"
          },
          "target_branch": {
            "type": "string",
            "description": "The target branch"
          },
          "target_project_id": {
            "type": "integer",
            "format": "int32",
            "description": "The target project of the merge request defaults to the :id of the project"
          },
          "description": {
            "type": "string",
            "description": "The description of the merge request"
          },
          "assignee_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user to assign the merge request"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a milestone to assign the merge request"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "remove_source_branch": {
            "type": "boolean",
            "description": "Remove source branch when merging"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestsMergeRequestId",
      "title": "deleteV3ProjectsIdMergeRequestsMergeRequestId",
      "description": "Delete a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a merge request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestId",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestId",
      "description": "Get a single merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "putV3ProjectsIdMergeRequestsMergeRequestId",
      "title": "putV3ProjectsIdMergeRequestsMergeRequestId",
      "description": "Update a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of the merge request"
          },
          "target_branch": {
            "type": "string",
            "description": "The target branch"
          },
          "state_event": {
            "type": "string",
            "description": "Status of the merge request",
            "enum": [
              "close",
              "reopen",
              "merge"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the merge request"
          },
          "assignee_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a user to assign the merge request"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a milestone to assign the merge request"
          },
          "labels": {
            "type": "string",
            "description": "Comma-separated list of label names"
          },
          "remove_source_branch": {
            "type": "boolean",
            "description": "Remove source branch when merging"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime",
      "description": "Add spent time for a project merge_request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project merge_request"
          },
          "duration": {
            "type": "string",
            "description": "The duration to be parsed"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an Issue, Merge Request or Snippet"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds",
      "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdChanges",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdChanges",
      "description": "Show the merge request changes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequestChanges"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues",
      "description": "List issues that will be closed on merge",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdComments",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdComments",
      "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdComments",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdComments",
      "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "note": {
            "type": "string",
            "description": "The text of the comment"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MRNote"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdCommits",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdCommits",
      "description": "Get the commits of a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommit"
      }
    },
    {
      "id": "putV3ProjectsIdMergeRequestsMergeRequestIdMerge",
      "title": "putV3ProjectsIdMergeRequestsMergeRequestIdMerge",
      "description": "Merge a merge request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_commit_message": {
            "type": "string",
            "description": "Custom merge commit message"
          },
          "should_remove_source_branch": {
            "type": "boolean",
            "description": "When true, the source branch will be deleted if possible"
          },
          "merge_when_build_succeeds": {
            "type": "boolean",
            "description": "When true, this merge request will be merged when the pipeline succeeds"
          },
          "sha": {
            "type": "string",
            "description": "When present, must have the HEAD SHA of the source branch"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime",
      "description": "Reset spent time for a project merge_request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project merge_request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate",
      "description": "Reset the time estimate for a project merge_request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project merge_request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate",
      "description": "Set a time estimate for a project merge_request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project merge_request"
          },
          "duration": {
            "type": "string",
            "description": "The duration to be parsed"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats",
      "description": "Show time stats for a project merge_request",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project merge_request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdMergeRequestsMergeRequestIdTodo",
      "title": "postV3ProjectsIdMergeRequestsMergeRequestIdTodo",
      "description": "Create a todo on an issuable",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an issuable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Todo"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdVersions",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdVersions",
      "description": "This feature was introduced in GitLab 8.12.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a merge request"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequestDiff"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId",
      "title": "getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId",
      "description": "This feature was introduced in GitLab 8.12.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "merge_request_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a merge request"
          },
          "version_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a merge request diff version"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequestDiffFull"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsNoteableIdNotes",
      "title": "getV3ProjectsIdMergeRequestsNoteableIdNotes",
      "description": "Get a list of project +noteable+ notes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsNoteableIdNotes",
      "title": "postV3ProjectsIdMergeRequestsNoteableIdNotes",
      "description": "Create a new +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of the note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "title": "deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "description": "Delete a +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "title": "getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "description": "Get a single +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "title": "putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
      "description": "Update an existing +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription",
      "title": "deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription",
      "description": "Unsubscribe from a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "postV3ProjectsIdMergeRequestsSubscribableIdSubscription",
      "title": "postV3ProjectsIdMergeRequestsSubscribableIdSubscription",
      "description": "Subscribe to a resource",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "subscribable_id": {
            "type": "string",
            "description": "The ID of a resource"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/MergeRequest"
      }
    },
    {
      "id": "getV3ProjectsIdMilestones",
      "title": "getV3ProjectsIdMilestones",
      "description": "Get a list of project milestones",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "state": {
            "type": "string",
            "description": "Return \"active\", \"closed\", or \"all\" milestones",
            "enum": [
              "active",
              "closed",
              "all"
            ]
          },
          "iid": {
            "type": "array",
            "description": "The IID of the milestone"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Milestone"
      }
    },
    {
      "id": "postV3ProjectsIdMilestones",
      "title": "postV3ProjectsIdMilestones",
      "description": "Create a new project milestone",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of the milestone"
          },
          "description": {
            "type": "string",
            "description": "The description of the milestone"
          },
          "due_date": {
            "type": "string",
            "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)"
          },
          "start_date": {
            "type": "string",
            "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Milestone"
      }
    },
    {
      "id": "getV3ProjectsIdMilestonesMilestoneId",
      "title": "getV3ProjectsIdMilestonesMilestoneId",
      "description": "Get a single project milestone",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project milestone"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Milestone"
      }
    },
    {
      "id": "putV3ProjectsIdMilestonesMilestoneId",
      "title": "putV3ProjectsIdMilestonesMilestoneId",
      "description": "Update an existing project milestone",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project milestone"
          },
          "title": {
            "type": "string",
            "description": "The title of the milestone"
          },
          "state_event": {
            "type": "string",
            "description": "The state event of the milestone ",
            "enum": [
              "close",
              "activate"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the milestone"
          },
          "due_date": {
            "type": "string",
            "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)"
          },
          "start_date": {
            "type": "string",
            "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Milestone"
      }
    },
    {
      "id": "getV3ProjectsIdMilestonesMilestoneIdIssues",
      "title": "getV3ProjectsIdMilestonesMilestoneIdIssues",
      "description": "Get all issues for a single project milestone",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "milestone_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project milestone"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Issue"
      }
    },
    {
      "id": "getV3ProjectsIdNotificationSettings",
      "title": "getV3ProjectsIdNotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/NotificationSetting"
      }
    },
    {
      "id": "putV3ProjectsIdNotificationSettings",
      "title": "putV3ProjectsIdNotificationSettings",
      "description": "This feature was introduced in GitLab 8.12",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME"
          },
          "level": {
            "type": "string",
            "description": "The project notification level"
          },
          "new_note": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_issue": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "new_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reopen_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "close_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "reassign_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "merge_merge_request": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "failed_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          },
          "success_pipeline": {
            "type": "boolean",
            "description": "Enable/disable this notification"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/NotificationSetting"
      }
    },
    {
      "id": "postV3ProjectsIdPipeline",
      "title": "postV3ProjectsIdPipeline",
      "description": "This feature was introduced in GitLab 8.14",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "ref": {
            "type": "string",
            "description": "Reference"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Pipeline"
      }
    },
    {
      "id": "getV3ProjectsIdPipelines",
      "title": "getV3ProjectsIdPipelines",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "scope": {
            "type": "string",
            "description": "Either running, branches, or tags",
            "enum": [
              "running",
              "branches",
              "tags"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Pipeline"
      }
    },
    {
      "id": "getV3ProjectsIdPipelinesPipelineId",
      "title": "getV3ProjectsIdPipelinesPipelineId",
      "description": "This feature was introduced in GitLab 8.11",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "pipeline_id": {
            "type": "integer",
            "format": "int32",
            "description": "The pipeline ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Pipeline"
      }
    },
    {
      "id": "postV3ProjectsIdPipelinesPipelineIdCancel",
      "title": "postV3ProjectsIdPipelinesPipelineIdCancel",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "pipeline_id": {
            "type": "integer",
            "format": "int32",
            "description": "The pipeline ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Pipeline"
      }
    },
    {
      "id": "postV3ProjectsIdPipelinesPipelineIdRetry",
      "title": "postV3ProjectsIdPipelinesPipelineIdRetry",
      "description": "This feature was introduced in GitLab 8.11.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "pipeline_id": {
            "type": "integer",
            "format": "int32",
            "description": "The pipeline ID"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Pipeline"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryArchive",
      "title": "getV3ProjectsIdRepositoryArchive",
      "description": "Get an archive of the repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit sha of the archive to be downloaded"
          },
          "format": {
            "type": "string",
            "description": "The archive format"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryBlobsSha",
      "title": "getV3ProjectsIdRepositoryBlobsSha",
      "description": "Get a raw file contents",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit, branch name, or tag name"
          },
          "filepath": {
            "type": "string",
            "description": "The path to the file to display"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryBranches",
      "title": "getV3ProjectsIdRepositoryBranches",
      "description": "Get a project repository branches",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoBranch"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryBranches",
      "title": "postV3ProjectsIdRepositoryBranches",
      "description": "Create branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch_name": {
            "type": "string",
            "description": "The name of the branch"
          },
          "ref": {
            "type": "string",
            "description": "Create branch from commit sha or existing branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoBranch"
      }
    },
    {
      "id": "deleteV3ProjectsIdRepositoryBranchesBranch",
      "title": "deleteV3ProjectsIdRepositoryBranchesBranch",
      "description": "Delete a branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryBranchesBranch",
      "title": "getV3ProjectsIdRepositoryBranchesBranch",
      "description": "Get a single branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoBranch"
      }
    },
    {
      "id": "putV3ProjectsIdRepositoryBranchesBranchProtect",
      "title": "putV3ProjectsIdRepositoryBranchesBranchProtect",
      "description": "Protect a single branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch"
          },
          "developers_can_push": {
            "type": "boolean",
            "description": "Flag if developers can push to that branch"
          },
          "developers_can_merge": {
            "type": "boolean",
            "description": "Flag if developers can merge to that branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoBranch"
      }
    },
    {
      "id": "putV3ProjectsIdRepositoryBranchesBranchUnprotect",
      "title": "putV3ProjectsIdRepositoryBranchesBranchUnprotect",
      "description": "Unprotect a single branch",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoBranch"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCommits",
      "title": "getV3ProjectsIdRepositoryCommits",
      "description": "Get a project repository commits",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "ref_name": {
            "type": "string",
            "description": "The name of a repository branch or tag, if not given the default branch is used"
          },
          "since": {
            "type": "string",
            "description": "Only commits after or in this date will be returned"
          },
          "until": {
            "type": "string",
            "description": "Only commits before or in this date will be returned"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "The page for pagination"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "The number of results per page"
          },
          "path": {
            "type": "string",
            "description": "The file path"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommit"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryCommits",
      "title": "postV3ProjectsIdRepositoryCommits",
      "description": "This feature was introduced in GitLab 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "branch_name": {
            "type": "string",
            "description": "The name of branch"
          },
          "commit_message": {
            "type": "string",
            "description": "Commit message"
          },
          "actions": {
            "type": "array",
            "description": "Actions to perform in commit"
          },
          "author_email": {
            "type": "string",
            "description": "Author email for commit"
          },
          "author_name": {
            "type": "string",
            "description": "Author name for commit"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommitDetail"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsSha",
      "title": "getV3ProjectsIdRepositoryCommitsSha",
      "description": "Get a specific commit of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "A commit sha, or the name of a branch or tag"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommitDetail"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsShaBlob",
      "title": "getV3ProjectsIdRepositoryCommitsShaBlob",
      "description": "Get a raw file contents",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit, branch name, or tag name"
          },
          "filepath": {
            "type": "string",
            "description": "The path to the file to display"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsShaBuilds",
      "title": "getV3ProjectsIdRepositoryCommitsShaBuilds",
      "description": "Get builds for a specific commit of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The SHA id of a commit"
          },
          "scope": {
            "type": "string",
            "description": "The scope of builds to show",
            "enum": [
              "pending",
              "running",
              "failed",
              "success",
              "canceled"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Build"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryCommitsShaCherryPick",
      "title": "postV3ProjectsIdRepositoryCommitsShaCherryPick",
      "description": "This feature was introduced in GitLab 8.15",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "A commit sha to be cherry picked"
          },
          "branch": {
            "type": "string",
            "description": "The name of the branch"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoCommit"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsShaComments",
      "title": "getV3ProjectsIdRepositoryCommitsShaComments",
      "description": "Get a commit's comments",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "sha": {
            "type": "string",
            "description": "A commit sha, or the name of a branch or tag"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CommitNote"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryCommitsShaComments",
      "title": "postV3ProjectsIdRepositoryCommitsShaComments",
      "description": "Post comment to commit",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit's SHA"
          },
          "note": {
            "type": "string",
            "description": "The text of the comment"
          },
          "path": {
            "type": "string",
            "description": "The file path"
          },
          "line": {
            "type": "integer",
            "format": "int32",
            "description": "The line number"
          },
          "line_type": {
            "type": "string",
            "description": "The type of the line",
            "enum": [
              "new",
              "old"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CommitNote"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsShaDiff",
      "title": "getV3ProjectsIdRepositoryCommitsShaDiff",
      "description": "Get the diff for a specific commit of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "A commit sha, or the name of a branch or tag"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryCommitsShaStatuses",
      "title": "getV3ProjectsIdRepositoryCommitsShaStatuses",
      "description": "Get a commit's statuses",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit hash"
          },
          "ref": {
            "type": "string",
            "description": "The ref"
          },
          "stage": {
            "type": "string",
            "description": "The stage"
          },
          "name": {
            "type": "string",
            "description": "The name"
          },
          "all": {
            "type": "string",
            "description": "Show all statuses, default: false"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CommitStatus"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryCompare",
      "title": "getV3ProjectsIdRepositoryCompare",
      "description": "Compare two branches, tags, or commits",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "from": {
            "type": "string",
            "description": "The commit, branch name, or tag name to start comparison"
          },
          "to": {
            "type": "string",
            "description": "The commit, branch name, or tag name to stop comparison"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Compare"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryContributors",
      "title": "getV3ProjectsIdRepositoryContributors",
      "description": "Get repository contributors",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Contributor"
      }
    },
    {
      "id": "deleteV3ProjectsIdRepositoryFiles",
      "title": "deleteV3ProjectsIdRepositoryFiles",
      "description": "Delete an existing file in repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "file_path": {
            "type": "string",
            "description": "The path to new file. Ex. lib/class.rb"
          },
          "branch_name": {
            "type": "string",
            "description": "The name of branch"
          },
          "commit_message": {
            "type": "string",
            "description": "Commit Message"
          },
          "author_email": {
            "type": "string",
            "description": "The email of the author"
          },
          "author_name": {
            "type": "string",
            "description": "The name of the author"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryFiles",
      "title": "getV3ProjectsIdRepositoryFiles",
      "description": "Get a file from repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "file_path": {
            "type": "string",
            "description": "The path to the file. Ex. lib/class.rb"
          },
          "ref": {
            "type": "string",
            "description": "The name of branch, tag, or commit"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdRepositoryFiles",
      "title": "postV3ProjectsIdRepositoryFiles",
      "description": "Create new file in repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "file_path": {
            "type": "string",
            "description": "The path to new file. Ex. lib/class.rb"
          },
          "branch_name": {
            "type": "string",
            "description": "The name of branch"
          },
          "commit_message": {
            "type": "string",
            "description": "Commit Message"
          },
          "author_email": {
            "type": "string",
            "description": "The email of the author"
          },
          "author_name": {
            "type": "string",
            "description": "The name of the author"
          },
          "content": {
            "type": "string",
            "description": "File content"
          },
          "encoding": {
            "type": "string",
            "description": "File encoding",
            "enum": [
              "base64"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdRepositoryFiles",
      "title": "putV3ProjectsIdRepositoryFiles",
      "description": "Update existing file in repository",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The project ID"
          },
          "file_path": {
            "type": "string",
            "description": "The path to new file. Ex. lib/class.rb"
          },
          "branch_name": {
            "type": "string",
            "description": "The name of branch"
          },
          "commit_message": {
            "type": "string",
            "description": "Commit Message"
          },
          "author_email": {
            "type": "string",
            "description": "The email of the author"
          },
          "author_name": {
            "type": "string",
            "description": "The name of the author"
          },
          "content": {
            "type": "string",
            "description": "File content"
          },
          "encoding": {
            "type": "string",
            "description": "File encoding",
            "enum": [
              "base64"
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "deleteV3ProjectsIdRepositoryMergedBranches",
      "title": "deleteV3ProjectsIdRepositoryMergedBranches",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryRawBlobsSha",
      "title": "getV3ProjectsIdRepositoryRawBlobsSha",
      "description": "Get a raw blob contents by blob sha",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit, branch name, or tag name"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryTags",
      "title": "getV3ProjectsIdRepositoryTags",
      "description": "Get a project repository tags",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoTag"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryTags",
      "title": "postV3ProjectsIdRepositoryTags",
      "description": "Create a new repository tag",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          },
          "ref": {
            "type": "string",
            "description": "The commit sha or branch name"
          },
          "message": {
            "type": "string",
            "description": "Specifying a message creates an annotated tag"
          },
          "release_description": {
            "type": "string",
            "description": "Specifying release notes stored in the GitLab database"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoTag"
      }
    },
    {
      "id": "deleteV3ProjectsIdRepositoryTagsTagName",
      "title": "deleteV3ProjectsIdRepositoryTagsTagName",
      "description": "Delete a repository tag",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdRepositoryTagsTagName",
      "title": "getV3ProjectsIdRepositoryTagsTagName",
      "description": "Get a single repository tag",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoTag"
      }
    },
    {
      "id": "postV3ProjectsIdRepositoryTagsTagNameRelease",
      "title": "postV3ProjectsIdRepositoryTagsTagNameRelease",
      "description": "Add a release note to a tag",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "description": "Release notes with markdown support"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Release"
      }
    },
    {
      "id": "putV3ProjectsIdRepositoryTagsTagNameRelease",
      "title": "putV3ProjectsIdRepositoryTagsTagNameRelease",
      "description": "Update a tag's release note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "description": "Release notes with markdown support"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Release"
      }
    },
    {
      "id": "getV3ProjectsIdRepositoryTree",
      "title": "getV3ProjectsIdRepositoryTree",
      "description": "Get a project repository tree",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "ref_name": {
            "type": "string",
            "description": "The name of a repository branch or tag, if not given the default branch is used"
          },
          "path": {
            "type": "string",
            "description": "The path of the tree"
          },
          "recursive": {
            "type": "boolean",
            "description": "Used to get a recursive tree"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoTreeObject"
      }
    },
    {
      "id": "getV3ProjectsIdRunners",
      "title": "getV3ProjectsIdRunners",
      "description": "Get runners available for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "scope": {
            "type": "string",
            "description": "The scope of specific runners to show",
            "enum": [
              "active",
              "paused",
              "online",
              "specific",
              "shared"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "postV3ProjectsIdRunners",
      "title": "postV3ProjectsIdRunners",
      "description": "Enable a runner for a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "runner_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the runner"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "deleteV3ProjectsIdRunnersRunnerId",
      "title": "deleteV3ProjectsIdRunnersRunnerId",
      "description": "Disable project's runner",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "runner_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the runner"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "putV3ProjectsIdServicesAsana",
      "title": "putV3ProjectsIdServicesAsana",
      "description": "Set asana service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "description": "User API token"
          },
          "restrict_to_branch": {
            "type": "string",
            "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesAssembla",
      "title": "putV3ProjectsIdServicesAssembla",
      "description": "Set assembla service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The authentication token"
          },
          "subdomain": {
            "type": "string",
            "description": "Subdomain setting"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesBamboo",
      "title": "putV3ProjectsIdServicesBamboo",
      "description": "Set bamboo service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "bamboo_url": {
            "type": "string",
            "description": "Bamboo root URL like https://bamboo.example.com"
          },
          "build_key": {
            "type": "string",
            "description": "Bamboo build plan key like"
          },
          "username": {
            "type": "string",
            "description": "A user with API access, if applicable"
          },
          "password": {
            "type": "string",
            "description": "Passord of the user"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesBugzilla",
      "title": "putV3ProjectsIdServicesBugzilla",
      "description": "Set bugzilla service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "new_issue_url": {
            "type": "string",
            "description": "New issue URL"
          },
          "issues_url": {
            "type": "string",
            "description": "Issues URL"
          },
          "project_url": {
            "type": "string",
            "description": "Project URL"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesBuildkite",
      "title": "putV3ProjectsIdServicesBuildkite",
      "description": "Set buildkite service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Buildkite project GitLab token"
          },
          "project_url": {
            "type": "string",
            "description": "The buildkite project URL"
          },
          "enable_ssl_verification": {
            "type": "boolean",
            "description": "Enable SSL verification for communication"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesBuildsEmail",
      "title": "putV3ProjectsIdServicesBuildsEmail",
      "description": "Set builds-email service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "string",
            "description": "Comma-separated list of recipient email addresses"
          },
          "add_pusher": {
            "type": "boolean",
            "description": "Add pusher to recipients list"
          },
          "notify_only_broken_builds": {
            "type": "boolean",
            "description": "Notify only broken builds"
          },
          "build_events": {
            "type": "string",
            "description": "Event will be triggered when a build status changes"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesCampfire",
      "title": "putV3ProjectsIdServicesCampfire",
      "description": "Set campfire service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Campfire token"
          },
          "subdomain": {
            "type": "string",
            "description": "Campfire subdomain"
          },
          "room": {
            "type": "string",
            "description": "Campfire room"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesCustomIssueTracker",
      "title": "putV3ProjectsIdServicesCustomIssueTracker",
      "description": "Set custom-issue-tracker service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "new_issue_url": {
            "type": "string",
            "description": "New issue URL"
          },
          "issues_url": {
            "type": "string",
            "description": "Issues URL"
          },
          "project_url": {
            "type": "string",
            "description": "Project URL"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesDroneCi",
      "title": "putV3ProjectsIdServicesDroneCi",
      "description": "Set drone-ci service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Drone CI token"
          },
          "drone_url": {
            "type": "string",
            "description": "Drone CI URL"
          },
          "enable_ssl_verification": {
            "type": "boolean",
            "description": "Enable SSL verification for communication"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "merge_request_events": {
            "type": "string",
            "description": "Event will be triggered when a merge request is created/updated/merged"
          },
          "tag_push_events": {
            "type": "string",
            "description": "Event will be triggered when a new tag is pushed to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesEmailsOnPush",
      "title": "putV3ProjectsIdServicesEmailsOnPush",
      "description": "Set emails-on-push service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "string",
            "description": "Comma-separated list of recipient email addresses"
          },
          "disable_diffs": {
            "type": "boolean",
            "description": "Disable code diffs"
          },
          "send_from_committer_email": {
            "type": "boolean",
            "description": "Send from committer"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "tag_push_events": {
            "type": "string",
            "description": "Event will be triggered when a new tag is pushed to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesExternalWiki",
      "title": "putV3ProjectsIdServicesExternalWiki",
      "description": "Set external-wiki service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "external_wiki_url": {
            "type": "string",
            "description": "The URL of the external Wiki"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesFlowdock",
      "title": "putV3ProjectsIdServicesFlowdock",
      "description": "Set flowdock service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Flowdock token"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesGemnasium",
      "title": "putV3ProjectsIdServicesGemnasium",
      "description": "Set gemnasium service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "description": "Your personal API key on gemnasium.com"
          },
          "token": {
            "type": "string",
            "description": "The project's slug on gemnasium.com"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesHipchat",
      "title": "putV3ProjectsIdServicesHipchat",
      "description": "Set hipchat service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The room token"
          },
          "room": {
            "type": "string",
            "description": "The room name or ID"
          },
          "color": {
            "type": "string",
            "description": "The room color"
          },
          "notify": {
            "type": "boolean",
            "description": "Enable notifications"
          },
          "api_version": {
            "type": "string",
            "description": "Leave blank for default (v2)"
          },
          "server": {
            "type": "string",
            "description": "Leave blank for default. https://hipchat.example.com"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "issue_events": {
            "type": "string",
            "description": "Event will be triggered when an issue is created/updated/closed"
          },
          "confidential_issue_events": {
            "type": "string",
            "description": "Event will be triggered when a confidential issue is created/updated/closed"
          },
          "merge_request_events": {
            "type": "string",
            "description": "Event will be triggered when a merge request is created/updated/merged"
          },
          "note_events": {
            "type": "string",
            "description": "Event will be triggered when someone adds a comment"
          },
          "tag_push_events": {
            "type": "string",
            "description": "Event will be triggered when a new tag is pushed to the repository"
          },
          "build_events": {
            "type": "string",
            "description": "Event will be triggered when a build status changes"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesIrker",
      "title": "putV3ProjectsIdServicesIrker",
      "description": "Set irker service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "string",
            "description": "Recipients/channels separated by whitespaces"
          },
          "default_irc_uri": {
            "type": "string",
            "description": "Default: irc://irc.network.net:6697"
          },
          "server_host": {
            "type": "string",
            "description": "Server host. Default localhost"
          },
          "server_port": {
            "type": "integer",
            "format": "int32",
            "description": "Server port. Default 6659"
          },
          "colorize_messages": {
            "type": "boolean",
            "description": "Colorize messages"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesJira",
      "title": "putV3ProjectsIdServicesJira",
      "description": "Set jira service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com"
          },
          "project_key": {
            "type": "string",
            "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ"
          },
          "username": {
            "type": "string",
            "description": "The username of the user created to be used with GitLab/JIRA"
          },
          "password": {
            "type": "string",
            "description": "The password of the user created to be used with GitLab/JIRA"
          },
          "jira_issue_transition_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`"
          },
          "commit_events": {
            "type": "string",
            "description": "Event will be triggered when a commit is created/updated"
          },
          "merge_request_events": {
            "type": "string",
            "description": "Event will be triggered when a merge request is created/updated/merged"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesKubernetes",
      "title": "putV3ProjectsIdServicesKubernetes",
      "description": "Set kubernetes service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "description": "The Kubernetes namespace to use"
          },
          "api_url": {
            "type": "string",
            "description": "The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com"
          },
          "token": {
            "type": "string",
            "description": "The service token to authenticate against the Kubernetes cluster with"
          },
          "ca_pem": {
            "type": "string",
            "description": "A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesMattermost",
      "title": "putV3ProjectsIdServicesMattermost",
      "description": "Set mattermost service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "webhook": {
            "type": "string",
            "description": "The Mattermost webhook. e.g. http://mattermost_host/hooks/..."
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "issue_events": {
            "type": "string",
            "description": "Event will be triggered when an issue is created/updated/closed"
          },
          "confidential_issue_events": {
            "type": "string",
            "description": "Event will be triggered when a confidential issue is created/updated/closed"
          },
          "merge_request_events": {
            "type": "string",
            "description": "Event will be triggered when a merge request is created/updated/merged"
          },
          "note_events": {
            "type": "string",
            "description": "Event will be triggered when someone adds a comment"
          },
          "tag_push_events": {
            "type": "string",
            "description": "Event will be triggered when a new tag is pushed to the repository"
          },
          "build_events": {
            "type": "string",
            "description": "Event will be triggered when a build status changes"
          },
          "pipeline_events": {
            "type": "string"
          },
          "wiki_page_events": {
            "type": "string",
            "description": "Event will be triggered when a wiki page is created/updated"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesMattermostSlashCommands",
      "title": "putV3ProjectsIdServicesMattermostSlashCommands",
      "description": "Set mattermost-slash-commands service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The Mattermost token"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdServicesMattermostSlashCommandsTrigger",
      "title": "postV3ProjectsIdServicesMattermostSlashCommandsTrigger",
      "description": "Added in GitLab 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "token": {
            "type": "string",
            "description": "The Mattermost token"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesPipelinesEmail",
      "title": "putV3ProjectsIdServicesPipelinesEmail",
      "description": "Set pipelines-email service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "string",
            "description": "Comma-separated list of recipient email addresses"
          },
          "notify_only_broken_builds": {
            "type": "boolean",
            "description": "Notify only broken builds"
          },
          "pipeline_events": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesPivotaltracker",
      "title": "putV3ProjectsIdServicesPivotaltracker",
      "description": "Set pivotaltracker service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The Pivotaltracker token"
          },
          "restrict_to_branch": {
            "type": "string",
            "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches."
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesPushover",
      "title": "putV3ProjectsIdServicesPushover",
      "description": "Set pushover service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "description": "The application key"
          },
          "user_key": {
            "type": "string",
            "description": "The user key"
          },
          "priority": {
            "type": "string",
            "description": "The priority"
          },
          "device": {
            "type": "string",
            "description": "Leave blank for all active devices"
          },
          "sound": {
            "type": "string",
            "description": "The sound of the notification"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesRedmine",
      "title": "putV3ProjectsIdServicesRedmine",
      "description": "Set redmine service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "new_issue_url": {
            "type": "string",
            "description": "The new issue URL"
          },
          "project_url": {
            "type": "string",
            "description": "The project URL"
          },
          "issues_url": {
            "type": "string",
            "description": "The issues URL"
          },
          "description": {
            "type": "string",
            "description": "The description of the tracker"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesSlack",
      "title": "putV3ProjectsIdServicesSlack",
      "description": "Set slack service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "webhook": {
            "type": "string",
            "description": "The Slack webhook. e.g. https://hooks.slack.com/services/..."
          },
          "new_issue_url": {
            "type": "string",
            "description": "The user name"
          },
          "channel": {
            "type": "string",
            "description": "The channel name"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "issue_events": {
            "type": "string",
            "description": "Event will be triggered when an issue is created/updated/closed"
          },
          "confidential_issue_events": {
            "type": "string",
            "description": "Event will be triggered when a confidential issue is created/updated/closed"
          },
          "merge_request_events": {
            "type": "string",
            "description": "Event will be triggered when a merge request is created/updated/merged"
          },
          "note_events": {
            "type": "string",
            "description": "Event will be triggered when someone adds a comment"
          },
          "tag_push_events": {
            "type": "string",
            "description": "Event will be triggered when a new tag is pushed to the repository"
          },
          "build_events": {
            "type": "string",
            "description": "Event will be triggered when a build status changes"
          },
          "pipeline_events": {
            "type": "string"
          },
          "wiki_page_events": {
            "type": "string",
            "description": "Event will be triggered when a wiki page is created/updated"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesSlackSlashCommands",
      "title": "putV3ProjectsIdServicesSlackSlashCommands",
      "description": "Set slack-slash-commands service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The Slack token"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "postV3ProjectsIdServicesSlackSlashCommandsTrigger",
      "title": "postV3ProjectsIdServicesSlackSlashCommandsTrigger",
      "description": "Added in GitLab 8.13",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "token": {
            "type": "string",
            "description": "The Slack token"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "putV3ProjectsIdServicesTeamcity",
      "title": "putV3ProjectsIdServicesTeamcity",
      "description": "Set teamcity service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "teamcity_url": {
            "type": "string",
            "description": "TeamCity root URL like https://teamcity.example.com"
          },
          "build_type": {
            "type": "string",
            "description": "Build configuration ID"
          },
          "username": {
            "type": "string",
            "description": "A user with permissions to trigger a manual build"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          },
          "push_events": {
            "type": "string",
            "description": "Event will be triggered by a push to the repository"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "deleteV3ProjectsIdServicesServiceSlug",
      "title": "deleteV3ProjectsIdServicesServiceSlug",
      "description": "Delete a service for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "service_slug": {
            "type": "string",
            "description": "The name of the service",
            "enum": [
              "asana",
              "assembla",
              "bamboo",
              "bugzilla",
              "buildkite",
              "builds-email",
              "campfire",
              "custom-issue-tracker",
              "drone-ci",
              "emails-on-push",
              "external-wiki",
              "flowdock",
              "gemnasium",
              "hipchat",
              "irker",
              "jira",
              "kubernetes",
              "mattermost-slash-commands",
              "slack-slash-commands",
              "pipelines-email",
              "pivotaltracker",
              "pushover",
              "redmine",
              "slack",
              "mattermost",
              "teamcity"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdServicesServiceSlug",
      "title": "getV3ProjectsIdServicesServiceSlug",
      "description": "Get the service settings for project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "service_slug": {
            "type": "string",
            "description": "The name of the service",
            "enum": [
              "asana",
              "assembla",
              "bamboo",
              "bugzilla",
              "buildkite",
              "builds-email",
              "campfire",
              "custom-issue-tracker",
              "drone-ci",
              "emails-on-push",
              "external-wiki",
              "flowdock",
              "gemnasium",
              "hipchat",
              "irker",
              "jira",
              "kubernetes",
              "mattermost-slash-commands",
              "slack-slash-commands",
              "pipelines-email",
              "pivotaltracker",
              "pushover",
              "redmine",
              "slack",
              "mattermost",
              "teamcity"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectService"
      }
    },
    {
      "id": "postV3ProjectsIdShare",
      "title": "postV3ProjectsIdShare",
      "description": "Share the project with a group",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "group_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a group"
          },
          "group_access": {
            "type": "integer",
            "format": "int32",
            "description": "The group access level",
            "enum": [
              10,
              20,
              30,
              40
            ]
          },
          "expires_at": {
            "type": "string",
            "format": "date",
            "description": "Share expiration date"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectGroupLink"
      }
    },
    {
      "id": "deleteV3ProjectsIdShareGroupId",
      "title": "deleteV3ProjectsIdShareGroupId",
      "description": "",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "group_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the group"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdSnippets",
      "title": "getV3ProjectsIdSnippets",
      "description": "Get all project snippets",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectSnippet"
      }
    },
    {
      "id": "postV3ProjectsIdSnippets",
      "title": "postV3ProjectsIdSnippets",
      "description": "Create a new project snippet",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "title": {
            "type": "string",
            "description": "The title of the snippet"
          },
          "file_name": {
            "type": "string",
            "description": "The file name of the snippet"
          },
          "code": {
            "type": "string",
            "description": "The content of the snippet"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the snippet",
            "enum": [
              0,
              10,
              20
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectSnippet"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsNoteableIdNotes",
      "title": "getV3ProjectsIdSnippetsNoteableIdNotes",
      "description": "Get a list of project +noteable+ notes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "postV3ProjectsIdSnippetsNoteableIdNotes",
      "title": "postV3ProjectsIdSnippetsNoteableIdNotes",
      "description": "Create a new +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of the note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "title": "deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "description": "Delete a +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "title": "getV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "description": "Get a single +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "putV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "title": "putV3ProjectsIdSnippetsNoteableIdNotesNoteId",
      "description": "Update an existing +noteable+ note",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "noteable_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the noteable"
          },
          "note_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a note"
          },
          "body": {
            "type": "string",
            "description": "The content of a note"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Note"
      }
    },
    {
      "id": "deleteV3ProjectsIdSnippetsSnippetId",
      "title": "deleteV3ProjectsIdSnippetsSnippetId",
      "description": "Delete a project snippet",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetId",
      "title": "getV3ProjectsIdSnippetsSnippetId",
      "description": "Get a single project snippet",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectSnippet"
      }
    },
    {
      "id": "putV3ProjectsIdSnippetsSnippetId",
      "title": "putV3ProjectsIdSnippetsSnippetId",
      "description": "Update an existing project snippet",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project snippet"
          },
          "title": {
            "type": "string",
            "description": "The title of the snippet"
          },
          "file_name": {
            "type": "string",
            "description": "The file name of the snippet"
          },
          "code": {
            "type": "string",
            "description": "The content of the snippet"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the snippet",
            "enum": [
              0,
              10,
              20
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/ProjectSnippet"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetIdAwardEmoji",
      "title": "getV3ProjectsIdSnippetsSnippetIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an Issue, Merge Request or Snippet"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdSnippetsSnippetIdAwardEmoji",
      "title": "postV3ProjectsIdSnippetsSnippetIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
      "title": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
      "title": "postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a award_emoji (without colons)"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
      "title": "deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of an award emoji"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
      "title": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
      "description": "This feature was introduced in 8.9",
      "inputSchema": {
        "type": "object",
        "properties": {
          "award_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the award"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32"
          },
          "note_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/AwardEmoji"
      }
    },
    {
      "id": "getV3ProjectsIdSnippetsSnippetIdRaw",
      "title": "getV3ProjectsIdSnippetsSnippetIdRaw",
      "description": "Get a raw project snippet",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "snippet_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a project snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "deleteV3ProjectsIdStar",
      "title": "deleteV3ProjectsIdStar",
      "description": "Unstar a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "postV3ProjectsIdStar",
      "title": "postV3ProjectsIdStar",
      "description": "Star a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "postV3ProjectsIdStatusesSha",
      "title": "postV3ProjectsIdStatusesSha",
      "description": "Post status to a commit",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "sha": {
            "type": "string",
            "description": "The commit hash"
          },
          "state": {
            "type": "string",
            "description": "The state of the status",
            "enum": [
              "pending",
              "running",
              "success",
              "failed",
              "canceled"
            ]
          },
          "ref": {
            "type": "string",
            "description": "The ref"
          },
          "target_url": {
            "type": "string",
            "description": "The target URL to associate with this status"
          },
          "description": {
            "type": "string",
            "description": "A short description of the status"
          },
          "name": {
            "type": "string",
            "description": "A string label to differentiate this status from the status of other systems. Default: \"default\""
          },
          "context": {
            "type": "string",
            "description": "A string label to differentiate this status from the status of other systems. Default: \"default\""
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/CommitStatus"
      }
    },
    {
      "id": "getV3ProjectsIdTriggers",
      "title": "getV3ProjectsIdTriggers",
      "description": "Get triggers list",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Trigger"
      }
    },
    {
      "id": "postV3ProjectsIdTriggers",
      "title": "postV3ProjectsIdTriggers",
      "description": "Create a trigger",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Trigger"
      }
    },
    {
      "id": "deleteV3ProjectsIdTriggersToken",
      "title": "deleteV3ProjectsIdTriggersToken",
      "description": "Delete a trigger",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "token": {
            "type": "string",
            "description": "The unique token of trigger"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Trigger"
      }
    },
    {
      "id": "getV3ProjectsIdTriggersToken",
      "title": "getV3ProjectsIdTriggersToken",
      "description": "Get specific trigger of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "token": {
            "type": "string",
            "description": "The unique token of trigger"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Trigger"
      }
    },
    {
      "id": "postV3ProjectsIdUnarchive",
      "title": "postV3ProjectsIdUnarchive",
      "description": "Unarchive a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Project"
      }
    },
    {
      "id": "postV3ProjectsIdUploads",
      "title": "postV3ProjectsIdUploads",
      "description": "Upload a file",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "file": {
            "type": "string",
            "description": "The file to be uploaded"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3ProjectsIdUsers",
      "title": "getV3ProjectsIdUsers",
      "description": "Get the users list of a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "search": {
            "type": "string",
            "description": "Return list of users matching the search criteria"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserBasic"
      }
    },
    {
      "id": "getV3ProjectsIdVariables",
      "title": "getV3ProjectsIdVariables",
      "description": "Get project variables",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Variable"
      }
    },
    {
      "id": "postV3ProjectsIdVariables",
      "title": "postV3ProjectsIdVariables",
      "description": "Create a new variable in a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "key": {
            "type": "string",
            "description": "The key of the variable"
          },
          "value": {
            "type": "string",
            "description": "The value of the variable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Variable"
      }
    },
    {
      "id": "deleteV3ProjectsIdVariablesKey",
      "title": "deleteV3ProjectsIdVariablesKey",
      "description": "Delete an existing variable from a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "key": {
            "type": "string",
            "description": "The key of the variable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Variable"
      }
    },
    {
      "id": "getV3ProjectsIdVariablesKey",
      "title": "getV3ProjectsIdVariablesKey",
      "description": "Get a specific variable from a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "key": {
            "type": "string",
            "description": "The key of the variable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Variable"
      }
    },
    {
      "id": "putV3ProjectsIdVariablesKey",
      "title": "putV3ProjectsIdVariablesKey",
      "description": "Update an existing variable from a project",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a project"
          },
          "key": {
            "type": "string",
            "description": "The key of the variable"
          },
          "value": {
            "type": "string",
            "description": "The value of the variable"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Variable"
      }
    },
    {
      "id": "getV3Runners",
      "title": "getV3Runners",
      "description": "Get runners available for user",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope of specific runners to show",
            "enum": [
              "active",
              "paused",
              "online"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "getV3RunnersAll",
      "title": "getV3RunnersAll",
      "description": "Get all runners - shared and specific",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope of specific runners to show",
            "enum": [
              "active",
              "paused",
              "online",
              "specific",
              "shared"
            ]
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "deleteV3RunnersId",
      "title": "deleteV3RunnersId",
      "description": "Remove a runner",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the runner"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Runner"
      }
    },
    {
      "id": "getV3RunnersId",
      "title": "getV3RunnersId",
      "description": "Get runner's details",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the runner"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RunnerDetails"
      }
    },
    {
      "id": "putV3RunnersId",
      "title": "putV3RunnersId",
      "description": "Update runner's details",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the runner"
          },
          "description": {
            "type": "string",
            "description": "The description of the runner"
          },
          "active": {
            "type": "boolean",
            "description": "The state of a runner"
          },
          "tag_list": {
            "type": "array",
            "description": "The list of tags for a runner"
          },
          "run_untagged": {
            "type": "boolean",
            "description": "Flag indicating the runner can execute untagged jobs"
          },
          "locked": {
            "type": "boolean",
            "description": "Flag indicating the runner is locked"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RunnerDetails"
      }
    },
    {
      "id": "postV3Session",
      "title": "postV3Session",
      "description": "Login to get token",
      "inputSchema": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "description": "The username"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserWithPrivateToken"
      }
    },
    {
      "id": "getV3SidekiqCompoundMetrics",
      "title": "getV3SidekiqCompoundMetrics",
      "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3SidekiqJobStats",
      "title": "getV3SidekiqJobStats",
      "description": "Get the Sidekiq job statistics",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3SidekiqProcessMetrics",
      "title": "getV3SidekiqProcessMetrics",
      "description": "Get the Sidekiq process metrics",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3SidekiqQueueMetrics",
      "title": "getV3SidekiqQueueMetrics",
      "description": "Get the Sidekiq queue metrics",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3Snippets",
      "title": "getV3Snippets",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "postV3Snippets",
      "title": "postV3Snippets",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of a snippet"
          },
          "file_name": {
            "type": "string",
            "description": "The name of a snippet file"
          },
          "content": {
            "type": "string",
            "description": "The content of a snippet"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the snippet",
            "enum": [
              0,
              10,
              20
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "getV3SnippetsPublic",
      "title": "getV3SnippetsPublic",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "deleteV3SnippetsId",
      "title": "deleteV3SnippetsId",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "getV3SnippetsId",
      "title": "getV3SnippetsId",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "putV3SnippetsId",
      "title": "putV3SnippetsId",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a snippet"
          },
          "title": {
            "type": "string",
            "description": "The title of a snippet"
          },
          "file_name": {
            "type": "string",
            "description": "The name of a snippet file"
          },
          "content": {
            "type": "string",
            "description": "The content of a snippet"
          },
          "visibility_level": {
            "type": "integer",
            "format": "int32",
            "description": "The visibility level of the snippet",
            "enum": [
              0,
              10,
              20
            ]
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/PersonalSnippet"
      }
    },
    {
      "id": "getV3SnippetsIdRaw",
      "title": "getV3SnippetsIdRaw",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of a snippet"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3TemplatesDockerfiles",
      "title": "getV3TemplatesDockerfiles",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3TemplatesDockerfilesName",
      "title": "getV3TemplatesDockerfilesName",
      "description": "This feature was introduced in GitLab 8.15.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3TemplatesGitignores",
      "title": "getV3TemplatesGitignores",
      "description": "This feature was introduced in GitLab 8.8.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3TemplatesGitignoresName",
      "title": "getV3TemplatesGitignoresName",
      "description": "This feature was introduced in GitLab 8.8.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3TemplatesGitlabCiYmls",
      "title": "getV3TemplatesGitlabCiYmls",
      "description": "This feature was introduced in GitLab 8.9.",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/TemplatesList"
      }
    },
    {
      "id": "getV3TemplatesGitlabCiYmlsName",
      "title": "getV3TemplatesGitlabCiYmlsName",
      "description": "This feature was introduced in GitLab 8.9.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Template"
      }
    },
    {
      "id": "getV3TemplatesLicenses",
      "title": "getV3TemplatesLicenses",
      "description": "This feature was introduced in GitLab 8.7.",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "popular": {
            "type": "boolean",
            "description": "If passed, returns only popular licenses"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoLicense"
      }
    },
    {
      "id": "getV3TemplatesLicensesName",
      "title": "getV3TemplatesLicensesName",
      "description": "This feature was introduced in GitLab 8.7.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/RepoLicense"
      }
    },
    {
      "id": "deleteV3Todos",
      "title": "deleteV3Todos",
      "description": "Mark all todos as done",
      "inputSchema": {},
      "outputSchema": {}
    },
    {
      "id": "getV3Todos",
      "title": "getV3Todos",
      "description": "Get a todo list",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Todo"
      }
    },
    {
      "id": "deleteV3TodosId",
      "title": "deleteV3TodosId",
      "description": "Mark a todo as done",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the todo being marked as done"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Todo"
      }
    },
    {
      "id": "getV3User",
      "title": "getV3User",
      "description": "Get the currently authenticated user",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/UserPublic"
      }
    },
    {
      "id": "getV3UserEmails",
      "title": "getV3UserEmails",
      "description": "Get the currently authenticated user's email addresses",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "postV3UserEmails",
      "title": "postV3UserEmails",
      "description": "Add new email address to the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The new email"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "deleteV3UserEmailsEmailId",
      "title": "deleteV3UserEmailsEmailId",
      "description": "Delete an email address from the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the email"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3UserEmailsEmailId",
      "title": "getV3UserEmailsEmailId",
      "description": "Get a single email address owned by the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the email"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "getV3UserKeys",
      "title": "getV3UserKeys",
      "description": "Get the currently authenticated user's SSH keys",
      "inputSchema": {},
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3UserKeys",
      "title": "postV3UserKeys",
      "description": "Add a new SSH key to the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The new SSH key"
          },
          "title": {
            "type": "string",
            "description": "The title of the new SSH key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3UserKeysKeyId",
      "title": "deleteV3UserKeysKeyId",
      "description": "Delete an SSH key from the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the SSH key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "getV3UserKeysKeyId",
      "title": "getV3UserKeysKeyId",
      "description": "Get a single key owned by currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the SSH key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "getV3Users",
      "title": "getV3Users",
      "description": "Get the list of users",
      "inputSchema": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Get a single user with a specific username"
          },
          "search": {
            "type": "string",
            "description": "Search for a username"
          },
          "active": {
            "type": "boolean",
            "description": "Filters only active users"
          },
          "external": {
            "type": "boolean",
            "description": "Filters only external users"
          },
          "blocked": {
            "type": "boolean",
            "description": "Filters only blocked users"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserBasic"
      }
    },
    {
      "id": "postV3Users",
      "title": "postV3Users",
      "description": "Create a user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the new user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "skype": {
            "type": "string",
            "description": "The Skype username"
          },
          "linkedin": {
            "type": "string",
            "description": "The LinkedIn username"
          },
          "twitter": {
            "type": "string",
            "description": "The Twitter username"
          },
          "website_url": {
            "type": "string",
            "description": "The website of the user"
          },
          "organization": {
            "type": "string",
            "description": "The organization of the user"
          },
          "projects_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of projects a user can create"
          },
          "extern_uid": {
            "type": "string",
            "description": "The external authentication provider UID"
          },
          "provider": {
            "type": "string",
            "description": "The external provider"
          },
          "bio": {
            "type": "string",
            "description": "The biography of the user"
          },
          "location": {
            "type": "string",
            "description": "The location of the user"
          },
          "admin": {
            "type": "boolean",
            "description": "Flag indicating the user is an administrator"
          },
          "can_create_group": {
            "type": "boolean",
            "description": "Flag indicating the user can create groups"
          },
          "confirm": {
            "type": "boolean",
            "description": "Flag indicating the account needs to be confirmed"
          },
          "external": {
            "type": "boolean",
            "description": "Flag indicating the user is an external user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserPublic"
      }
    },
    {
      "id": "deleteV3UsersId",
      "title": "deleteV3UsersId",
      "description": "Delete a user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "getV3UsersId",
      "title": "getV3UsersId",
      "description": "Get a single user",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserBasic"
      }
    },
    {
      "id": "putV3UsersId",
      "title": "putV3UsersId",
      "description": "Update a user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the new user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "skype": {
            "type": "string",
            "description": "The Skype username"
          },
          "linkedin": {
            "type": "string",
            "description": "The LinkedIn username"
          },
          "twitter": {
            "type": "string",
            "description": "The Twitter username"
          },
          "website_url": {
            "type": "string",
            "description": "The website of the user"
          },
          "organization": {
            "type": "string",
            "description": "The organization of the user"
          },
          "projects_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of projects a user can create"
          },
          "extern_uid": {
            "type": "string",
            "description": "The external authentication provider UID"
          },
          "provider": {
            "type": "string",
            "description": "The external provider"
          },
          "bio": {
            "type": "string",
            "description": "The biography of the user"
          },
          "location": {
            "type": "string",
            "description": "The location of the user"
          },
          "admin": {
            "type": "boolean",
            "description": "Flag indicating the user is an administrator"
          },
          "can_create_group": {
            "type": "boolean",
            "description": "Flag indicating the user can create groups"
          },
          "confirm": {
            "type": "boolean",
            "description": "Flag indicating the account needs to be confirmed"
          },
          "external": {
            "type": "boolean",
            "description": "Flag indicating the user is an external user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/UserPublic"
      }
    },
    {
      "id": "putV3UsersIdBlock",
      "title": "putV3UsersIdBlock",
      "description": "Block a user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3UsersIdEmails",
      "title": "getV3UsersIdEmails",
      "description": "Get the emails addresses of a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "postV3UsersIdEmails",
      "title": "postV3UsersIdEmails",
      "description": "Add an email address to a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "deleteV3UsersIdEmailsEmailId",
      "title": "deleteV3UsersIdEmailsEmailId",
      "description": "Delete an email address of a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "email_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the email"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Email"
      }
    },
    {
      "id": "getV3UsersIdEvents",
      "title": "getV3UsersIdEvents",
      "description": "This feature was introduced in GitLab 8.13.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/Event"
      }
    },
    {
      "id": "getV3UsersIdKeys",
      "title": "getV3UsersIdKeys",
      "description": "Get the SSH keys of a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "postV3UsersIdKeys",
      "title": "postV3UsersIdKeys",
      "description": "Add an SSH key to a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "key": {
            "type": "string",
            "description": "The new SSH key"
          },
          "title": {
            "type": "string",
            "description": "The title of the new SSH key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "deleteV3UsersIdKeysKeyId",
      "title": "deleteV3UsersIdKeysKeyId",
      "description": "Delete an existing SSH key from a specified user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          },
          "key_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the SSH key"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {
        "$ref": "#/definitions/SSHKey"
      }
    },
    {
      "id": "putV3UsersIdUnblock",
      "title": "putV3UsersIdUnblock",
      "description": "Unblock a user. Available only for admins.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the user"
          }
        },
        "additionalProperties": false
      },
      "outputSchema": {}
    },
    {
      "id": "getV3Version",
      "title": "getV3Version",
      "description": "This feature was introduced in GitLab 8.13.",
      "inputSchema": {},
      "outputSchema": {}
    }
  ]
}