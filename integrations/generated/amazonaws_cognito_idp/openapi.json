{
  "swagger": "2.0",
  "schemes": [
    "http"
  ],
  "host": "cognito-idp.amazonaws.com",
  "basePath": "/",
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "email": "mike.ralphson@gmail.com",
      "name": "Mike Ralphson",
      "url": "https://github.com/mermade/aws2openapi"
    },
    "description": "<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the Amazon Cognito Documentation.</p>",
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "title": "Amazon Cognito Identity Provider",
    "version": "2016-04-18",
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": [
      "cloud"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_media.amazonwebservices.com_blog_2007_big_pbaws_logo_300px.jpg"
    },
    "x-origin": [
      {
        "contentType": "application/json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json",
        "x-apisguru-direct": true
      }
    ],
    "x-preferred": true,
    "x-providerName": "amazonaws.com",
    "x-release": "v4",
    "x-serviceName": "cognito-idp",
    "x-datafire": {
      "name": "amazonaws_cognito_idp",
      "type": "openapi"
    }
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://aws.amazon.com/cognito-idp/"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "hmac": {
      "description": "Amazon Signature authorization v4",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authtype": "awsSigv4"
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "parameters": {
    "Action": {
      "in": "header",
      "name": "Action",
      "required": true,
      "type": "string"
    },
    "Version": {
      "in": "header",
      "name": "Version",
      "required": true,
      "type": "string"
    },
    "X-Amz-Algorithm": {
      "in": "header",
      "name": "X-Amz-Algorithm",
      "required": false,
      "type": "string"
    },
    "X-Amz-Content-Sha256": {
      "in": "header",
      "name": "X-Amz-Content-Sha256",
      "required": false,
      "type": "string"
    },
    "X-Amz-Credential": {
      "in": "header",
      "name": "X-Amz-Credential",
      "required": false,
      "type": "string"
    },
    "X-Amz-Date": {
      "in": "header",
      "name": "X-Amz-Date",
      "required": false,
      "type": "string"
    },
    "X-Amz-Security-Token": {
      "in": "header",
      "name": "X-Amz-Security-Token",
      "required": false,
      "type": "string"
    },
    "X-Amz-Signature": {
      "in": "header",
      "name": "X-Amz-Signature",
      "required": false,
      "type": "string"
    },
    "X-Amz-SignedHeaders": {
      "in": "header",
      "name": "X-Amz-SignedHeaders",
      "required": false,
      "type": "string"
    }
  },
  "paths": {
    "/": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Adds additional user attributes to the user pool schema.",
        "operationId": "AddCustomAttributes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCustomAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddCustomAttributesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserImportInProgressException",
            "schema": {
              "$ref": "#/definitions/UserImportInProgressException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminAddUserToGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminAddUserToGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminAddUserToGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminConfirmSignUp": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminConfirmSignUp",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminConfirmSignUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminConfirmSignUpResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "TooManyFailedAttemptsException",
            "schema": {
              "$ref": "#/definitions/TooManyFailedAttemptsException"
            }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "487": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "488": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "489": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "490": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminCreateUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a new user in the specified user pool and sends a welcome message via email or phone (SMS). This message is based on a template that you configured in your call to CreateUserPool or UpdateUserPool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminCreateUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminCreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminCreateUserResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "483": {
            "description": "UsernameExistsException",
            "schema": {
              "$ref": "#/definitions/UsernameExistsException"
            }
          },
          "484": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "485": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          },
          "486": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "489": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "492": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "493": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "494": {
            "description": "UnsupportedUserStateException",
            "schema": {
              "$ref": "#/definitions/UnsupportedUserStateException"
            }
          },
          "495": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminDeleteUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDeleteUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminDeleteUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminDeleteUserAttributes": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDeleteUserAttributes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminDeleteUserAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminDeleteUserAttributesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminDisableUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminDisableUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminDisableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminDisableUserResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminEnableUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminEnableUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminEnableUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminEnableUserResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminForgetDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminForgetDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminForgetDeviceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminGetDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminGetDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminGetDeviceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminGetDeviceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          }
        }
      }
    },
    "/#AdminGetUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminGetUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminGetUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminGetUserResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminInitiateAuth": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminInitiateAuth",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminInitiateAuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminInitiateAuthResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "486": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "489": {
            "description": "MFAMethodNotFoundException",
            "schema": {
              "$ref": "#/definitions/MFAMethodNotFoundException"
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          }
        }
      }
    },
    "/#AdminListDevices": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminListDevices",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminListDevicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminListDevicesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          }
        }
      }
    },
    "/#AdminListGroupsForUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminListGroupsForUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminListGroupsForUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminListGroupsForUserResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminRemoveUserFromGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminRemoveUserFromGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminRemoveUserFromGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminResetUserPassword": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Resets the specified user's password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminResetUserPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminResetUserPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminResetUserPasswordResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "488": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "489": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminRespondToAuthChallenge": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminRespondToAuthChallenge",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminRespondToAuthChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminRespondToAuthChallengeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "484": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "486": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "487": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "489": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "490": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "491": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "492": {
            "description": "MFAMethodNotFoundException",
            "schema": {
              "$ref": "#/definitions/MFAMethodNotFoundException"
            }
          },
          "493": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "494": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "495": {
            "description": "AliasExistsException",
            "schema": {
              "$ref": "#/definitions/AliasExistsException"
            }
          },
          "496": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "497": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "498": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          }
        }
      }
    },
    "/#AdminSetUserSettings": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminSetUserSettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminSetUserSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminSetUserSettingsResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminUpdateDeviceStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUpdateDeviceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUpdateDeviceStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminUpdateDeviceStatusResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminUpdateUserAttributes": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUpdateUserAttributes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUpdateUserAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminUpdateUserAttributesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "485": {
            "description": "AliasExistsException",
            "schema": {
              "$ref": "#/definitions/AliasExistsException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "487": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "488": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "489": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#AdminUserGlobalSignOut": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>",
        "operationId": "AdminUserGlobalSignOut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUserGlobalSignOutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminUserGlobalSignOutResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ChangePassword": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Changes the password for a specified user in a user pool.",
        "operationId": "ChangePassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChangePasswordResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "486": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "487": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "488": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "489": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ConfirmDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Confirms tracking of the device. This API call is the call that beings device tracking.",
        "operationId": "ConfirmDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmDeviceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConfirmDeviceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "484": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "485": {
            "description": "UsernameExistsException",
            "schema": {
              "$ref": "#/definitions/UsernameExistsException"
            }
          },
          "486": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "487": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "488": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "489": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "490": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "491": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ConfirmForgotPassword": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Allows a user to enter a code provided when they reset their password to update their password.",
        "operationId": "ConfirmForgotPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmForgotPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConfirmForgotPasswordResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "482": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "483": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "484": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "486": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "487": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "488": {
            "description": "TooManyFailedAttemptsException",
            "schema": {
              "$ref": "#/definitions/TooManyFailedAttemptsException"
            }
          },
          "489": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "490": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "491": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "493": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "494": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ConfirmSignUp": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Confirms registration of a user and handles the existing alias from a previous user.",
        "operationId": "ConfirmSignUp",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmSignUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ConfirmSignUpResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "TooManyFailedAttemptsException",
            "schema": {
              "$ref": "#/definitions/TooManyFailedAttemptsException"
            }
          },
          "486": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "487": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "489": {
            "description": "AliasExistsException",
            "schema": {
              "$ref": "#/definitions/AliasExistsException"
            }
          },
          "490": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "491": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "493": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#CreateGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>",
        "operationId": "CreateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateGroupResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "GroupExistsException",
            "schema": {
              "$ref": "#/definitions/GroupExistsException"
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#CreateUserImportJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates the user import job.",
        "operationId": "CreateUserImportJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserImportJobResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#CreateUserPool": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates a new Amazon Cognito user pool and sets the password policy for the pool.",
        "operationId": "CreateUserPool",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserPoolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserPoolResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "483": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "484": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "485": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "486": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "487": {
            "description": "UserPoolTaggingException",
            "schema": {
              "$ref": "#/definitions/UserPoolTaggingException"
            }
          },
          "488": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#CreateUserPoolClient": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Creates the user pool client.",
        "operationId": "CreateUserPoolClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserPoolClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateUserPoolClientResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DeleteGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DeleteUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Allows a user to delete one's self.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "487": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DeleteUserAttributes": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes the attributes for a user.",
        "operationId": "DeleteUserAttributes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteUserAttributesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "487": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DeleteUserPool": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Deletes the specified Amazon Cognito user pool.",
        "operationId": "DeleteUserPool",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserPoolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserImportInProgressException",
            "schema": {
              "$ref": "#/definitions/UserImportInProgressException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DeleteUserPoolClient": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Allows the developer to delete the user pool client.",
        "operationId": "DeleteUserPoolClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteUserPoolClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DescribeUserImportJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Describes the user import job.",
        "operationId": "DescribeUserImportJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeUserImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeUserImportJobResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DescribeUserPool": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Returns the configuration information and metadata of the specified user pool.",
        "operationId": "DescribeUserPool",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeUserPoolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeUserPoolResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UserPoolTaggingException",
            "schema": {
              "$ref": "#/definitions/UserPoolTaggingException"
            }
          },
          "485": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#DescribeUserPoolClient": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Client method for returning the configuration information and metadata of the specified user pool client.",
        "operationId": "DescribeUserPoolClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DescribeUserPoolClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DescribeUserPoolClientResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ForgetDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Forgets the specified device.",
        "operationId": "ForgetDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgetDeviceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "488": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ForgotPassword": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Retrieves the password for the specified client ID or username.",
        "operationId": "ForgotPassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ForgotPasswordResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "488": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "489": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "493": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "494": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GetCSVHeader": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the header information for the .csv file to be used as input for the user import job.",
        "operationId": "GetCSVHeader",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCSVHeaderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetCSVHeaderResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GetDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the device.",
        "operationId": "GetDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDeviceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDeviceResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "488": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GetGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Gets a group.</p> <p>Requires developer credentials.</p>",
        "operationId": "GetGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetGroupResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GetUser": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the user attributes and metadata for a user.",
        "operationId": "GetUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "485": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "486": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "487": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GetUserAttributeVerificationCode": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Gets the user attribute verification code for the specified attribute name.",
        "operationId": "GetUserAttributeVerificationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUserAttributeVerificationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetUserAttributeVerificationCodeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "485": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "487": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "488": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "489": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "490": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          },
          "491": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "495": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#GlobalSignOut": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Signs out users from all devices.",
        "operationId": "GlobalSignOut",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalSignOutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GlobalSignOutResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#InitiateAuth": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Initiates the authentication flow.",
        "operationId": "InitiateAuth",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitiateAuthRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InitiateAuthResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "485": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "487": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "488": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "489": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "490": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "491": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListDevices": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the devices.",
        "operationId": "ListDevices",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListDevicesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListDevicesResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "488": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListGroups": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>",
        "operationId": "ListGroups",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListGroupsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListGroupsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListUserImportJobs": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the user import jobs.",
        "operationId": "ListUserImportJobs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUserImportJobsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUserImportJobsResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListUserPoolClients": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the clients that have been created for the specified user pool.",
        "operationId": "ListUserPoolClients",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUserPoolClientsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUserPoolClientsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListUserPools": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the user pools associated with an AWS account.",
        "operationId": "ListUserPools",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUserPoolsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUserPoolsResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListUsers": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Lists the users in the Amazon Cognito user pool.",
        "operationId": "ListUsers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUsersRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ListUsersInGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>",
        "operationId": "ListUsersInGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListUsersInGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ListUsersInGroupResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#ResendConfirmationCode": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Resends the confirmation (for confirmation of registration) to a specific user in the user pool.",
        "operationId": "ResendConfirmationCode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendConfirmationCodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResendConfirmationCodeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "487": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "488": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "489": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          },
          "492": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "493": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#RespondToAuthChallenge": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Responds to the authentication challenge.",
        "operationId": "RespondToAuthChallenge",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RespondToAuthChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RespondToAuthChallengeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "484": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "487": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "488": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "489": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "490": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "491": {
            "description": "MFAMethodNotFoundException",
            "schema": {
              "$ref": "#/definitions/MFAMethodNotFoundException"
            }
          },
          "492": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "493": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "494": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "495": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "496": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "497": {
            "description": "AliasExistsException",
            "schema": {
              "$ref": "#/definitions/AliasExistsException"
            }
          },
          "498": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#SetUserSettings": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.",
        "operationId": "SetUserSettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetUserSettingsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SetUserSettingsResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "484": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "485": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#SignUp": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Registers the user in the specified user pool and creates a user name, password, and user attributes.",
        "operationId": "SignUp",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUpRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SignUpResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "483": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "InvalidPasswordException",
            "schema": {
              "$ref": "#/definitions/InvalidPasswordException"
            }
          },
          "486": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "487": {
            "description": "UsernameExistsException",
            "schema": {
              "$ref": "#/definitions/UsernameExistsException"
            }
          },
          "488": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "489": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "492": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "493": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          }
        }
      }
    },
    "/#StartUserImportJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Starts the user import.",
        "operationId": "StartUserImportJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartUserImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartUserImportJobResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          }
        }
      }
    },
    "/#StopUserImportJob": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Stops the user import job.",
        "operationId": "StopUserImportJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StopUserImportJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StopUserImportJobResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "484": {
            "description": "PreconditionNotMetException",
            "schema": {
              "$ref": "#/definitions/PreconditionNotMetException"
            }
          },
          "485": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          }
        }
      }
    },
    "/#UpdateDeviceStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the device status.",
        "operationId": "UpdateDeviceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeviceStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateDeviceStatusResponse"
            }
          },
          "480": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "482": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "483": {
            "description": "InvalidUserPoolConfigurationException",
            "schema": {
              "$ref": "#/definitions/InvalidUserPoolConfigurationException"
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "485": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "486": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "487": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "488": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#UpdateGroup": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "<p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateGroupResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#UpdateUserAttributes": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Allows a user to update a specific attribute (one at a time).",
        "operationId": "UpdateUserAttributes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAttributesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserAttributesResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "483": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "UnexpectedLambdaException",
            "schema": {
              "$ref": "#/definitions/UnexpectedLambdaException"
            }
          },
          "486": {
            "description": "UserLambdaValidationException",
            "schema": {
              "$ref": "#/definitions/UserLambdaValidationException"
            }
          },
          "487": {
            "description": "InvalidLambdaResponseException",
            "schema": {
              "$ref": "#/definitions/InvalidLambdaResponseException"
            }
          },
          "488": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "489": {
            "description": "AliasExistsException",
            "schema": {
              "$ref": "#/definitions/AliasExistsException"
            }
          },
          "490": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "491": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "492": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          },
          "493": {
            "description": "CodeDeliveryFailureException",
            "schema": {
              "$ref": "#/definitions/CodeDeliveryFailureException"
            }
          },
          "494": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "495": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "496": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "497": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#UpdateUserPool": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Updates the specified user pool with the specified attributes.",
        "operationId": "UpdateUserPool",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPoolRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserPoolResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "ConcurrentModificationException",
            "schema": {
              "$ref": "#/definitions/ConcurrentModificationException"
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "UserImportInProgressException",
            "schema": {
              "$ref": "#/definitions/UserImportInProgressException"
            }
          },
          "486": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          },
          "487": {
            "description": "InvalidSmsRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleAccessPolicyException"
            }
          },
          "488": {
            "description": "InvalidSmsRoleTrustRelationshipException",
            "schema": {
              "$ref": "#/definitions/InvalidSmsRoleTrustRelationshipException"
            }
          },
          "489": {
            "description": "UserPoolTaggingException",
            "schema": {
              "$ref": "#/definitions/UserPoolTaggingException"
            }
          },
          "490": {
            "description": "InvalidEmailRoleAccessPolicyException",
            "schema": {
              "$ref": "#/definitions/InvalidEmailRoleAccessPolicyException"
            }
          }
        }
      }
    },
    "/#UpdateUserPoolClient": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Allows the developer to update the specified user pool client and password policy.",
        "operationId": "UpdateUserPoolClient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPoolClientRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateUserPoolClientResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "483": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "484": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    },
    "/#VerifyUserAttribute": {
      "parameters": [
        {
          "$ref": "#/parameters/Action"
        },
        {
          "$ref": "#/parameters/Version"
        },
        {
          "$ref": "#/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "description": "Verifies the specified user attributes in the user pool.",
        "operationId": "VerifyUserAttribute",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyUserAttributeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VerifyUserAttributeResponse"
            }
          },
          "480": {
            "description": "ResourceNotFoundException",
            "schema": {
              "$ref": "#/definitions/ResourceNotFoundException"
            }
          },
          "481": {
            "description": "InvalidParameterException",
            "schema": {
              "$ref": "#/definitions/InvalidParameterException"
            }
          },
          "482": {
            "description": "CodeMismatchException",
            "schema": {
              "$ref": "#/definitions/CodeMismatchException"
            }
          },
          "483": {
            "description": "ExpiredCodeException",
            "schema": {
              "$ref": "#/definitions/ExpiredCodeException"
            }
          },
          "484": {
            "description": "NotAuthorizedException",
            "schema": {
              "$ref": "#/definitions/NotAuthorizedException"
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "schema": {
              "$ref": "#/definitions/TooManyRequestsException"
            }
          },
          "486": {
            "description": "LimitExceededException",
            "schema": {
              "$ref": "#/definitions/LimitExceededException"
            }
          },
          "487": {
            "description": "PasswordResetRequiredException",
            "schema": {
              "$ref": "#/definitions/PasswordResetRequiredException"
            }
          },
          "488": {
            "description": "UserNotFoundException",
            "schema": {
              "$ref": "#/definitions/UserNotFoundException"
            }
          },
          "489": {
            "description": "UserNotConfirmedException",
            "schema": {
              "$ref": "#/definitions/UserNotConfirmedException"
            }
          },
          "490": {
            "description": "InternalErrorException",
            "schema": {
              "$ref": "#/definitions/InternalErrorException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AddCustomAttributesRequest": {
      "description": "Represents the request to add custom attributes.",
      "properties": {
        "CustomAttributes": {
          "$ref": "#/definitions/CustomAttributesListType",
          "description": "An array of custom attributes, such as Mutable and Name."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to add custom attributes."
        }
      },
      "required": [
        "UserPoolId",
        "CustomAttributes"
      ],
      "type": "object"
    },
    "AddCustomAttributesResponse": {
      "description": "Represents the response from the server for the request to add custom attributes.",
      "properties": {},
      "type": "object"
    },
    "AdminAddUserToGroupRequest": {
      "properties": {
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The group name."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The username for the user."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "GroupName"
      ],
      "type": "object"
    },
    "AdminConfirmSignUpRequest": {
      "description": "Represents the request to confirm user registration.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for which you want to confirm user registration."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name for which you want to confirm user registration."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminConfirmSignUpResponse": {
      "description": "Represents the response from the server for the request to confirm registration.",
      "properties": {},
      "type": "object"
    },
    "AdminCreateUserConfigType": {
      "description": "The type of configuration for creating a new user profile.",
      "properties": {
        "AllowAdminCreateUserOnly": {
          "$ref": "#/definitions/BooleanType",
          "description": "Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app."
        },
        "InviteMessageTemplate": {
          "$ref": "#/definitions/MessageTemplateType",
          "description": "The message template to be used for the welcome message to new users."
        },
        "UnusedAccountValidityDays": {
          "$ref": "#/definitions/AdminCreateUserUnusedAccountValidityDaysType",
          "description": "The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call AdminCreateUser again, specifying \"RESEND\" for the MessageAction parameter. The default value for this paameter is 7."
        }
      },
      "type": "object"
    },
    "AdminCreateUserRequest": {
      "description": "Represents the request to create a user in the specified user pool.",
      "properties": {
        "DesiredDeliveryMediums": {
          "$ref": "#/definitions/DeliveryMediumListType",
          "description": "Specify \"EMAIL\" if email will be used to send the welcome message. Specify \"SMS\" if the phone number will be used. The default value is \"SMS\". More than one value can be specified."
        },
        "ForceAliasCreation": {
          "$ref": "#/definitions/ForceAliasCreation",
          "description": "<p>This parameter is only used if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored.</p> <p>If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.</p>"
        },
        "MessageAction": {
          "$ref": "#/definitions/MessageActionType",
          "description": "Set to \"RESEND\" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to \"SUPPRESS\" to suppress sending the message. Only one value can be specified."
        },
        "TemporaryPassword": {
          "$ref": "#/definitions/PasswordType",
          "description": "<p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying \"RESEND\" for the MessageAction parameter.</p>"
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "<p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message).</p> <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if \"EMAIL\" is specified in the DesiredDeliveryMediums parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if \"SMS\" is specified in the DesiredDeliveryMediums parameter.</p> </li> </ul>"
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where the user will be created."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed."
        },
        "ValidationData": {
          "$ref": "#/definitions/AttributeListType",
          "description": "<p>The user's validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user's domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user's validation data is not persisted.</p>"
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminCreateUserResponse": {
      "description": "Represents the response from the server to the request to create the user.",
      "properties": {
        "User": {
          "$ref": "#/definitions/UserType",
          "description": "The user returned in the request to create a new user."
        }
      },
      "type": "object"
    },
    "AdminCreateUserUnusedAccountValidityDaysType": {
      "maximum": 90,
      "minimum": 0,
      "type": "integer"
    },
    "AdminDeleteUserAttributesRequest": {
      "description": "Represents the request to delete user attributes as an administrator.",
      "properties": {
        "UserAttributeNames": {
          "$ref": "#/definitions/AttributeNameListType",
          "description": "An array of strings representing the user attribute names you wish to delete."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user from which you would like to delete attributes."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "UserAttributeNames"
      ],
      "type": "object"
    },
    "AdminDeleteUserAttributesResponse": {
      "description": "Represents the response received from the server for a request to delete user attributes.",
      "properties": {},
      "type": "object"
    },
    "AdminDeleteUserRequest": {
      "description": "Represents the request to delete a user as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to delete."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminDisableUserRequest": {
      "description": "Represents the request to disable any user as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to disable the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to disable."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminDisableUserResponse": {
      "description": "Represents the response received from the server to disable the user as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminEnableUserRequest": {
      "description": "Represents the request that enables the user as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to enable the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to ebable."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminEnableUserResponse": {
      "description": "Represents the response from the server for the request to enable a user as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminForgetDeviceRequest": {
      "description": "Sends the forgot device request, as an administrator.",
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "DeviceKey"
      ],
      "type": "object"
    },
    "AdminGetDeviceRequest": {
      "description": "Represents the request to get the device, as an administrator.",
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "required": [
        "DeviceKey",
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminGetDeviceResponse": {
      "description": "Gets the device response, as an administrator.",
      "properties": {
        "Device": {
          "$ref": "#/definitions/DeviceType",
          "description": "The device."
        }
      },
      "required": [
        "Device"
      ],
      "type": "object"
    },
    "AdminGetUserRequest": {
      "description": "Represents the request to get the specified user as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to get information about the user."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to retrieve."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminGetUserResponse": {
      "description": "Represents the response from the server from the request to get the specified user as an administrator.",
      "properties": {
        "Enabled": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates that the status is enabled."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "UserCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the user was created."
        },
        "UserLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the user was last modified."
        },
        "UserStatus": {
          "$ref": "#/definitions/UserStatusType",
          "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>"
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user about whom you are receiving information."
        }
      },
      "required": [
        "Username"
      ],
      "type": "object"
    },
    "AdminInitiateAuthRequest": {
      "description": "Initiates the authorization request, as an administrator.",
      "properties": {
        "AuthFlow": {
          "$ref": "#/definitions/AuthFlowType",
          "description": "The authentication flow."
        },
        "AuthParameters": {
          "$ref": "#/definitions/AuthParametersType",
          "description": "The authentication parameters."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client app ID."
        },
        "ClientMetadata": {
          "$ref": "#/definitions/ClientMetadataType",
          "description": "The client app metadata."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the Amazon Cognito user pool."
        }
      },
      "required": [
        "UserPoolId",
        "ClientId",
        "AuthFlow"
      ],
      "type": "object"
    },
    "AdminInitiateAuthResponse": {
      "description": "Initiates the authentication response, as an administrator.",
      "properties": {
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType",
          "description": "The result of the authentication response."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "type": "object"
    },
    "AdminListDevicesRequest": {
      "description": "Represents the request to list devices, as an administrator.",
      "properties": {
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the devices request."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminListDevicesResponse": {
      "description": "Lists the device's response, as an administrator.",
      "properties": {
        "Devices": {
          "$ref": "#/definitions/DeviceListType",
          "description": "The devices in the list of devices response."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token."
        }
      },
      "type": "object"
    },
    "AdminListGroupsForUserRequest": {
      "properties": {
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the request to list groups."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The username for the user."
        }
      },
      "required": [
        "Username",
        "UserPoolId"
      ],
      "type": "object"
    },
    "AdminListGroupsForUserResponse": {
      "properties": {
        "Groups": {
          "$ref": "#/definitions/GroupListType",
          "description": "The groups that the user belongs to."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "type": "object"
    },
    "AdminRemoveUserFromGroupRequest": {
      "properties": {
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The group name."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The username for the user."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "GroupName"
      ],
      "type": "object"
    },
    "AdminResetUserPasswordRequest": {
      "description": "Represents the request to reset a user's password as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to reset the user's password."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user whose password you wish to reset."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminResetUserPasswordResponse": {
      "description": "Represents the response from the server to reset a user password as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminRespondToAuthChallengeRequest": {
      "description": "The request to respond to the authentication challenge, as an administrator.",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeResponses": {
          "$ref": "#/definitions/ChallengeResponsesType",
          "description": "The challenge response."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the Amazon Cognito user pool."
        }
      },
      "required": [
        "UserPoolId",
        "ClientId",
        "ChallengeName"
      ],
      "type": "object"
    },
    "AdminRespondToAuthChallengeResponse": {
      "description": "Responds to the authentication challenge, as an administrator.",
      "properties": {
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType",
          "description": "The result returned by the server in response to the authentication request."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "type": "object"
    },
    "AdminSetUserSettingsRequest": {
      "description": "Represents the request to set user settings as an administrator.",
      "properties": {
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to set the user's settings, such as MFA options."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you wish to set user settings."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "MFAOptions"
      ],
      "type": "object"
    },
    "AdminSetUserSettingsResponse": {
      "description": "Represents the response from the server to set user settings as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminUpdateDeviceStatusRequest": {
      "description": "The request to update the device status, as an administrator.",
      "properties": {
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceRememberedStatus": {
          "$ref": "#/definitions/DeviceRememberedStatusType",
          "description": "The status indicating whether a device has been remembered or not."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID&gt;"
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "DeviceKey"
      ],
      "type": "object"
    },
    "AdminUpdateDeviceStatusResponse": {
      "description": "The status response from the request to update the device, as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminUpdateUserAttributesRequest": {
      "description": "Represents the request to update the user's attributes as an administrator.",
      "properties": {
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to update user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to update user attributes."
        }
      },
      "required": [
        "UserPoolId",
        "Username",
        "UserAttributes"
      ],
      "type": "object"
    },
    "AdminUpdateUserAttributesResponse": {
      "description": "Represents the response from the server for the request to update user attributes as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AdminUserGlobalSignOutRequest": {
      "description": "The request to sign out of all devices, as an administrator.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name."
        }
      },
      "required": [
        "UserPoolId",
        "Username"
      ],
      "type": "object"
    },
    "AdminUserGlobalSignOutResponse": {
      "description": "The global sign-out response, as an administrator.",
      "properties": {},
      "type": "object"
    },
    "AliasAttributeType": {
      "enum": [
        "phone_number",
        "email",
        "preferred_username"
      ],
      "type": "string"
    },
    "AliasAttributesListType": {
      "items": {
        "$ref": "#/definitions/AliasAttributeType"
      },
      "type": "array"
    },
    "AliasExistsException": {
      "description": "This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception tells user that an account with this email or phone already exists.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message sent to the user when an alias exists."
        }
      },
      "type": "object"
    },
    "ArnType": {
      "maxLength": 2048,
      "minLength": 20,
      "pattern": "arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:([\\w+=/,.@-]*)?:[0-9]+:[\\w+=/,.@-]+(:[\\w+=/,.@-]+)?(:[\\w+=/,.@-]+)?",
      "type": "string"
    },
    "AttributeDataType": {
      "enum": [
        "String",
        "Number",
        "DateTime",
        "Boolean"
      ],
      "type": "string"
    },
    "AttributeListType": {
      "items": {
        "$ref": "#/definitions/AttributeType"
      },
      "type": "array"
    },
    "AttributeNameListType": {
      "items": {
        "$ref": "#/definitions/AttributeNameType"
      },
      "type": "array"
    },
    "AttributeNameType": {
      "maxLength": 32,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "AttributeType": {
      "description": "Specifies whether the attribute is standard or custom.",
      "properties": {
        "Name": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The name of the attribute."
        },
        "Value": {
          "$ref": "#/definitions/AttributeValueType",
          "description": "The value of the attribute."
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "AttributeValueType": {
      "format": "password",
      "maxLength": 2048,
      "type": "string"
    },
    "AuthFlowType": {
      "enum": [
        "USER_SRP_AUTH",
        "REFRESH_TOKEN_AUTH",
        "REFRESH_TOKEN",
        "CUSTOM_AUTH",
        "ADMIN_NO_SRP_AUTH"
      ],
      "type": "string"
    },
    "AuthParametersType": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "AuthenticationResultType": {
      "description": "The result type of the authentication result.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token of the authentication result."
        },
        "ExpiresIn": {
          "$ref": "#/definitions/IntegerType",
          "description": "The expiration period of the authentication result."
        },
        "IdToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The ID token of the authentication result."
        },
        "NewDeviceMetadata": {
          "$ref": "#/definitions/NewDeviceMetadataType",
          "description": "The new device metadata from an authentication result."
        },
        "RefreshToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The refresh token of the authentication result."
        },
        "TokenType": {
          "$ref": "#/definitions/StringType",
          "description": "The token type of the authentication result."
        }
      },
      "type": "object"
    },
    "BooleanType": {
      "type": "boolean"
    },
    "ChallengeNameType": {
      "enum": [
        "SMS_MFA",
        "PASSWORD_VERIFIER",
        "CUSTOM_CHALLENGE",
        "DEVICE_SRP_AUTH",
        "DEVICE_PASSWORD_VERIFIER",
        "ADMIN_NO_SRP_AUTH",
        "NEW_PASSWORD_REQUIRED"
      ],
      "type": "string"
    },
    "ChallengeParametersType": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ChallengeResponsesType": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ChangePasswordRequest": {
      "description": "Represents the request to change a user password.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token in the change password request."
        },
        "PreviousPassword": {
          "$ref": "#/definitions/PasswordType",
          "description": "The old password in the change password request."
        },
        "ProposedPassword": {
          "$ref": "#/definitions/PasswordType",
          "description": "The new password in the change password request."
        }
      },
      "required": [
        "PreviousPassword",
        "ProposedPassword"
      ],
      "type": "object"
    },
    "ChangePasswordResponse": {
      "description": "The response from the server to the change password request.",
      "properties": {},
      "type": "object"
    },
    "ClientIdType": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w+]+",
      "type": "string"
    },
    "ClientMetadataType": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "ClientNameType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w\\s+=,.@-]+",
      "type": "string"
    },
    "ClientPermissionListType": {
      "items": {
        "$ref": "#/definitions/ClientPermissionType"
      },
      "type": "array"
    },
    "ClientPermissionType": {
      "maxLength": 2048,
      "minLength": 1,
      "type": "string"
    },
    "ClientSecretType": {
      "format": "password",
      "maxLength": 64,
      "minLength": 1,
      "pattern": "[\\w+]+",
      "type": "string"
    },
    "CodeDeliveryDetailsListType": {
      "items": {
        "$ref": "#/definitions/CodeDeliveryDetailsType"
      },
      "type": "array"
    },
    "CodeDeliveryDetailsType": {
      "description": "The type of code delivery details being returned from the server.",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The name of the attribute in the code delivery details type."
        },
        "DeliveryMedium": {
          "$ref": "#/definitions/DeliveryMediumType",
          "description": "The delivery medium (email message or phone number)."
        },
        "Destination": {
          "$ref": "#/definitions/StringType",
          "description": "The destination for the code delivery details."
        }
      },
      "type": "object"
    },
    "CodeDeliveryFailureException": {
      "description": "This exception is thrown when a verification code fails to deliver successfully.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message sent when a verification code fails to deliver successfully."
        }
      },
      "type": "object"
    },
    "CodeMismatchException": {
      "description": "This exception is thrown if the provided code does not match what the server was expecting.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message provided when the code mismatch exception is thrown."
        }
      },
      "type": "object"
    },
    "CompletionMessageType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w]+",
      "type": "string"
    },
    "ConcurrentModificationException": {
      "description": "This exception is thrown if two or more modifications are happening concurrently.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message provided when the concurrent exception is thrown."
        }
      },
      "type": "object"
    },
    "ConfirmDeviceRequest": {
      "description": "Confirms the device request.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceName": {
          "$ref": "#/definitions/DeviceNameType",
          "description": "The device name."
        },
        "DeviceSecretVerifierConfig": {
          "$ref": "#/definitions/DeviceSecretVerifierConfigType",
          "description": "The configuration of the device secret verifier."
        }
      },
      "required": [
        "AccessToken",
        "DeviceKey"
      ],
      "type": "object"
    },
    "ConfirmDeviceResponse": {
      "description": "Confirms the device response.",
      "properties": {
        "UserConfirmationNecessary": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates whether the user confirmation is necessary to confirm the device response."
        }
      },
      "type": "object"
    },
    "ConfirmForgotPasswordRequest": {
      "description": "The request representing the confirmation for a password reset.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ConfirmationCode": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The confirmation code sent by a user's request to retrieve a forgotten password."
        },
        "Password": {
          "$ref": "#/definitions/PasswordType",
          "description": "The password sent by sent by a user's request to retrieve a forgotten password."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to enter a code to retrieve a forgotten password."
        }
      },
      "required": [
        "ClientId",
        "Username",
        "ConfirmationCode",
        "Password"
      ],
      "type": "object"
    },
    "ConfirmForgotPasswordResponse": {
      "description": "The response from the server that results from a user's request to retrieve a forgotten password.",
      "properties": {},
      "type": "object"
    },
    "ConfirmSignUpRequest": {
      "description": "Represents the request to confirm registration of a user.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ConfirmationCode": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The confirmation code sent by a user's request to confirm registration."
        },
        "ForceAliasCreation": {
          "$ref": "#/definitions/ForceAliasCreation",
          "description": "Boolean to be specified to force user confirmation irrespective of existing alias. By default set to False. If this parameter is set to True and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to False, the API will throw an <b>AliasExistsException</b> error."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user whose registration you wish to confirm."
        }
      },
      "required": [
        "ClientId",
        "Username",
        "ConfirmationCode"
      ],
      "type": "object"
    },
    "ConfirmSignUpResponse": {
      "description": "Represents the response from the server for the registration confirmation.",
      "properties": {},
      "type": "object"
    },
    "ConfirmationCodeType": {
      "maxLength": 2048,
      "minLength": 1,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "CreateGroupRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/DescriptionType",
          "description": "A string containing the description of the group."
        },
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group. Must be unique."
        },
        "Precedence": {
          "$ref": "#/definitions/PrecedenceType",
          "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>"
        },
        "RoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the group."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "GroupName",
        "UserPoolId"
      ],
      "type": "object"
    },
    "CreateGroupResponse": {
      "properties": {
        "Group": {
          "$ref": "#/definitions/GroupType",
          "description": "The group object for the group."
        }
      },
      "type": "object"
    },
    "CreateUserImportJobRequest": {
      "description": "Represents the request to create the user import job.",
      "properties": {
        "CloudWatchLogsRoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job."
        },
        "JobName": {
          "$ref": "#/definitions/UserImportJobNameType",
          "description": "The job name for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "required": [
        "JobName",
        "UserPoolId",
        "CloudWatchLogsRoleArn"
      ],
      "type": "object"
    },
    "CreateUserImportJobResponse": {
      "description": "Represents the response from the server to the request to create the user import job.",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "type": "object"
    },
    "CreateUserPoolClientRequest": {
      "description": "Represents the request to create a user pool client.",
      "properties": {
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name for the user pool client you would like to create."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "The explicit authentication flows."
        },
        "GenerateSecret": {
          "$ref": "#/definitions/GenerateSecret",
          "description": "Boolean to specify whether you want to generate a secret for the user pool client being created."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The read attributes."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "The validity of the refresh token, in days."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to create a user pool client."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The write attributes."
        }
      },
      "required": [
        "UserPoolId",
        "ClientName"
      ],
      "type": "object"
    },
    "CreateUserPoolClientResponse": {
      "description": "Represents the response from the server to create a user pool client.",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client that was just created."
        }
      },
      "type": "object"
    },
    "CreateUserPoolRequest": {
      "description": "Represents the request to create a user pool.",
      "properties": {
        "AdminCreateUserConfig": {
          "$ref": "#/definitions/AdminCreateUserConfigType",
          "description": "The configuration for AdminCreateUser requests."
        },
        "AliasAttributes": {
          "$ref": "#/definitions/AliasAttributesListType",
          "description": "Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>."
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "The device configuration."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "The email configuration."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "A string representing the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "A string representing the email verification subject."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The Lambda trigger configuration information for the new user pool."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "Specifies MFA configuration details."
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "The policies associated with the new user pool."
        },
        "PoolName": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "A string used to name the user pool."
        },
        "Schema": {
          "$ref": "#/definitions/SchemaAttributesListType",
          "description": "An array of schema attributes for the new user pool. These attributes can be standard or custom attributes."
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A string representing the SMS authentication message."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "The SMS configuration."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A string representing the SMS verification message."
        },
        "UserPoolTags": {
          "$ref": "#/definitions/UserPoolTagsType",
          "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> "
        }
      },
      "required": [
        "PoolName"
      ],
      "type": "object"
    },
    "CreateUserPoolResponse": {
      "description": "Represents the response from the server for the request to create a user pool.",
      "properties": {
        "UserPool": {
          "$ref": "#/definitions/UserPoolType",
          "description": "A container for the user pool details."
        }
      },
      "type": "object"
    },
    "CustomAttributeNameType": {
      "maxLength": 20,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "CustomAttributesListType": {
      "items": {
        "$ref": "#/definitions/SchemaAttributeType"
      },
      "maxItems": 25,
      "minItems": 1,
      "type": "array"
    },
    "DateType": {
      "format": "date-time",
      "type": "string"
    },
    "DeleteGroupRequest": {
      "properties": {
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "GroupName",
        "UserPoolId"
      ],
      "type": "object"
    },
    "DeleteUserAttributesRequest": {
      "description": "Represents the request to delete user attributes.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token used in the request to delete user attributes."
        },
        "UserAttributeNames": {
          "$ref": "#/definitions/AttributeNameListType",
          "description": "An array of strings representing the user attribute names you wish to delete."
        }
      },
      "required": [
        "UserAttributeNames"
      ],
      "type": "object"
    },
    "DeleteUserAttributesResponse": {
      "description": "Represents the response from the server to delete user attributes.",
      "properties": {},
      "type": "object"
    },
    "DeleteUserPoolClientRequest": {
      "description": "Represents the request to delete a user pool client.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to delete the client."
        }
      },
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "type": "object"
    },
    "DeleteUserPoolRequest": {
      "description": "Represents the request to delete a user pool.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to delete."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "DeleteUserRequest": {
      "description": "Represents the request to delete a user.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token from a request to delete a user."
        }
      },
      "type": "object"
    },
    "DeliveryMediumListType": {
      "items": {
        "$ref": "#/definitions/DeliveryMediumType"
      },
      "type": "array"
    },
    "DeliveryMediumType": {
      "enum": [
        "SMS",
        "EMAIL"
      ],
      "type": "string"
    },
    "DescribeUserImportJobRequest": {
      "description": "Represents the request to describe the user import job.",
      "properties": {
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "type": "object"
    },
    "DescribeUserImportJobResponse": {
      "description": "Represents the response from the server to the request to describe the user import job.",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "type": "object"
    },
    "DescribeUserPoolClientRequest": {
      "description": "Represents the request to describe a user pool client.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to describe."
        }
      },
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "type": "object"
    },
    "DescribeUserPoolClientResponse": {
      "description": "Represents the response from the server from a request to describe the user pool client.",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client from a server response to describe the user pool client."
        }
      },
      "type": "object"
    },
    "DescribeUserPoolRequest": {
      "description": "Represents the request to describe the user pool.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to describe."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "DescribeUserPoolResponse": {
      "description": "Represents the response to describe the user pool.",
      "properties": {
        "UserPool": {
          "$ref": "#/definitions/UserPoolType",
          "description": "The container of metadata returned by the server to describe the pool."
        }
      },
      "type": "object"
    },
    "DescriptionType": {
      "maxLength": 2048,
      "type": "string"
    },
    "DeviceConfigurationType": {
      "description": "The type of configuration for the user pool's device tracking.",
      "properties": {
        "ChallengeRequiredOnNewDevice": {
          "$ref": "#/definitions/BooleanType",
          "description": "Indicates whether a challenge is required on a new device. Only applicable to a new device."
        },
        "DeviceOnlyRememberedOnUserPrompt": {
          "$ref": "#/definitions/BooleanType",
          "description": "If true, a device is only remembered on user prompt."
        }
      },
      "type": "object"
    },
    "DeviceKeyType": {
      "maxLength": 55,
      "minLength": 1,
      "pattern": "[\\w-]+_[0-9a-f-]+",
      "type": "string"
    },
    "DeviceListType": {
      "items": {
        "$ref": "#/definitions/DeviceType"
      },
      "type": "array"
    },
    "DeviceNameType": {
      "maxLength": 1024,
      "minLength": 1,
      "type": "string"
    },
    "DeviceRememberedStatusType": {
      "enum": [
        "remembered",
        "not_remembered"
      ],
      "type": "string"
    },
    "DeviceSecretVerifierConfigType": {
      "description": "The device verifier against which it will be authenticated.",
      "properties": {
        "PasswordVerifier": {
          "$ref": "#/definitions/StringType",
          "description": "The password verifier."
        },
        "Salt": {
          "$ref": "#/definitions/StringType",
          "description": "The salt."
        }
      },
      "type": "object"
    },
    "DeviceType": {
      "description": "The device type.",
      "properties": {
        "DeviceAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "The device attributes."
        },
        "DeviceCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of the device."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceLastAuthenticatedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date in which the device was last authenticated."
        },
        "DeviceLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of the device."
        }
      },
      "type": "object"
    },
    "EmailAddressType": {
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+@[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "EmailConfigurationType": {
      "description": "The email configuration type.",
      "properties": {
        "ReplyToEmailAddress": {
          "$ref": "#/definitions/EmailAddressType",
          "description": "The REPLY-TO email address."
        },
        "SourceArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The Amazon Resource Name (ARN) of the email source."
        }
      },
      "type": "object"
    },
    "EmailVerificationMessageType": {
      "maxLength": 2048,
      "minLength": 6,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*\\{####\\}[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s*]*",
      "type": "string"
    },
    "EmailVerificationSubjectType": {
      "maxLength": 140,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\s]+",
      "type": "string"
    },
    "ExpiredCodeException": {
      "description": "This exception is thrown if a code has expired.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the expired code exception is thrown."
        }
      },
      "type": "object"
    },
    "ExplicitAuthFlowsListType": {
      "items": {
        "$ref": "#/definitions/ExplicitAuthFlowsType"
      },
      "type": "array"
    },
    "ExplicitAuthFlowsType": {
      "enum": [
        "ADMIN_NO_SRP_AUTH",
        "CUSTOM_AUTH_FLOW_ONLY"
      ],
      "type": "string"
    },
    "ForceAliasCreation": {
      "type": "boolean"
    },
    "ForgetDeviceRequest": {
      "description": "Represents the request to forget the device.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the forgotten device request."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        }
      },
      "required": [
        "DeviceKey"
      ],
      "type": "object"
    },
    "ForgotPasswordRequest": {
      "description": "Represents the request to reset a user's password.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user for whom you want to enter a code to reset a forgotten password."
        }
      },
      "required": [
        "ClientId",
        "Username"
      ],
      "type": "object"
    },
    "ForgotPasswordResponse": {
      "description": "Respresents the response from the server regarding the request to reset a password.",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType",
          "description": "The code delivery details returned by the server in response to the request to reset a password."
        }
      },
      "type": "object"
    },
    "GenerateSecret": {
      "type": "boolean"
    },
    "GetCSVHeaderRequest": {
      "description": "Represents the request to get the header information for the .csv file for the user import job.",
      "properties": {
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are to be imported into."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "GetCSVHeaderResponse": {
      "description": "Represents the response from the server to the request to get the header information for the .csv file for the user import job.",
      "properties": {
        "CSVHeader": {
          "$ref": "#/definitions/ListOfStringTypes",
          "description": "The header information for the .csv file for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are to be imported into."
        }
      },
      "type": "object"
    },
    "GetDeviceRequest": {
      "description": "Represents the request to get the device.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        }
      },
      "required": [
        "DeviceKey"
      ],
      "type": "object"
    },
    "GetDeviceResponse": {
      "description": "Gets the device response.",
      "properties": {
        "Device": {
          "$ref": "#/definitions/DeviceType",
          "description": "The device."
        }
      },
      "required": [
        "Device"
      ],
      "type": "object"
    },
    "GetGroupRequest": {
      "properties": {
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "GroupName",
        "UserPoolId"
      ],
      "type": "object"
    },
    "GetGroupResponse": {
      "properties": {
        "Group": {
          "$ref": "#/definitions/GroupType",
          "description": "The group object for the group."
        }
      },
      "type": "object"
    },
    "GetUserAttributeVerificationCodeRequest": {
      "description": "Represents the request to get user attribute verification.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token returned by the server response to get the user attribute verification code."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name returned by the server response to get the user attribute verification code."
        }
      },
      "required": [
        "AttributeName"
      ],
      "type": "object"
    },
    "GetUserAttributeVerificationCodeResponse": {
      "description": "The verification code response returned by the server response to get the user attribute verification code.",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType",
          "description": "The code delivery details returned by the server in response to the request to get the user attribute verification code."
        }
      },
      "type": "object"
    },
    "GetUserRequest": {
      "description": "Represents the request to get information about the user.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token returned by the server response to get information about the user."
        }
      },
      "type": "object"
    },
    "GetUserResponse": {
      "description": "Represents the response from the server from the request to get information about the user.",
      "properties": {
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to retrieve from the get user request."
        }
      },
      "required": [
        "Username",
        "UserAttributes"
      ],
      "type": "object"
    },
    "GlobalSignOutRequest": {
      "description": "Represents the request to sign out all devices.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        }
      },
      "type": "object"
    },
    "GlobalSignOutResponse": {
      "description": "The response to the request to sign out all devices.",
      "properties": {},
      "type": "object"
    },
    "GroupExistsException": {
      "description": "This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType"
        }
      },
      "type": "object"
    },
    "GroupListType": {
      "items": {
        "$ref": "#/definitions/GroupType"
      },
      "type": "array"
    },
    "GroupNameType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "GroupType": {
      "description": "The group type.",
      "properties": {
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the group was created."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionType",
          "description": "A string containing the description of the group."
        },
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date the group was last modified."
        },
        "Precedence": {
          "$ref": "#/definitions/PrecedenceType",
          "description": "<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user's tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>"
        },
        "RoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the group."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "type": "object"
    },
    "InitiateAuthRequest": {
      "description": "Initiates the authentication request.",
      "properties": {
        "AuthFlow": {
          "$ref": "#/definitions/AuthFlowType",
          "description": "The authentication flow."
        },
        "AuthParameters": {
          "$ref": "#/definitions/AuthParametersType",
          "description": "The authentication parameters."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        },
        "ClientMetadata": {
          "$ref": "#/definitions/ClientMetadataType",
          "description": "The client app's metadata."
        }
      },
      "required": [
        "AuthFlow",
        "ClientId"
      ],
      "type": "object"
    },
    "InitiateAuthResponse": {
      "description": "Initiates the authentication response.",
      "properties": {
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType",
          "description": "The result returned by the server in response to the request to initiate authentication."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "type": "object"
    },
    "IntegerType": {
      "type": "integer"
    },
    "InternalErrorException": {
      "description": "This exception is thrown when Amazon Cognito encounters an internal error.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws an internal error exception."
        }
      },
      "type": "object"
    },
    "InvalidEmailRoleAccessPolicyException": {
      "description": "This exception is thrown when Amazon Cognito is not allowed to use your email identity. HTTP status code: 400.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when you have an unverified email address or the identity policy is not set on an email address that Amazon Cognito can access."
        }
      },
      "type": "object"
    },
    "InvalidLambdaResponseException": {
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid AWS Lambda response.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid AWS Lambda response exception."
        }
      },
      "type": "object"
    },
    "InvalidParameterException": {
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid parameter.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid parameter exception."
        }
      },
      "type": "object"
    },
    "InvalidPasswordException": {
      "description": "This exception is thrown when the Amazon Cognito service encounters an invalid password.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service throws an invalid user password exception."
        }
      },
      "type": "object"
    },
    "InvalidSmsRoleAccessPolicyException": {
      "description": "This exception is returned when the role provided for SMS configuration does not have permission to publish using Amazon SNS.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message retuned when the invalid SMS role access policy exception is thrown."
        }
      },
      "type": "object"
    },
    "InvalidSmsRoleTrustRelationshipException": {
      "description": "This exception is thrown when the trust relationship is invalid for the role provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the role trust relationship for the SMS message is invalid."
        }
      },
      "type": "object"
    },
    "InvalidUserPoolConfigurationException": {
      "description": "This exception is thrown when the user pool configuration is invalid.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the user pool configuration is invalid."
        }
      },
      "type": "object"
    },
    "LambdaConfigType": {
      "description": "Specifies the type of configuration for AWS Lambda triggers.",
      "properties": {
        "CreateAuthChallenge": {
          "$ref": "#/definitions/ArnType",
          "description": "Creates an authentication challenge."
        },
        "CustomMessage": {
          "$ref": "#/definitions/ArnType",
          "description": "A custom Message AWS Lambda trigger."
        },
        "DefineAuthChallenge": {
          "$ref": "#/definitions/ArnType",
          "description": "Defines the authentication challenge."
        },
        "PostAuthentication": {
          "$ref": "#/definitions/ArnType",
          "description": "A post-authentication AWS Lambda trigger."
        },
        "PostConfirmation": {
          "$ref": "#/definitions/ArnType",
          "description": "A post-confirmation AWS Lambda trigger."
        },
        "PreAuthentication": {
          "$ref": "#/definitions/ArnType",
          "description": "A pre-authentication AWS Lambda trigger."
        },
        "PreSignUp": {
          "$ref": "#/definitions/ArnType",
          "description": "A pre-registration AWS Lambda trigger."
        },
        "VerifyAuthChallengeResponse": {
          "$ref": "#/definitions/ArnType",
          "description": "Verifies the authentication challenge response."
        }
      },
      "type": "object"
    },
    "LimitExceededException": {
      "description": "This exception is thrown when a user exceeds the limit for a requested AWS resource.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws a limit exceeded exception."
        }
      },
      "type": "object"
    },
    "ListDevicesRequest": {
      "description": "Represents the request to list the devices.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access tokens for the request to list devices."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the device request."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token for the list request."
        }
      },
      "required": [
        "AccessToken"
      ],
      "type": "object"
    },
    "ListDevicesResponse": {
      "description": "Represents the response to list devices.",
      "properties": {
        "Devices": {
          "$ref": "#/definitions/DeviceListType",
          "description": "The devices returned in the list devices response."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "The pagination token for the list device response."
        }
      },
      "type": "object"
    },
    "ListGroupsRequest": {
      "properties": {
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the request to list groups."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "ListGroupsResponse": {
      "properties": {
        "Groups": {
          "$ref": "#/definitions/GroupListType",
          "description": "The group objects for the groups."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "type": "object"
    },
    "ListOfStringTypes": {
      "items": {
        "$ref": "#/definitions/StringType"
      },
      "type": "array"
    },
    "ListUserImportJobsRequest": {
      "description": "Represents the request to list the user import jobs.",
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PoolQueryLimitType",
          "description": "The maximum number of import jobs you want the request to return."
        },
        "PaginationToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to ListUserImportJobs, which can be used to return the next set of import jobs in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "required": [
        "UserPoolId",
        "MaxResults"
      ],
      "type": "object"
    },
    "ListUserImportJobsResponse": {
      "description": "Represents the response from the server to the request to list the user import jobs.",
      "properties": {
        "PaginationToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that can be used to return the next set of user import jobs in the list."
        },
        "UserImportJobs": {
          "$ref": "#/definitions/UserImportJobsListType",
          "description": "The user import jobs."
        }
      },
      "type": "object"
    },
    "ListUserPoolClientsRequest": {
      "description": "Represents the request to list the user pool clients.",
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/QueryLimit",
          "description": "The maximum number of results you want the request to return when listing the user pool clients."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to list user pool clients."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "ListUserPoolClientsResponse": {
      "description": "Represents the response from the server that lists user pool clients.",
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolClients": {
          "$ref": "#/definitions/UserPoolClientListType",
          "description": "The user pool clients in the response that lists user pool clients."
        }
      },
      "type": "object"
    },
    "ListUserPoolsRequest": {
      "description": "Represents the request to list user pools.",
      "properties": {
        "MaxResults": {
          "$ref": "#/definitions/PoolQueryLimitType",
          "description": "The maximum number of results you want the request to return when listing the user pools."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        }
      },
      "required": [
        "MaxResults"
      ],
      "type": "object"
    },
    "ListUserPoolsResponse": {
      "description": "Represents the response to list user pools.",
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/PaginationKeyType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPools": {
          "$ref": "#/definitions/UserPoolListType",
          "description": "The user pools from the response to list users."
        }
      },
      "type": "object"
    },
    "ListUsersInGroupRequest": {
      "properties": {
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the request to list users."
        },
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "UserPoolId",
        "GroupName"
      ],
      "type": "object"
    },
    "ListUsersInGroupResponse": {
      "properties": {
        "NextToken": {
          "$ref": "#/definitions/PaginationKey",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "Users": {
          "$ref": "#/definitions/UsersListType",
          "description": "The users returned in the request to list users."
        }
      },
      "type": "object"
    },
    "ListUsersRequest": {
      "description": "Represents the request to list users.",
      "properties": {
        "AttributesToGet": {
          "$ref": "#/definitions/SearchedAttributeNamesListType",
          "description": "The attributes to get from the request to list users."
        },
        "Filter": {
          "$ref": "#/definitions/UserFilterType",
          "description": "The filter for the list users request."
        },
        "Limit": {
          "$ref": "#/definitions/QueryLimitType",
          "description": "The limit of the request to list users."
        },
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for which you want to list users."
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "ListUsersResponse": {
      "description": "The response from the request to list users.",
      "properties": {
        "PaginationToken": {
          "$ref": "#/definitions/SearchPaginationTokenType",
          "description": "An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list."
        },
        "Users": {
          "$ref": "#/definitions/UsersListType",
          "description": "The users returned in the request to list users."
        }
      },
      "type": "object"
    },
    "LongType": {
      "type": "integer"
    },
    "MFAMethodNotFoundException": {
      "description": "This exception is thrown when Amazon Cognito cannot find a multi-factor authentication (MFA) method.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws an MFA method not found exception."
        }
      },
      "type": "object"
    },
    "MFAOptionListType": {
      "items": {
        "$ref": "#/definitions/MFAOptionType"
      },
      "type": "array"
    },
    "MFAOptionType": {
      "description": "Specifies the different settings for multi-factor authentication (MFA).",
      "properties": {
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name of the MFA option type."
        },
        "DeliveryMedium": {
          "$ref": "#/definitions/DeliveryMediumType",
          "description": "The delivery medium (email message or SMS message) to send the MFA code."
        }
      },
      "type": "object"
    },
    "MessageActionType": {
      "enum": [
        "RESEND",
        "SUPPRESS"
      ],
      "type": "string"
    },
    "MessageTemplateType": {
      "description": "The message template structure.",
      "properties": {
        "EmailMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "The message template for email messages."
        },
        "EmailSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "The subject line for email messages."
        },
        "SMSMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The message template for SMS messages."
        }
      },
      "type": "object"
    },
    "MessageType": {
      "type": "string"
    },
    "NewDeviceMetadataType": {
      "description": "The new device metadata type.",
      "properties": {
        "DeviceGroupKey": {
          "$ref": "#/definitions/StringType",
          "description": "The device group key."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        }
      },
      "type": "object"
    },
    "NotAuthorizedException": {
      "description": "This exception gets thrown when a user is not authorized.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a not authorized exception."
        }
      },
      "type": "object"
    },
    "NumberAttributeConstraintsType": {
      "description": "The minimum and maximum value of an attribute that is of the number data type.",
      "properties": {
        "MaxValue": {
          "$ref": "#/definitions/StringType",
          "description": "The maximum value of an attribute that is of the number data type."
        },
        "MinValue": {
          "$ref": "#/definitions/StringType",
          "description": "The minimum value of an attribute that is of the number data type."
        }
      },
      "type": "object"
    },
    "PaginationKey": {
      "minLength": 1,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "PaginationKeyType": {
      "minLength": 1,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "PasswordPolicyMinLengthType": {
      "maximum": 99,
      "minimum": 6,
      "type": "integer"
    },
    "PasswordPolicyType": {
      "description": "The password policy type.",
      "properties": {
        "MinimumLength": {
          "$ref": "#/definitions/PasswordPolicyMinLengthType",
          "description": "The minimum length of the password policy that you have set. Cannot be less than 6."
        },
        "RequireLowercase": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password."
        },
        "RequireNumbers": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one number in their password."
        },
        "RequireSymbols": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password."
        },
        "RequireUppercase": {
          "$ref": "#/definitions/BooleanType",
          "description": "In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password."
        }
      },
      "type": "object"
    },
    "PasswordResetRequiredException": {
      "description": "This exception is thrown when a password reset is required.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a password reset is required."
        }
      },
      "type": "object"
    },
    "PasswordType": {
      "format": "password",
      "maxLength": 256,
      "minLength": 6,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "PoolQueryLimitType": {
      "maximum": 60,
      "minimum": 1,
      "type": "integer"
    },
    "PreSignedUrlType": {
      "maxLength": 2048,
      "minLength": 0,
      "type": "string"
    },
    "PrecedenceType": {
      "minimum": 0,
      "type": "integer"
    },
    "PreconditionNotMetException": {
      "description": "This exception is thrown when a precondition is not met.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a precondition is not met."
        }
      },
      "type": "object"
    },
    "QueryLimit": {
      "maximum": 60,
      "minimum": 1,
      "type": "integer"
    },
    "QueryLimitType": {
      "maximum": 60,
      "minimum": 0,
      "type": "integer"
    },
    "RefreshTokenValidityType": {
      "maximum": 3650,
      "minimum": 0,
      "type": "integer"
    },
    "ResendConfirmationCodeRequest": {
      "description": "Represents the request to resend the confirmation code.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user to whom you wish to resend a confirmation code."
        }
      },
      "required": [
        "ClientId",
        "Username"
      ],
      "type": "object"
    },
    "ResendConfirmationCodeResponse": {
      "description": "The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType",
          "description": "The code delivery details returned by the server in response to the request to resend the confirmation code."
        }
      },
      "type": "object"
    },
    "ResourceNotFoundException": {
      "description": "This exception is thrown when the Amazon Cognito service cannot find the requested resource.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a resource not found exception."
        }
      },
      "type": "object"
    },
    "RespondToAuthChallengeRequest": {
      "description": "The request to respond to an authentication challenge.",
      "properties": {
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The name of the challenge."
        },
        "ChallengeResponses": {
          "$ref": "#/definitions/ChallengeResponsesType",
          "description": "The responses to the authentication challenge."
        },
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The client ID."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "required": [
        "ClientId",
        "ChallengeName"
      ],
      "type": "object"
    },
    "RespondToAuthChallengeResponse": {
      "description": "The response to respond to the authentication challenge.",
      "properties": {
        "AuthenticationResult": {
          "$ref": "#/definitions/AuthenticationResultType",
          "description": "The result returned by the server in response to the request to respond to the authentication challenge."
        },
        "ChallengeName": {
          "$ref": "#/definitions/ChallengeNameType",
          "description": "The challenge name."
        },
        "ChallengeParameters": {
          "$ref": "#/definitions/ChallengeParametersType",
          "description": "The challenge parameters."
        },
        "Session": {
          "$ref": "#/definitions/SessionType",
          "description": "The session."
        }
      },
      "type": "object"
    },
    "SchemaAttributeType": {
      "description": "Contains information about the schema attribute.",
      "properties": {
        "AttributeDataType": {
          "$ref": "#/definitions/AttributeDataType",
          "description": "The attribute data type."
        },
        "DeveloperOnlyAttribute": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the attribute type is developer only."
        },
        "Mutable": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the attribute can be changed once it has been created."
        },
        "Name": {
          "$ref": "#/definitions/CustomAttributeNameType",
          "description": "A schema attribute of the name type."
        },
        "NumberAttributeConstraints": {
          "$ref": "#/definitions/NumberAttributeConstraintsType",
          "description": "Specifies the constraints for an attribute of the number type."
        },
        "Required": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail."
        },
        "StringAttributeConstraints": {
          "$ref": "#/definitions/StringAttributeConstraintsType",
          "description": "Specifies the constraints for an attribute of the string type."
        }
      },
      "type": "object"
    },
    "SchemaAttributesListType": {
      "items": {
        "$ref": "#/definitions/SchemaAttributeType"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "SearchPaginationTokenType": {
      "minLength": 1,
      "pattern": "[\\S]+",
      "type": "string"
    },
    "SearchedAttributeNamesListType": {
      "items": {
        "$ref": "#/definitions/AttributeNameType"
      },
      "type": "array"
    },
    "SecretHashType": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w+=/]+",
      "type": "string"
    },
    "SessionType": {
      "maxLength": 2048,
      "minLength": 20,
      "type": "string"
    },
    "SetUserSettingsRequest": {
      "description": "Represents the request to set user settings.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the set user settings request."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "Specifies the options for MFA (e.g., email or phone number)."
        }
      },
      "required": [
        "AccessToken",
        "MFAOptions"
      ],
      "type": "object"
    },
    "SetUserSettingsResponse": {
      "description": "The response from the server for a set user settings request.",
      "properties": {},
      "type": "object"
    },
    "SignUpRequest": {
      "description": "Represents the request to register a user.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "Password": {
          "$ref": "#/definitions/PasswordType",
          "description": "The password of the user you wish to register."
        },
        "SecretHash": {
          "$ref": "#/definitions/SecretHashType",
          "description": "A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to register."
        },
        "ValidationData": {
          "$ref": "#/definitions/AttributeListType",
          "description": "The validation data in the request to register a user."
        }
      },
      "required": [
        "ClientId",
        "Username",
        "Password"
      ],
      "type": "object"
    },
    "SignUpResponse": {
      "description": "The response from the server for a registration request.",
      "properties": {
        "CodeDeliveryDetails": {
          "$ref": "#/definitions/CodeDeliveryDetailsType",
          "description": "The code delivery details returned by the server response to the user registration request."
        },
        "UserConfirmed": {
          "$ref": "#/definitions/BooleanType",
          "description": "A response from the server indicating that a user registration has been confirmed."
        }
      },
      "type": "object"
    },
    "SmsConfigurationType": {
      "description": "The SMS configuratoin type.",
      "properties": {
        "ExternalId": {
          "$ref": "#/definitions/StringType",
          "description": "The external ID."
        },
        "SnsCallerArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller."
        }
      },
      "required": [
        "SnsCallerArn"
      ],
      "type": "object"
    },
    "SmsVerificationMessageType": {
      "maxLength": 140,
      "minLength": 6,
      "pattern": ".*\\{####\\}.*",
      "type": "string"
    },
    "StartUserImportJobRequest": {
      "description": "Represents the request to start the user import job.",
      "properties": {
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "type": "object"
    },
    "StartUserImportJobResponse": {
      "description": "Represents the response from the server to the request to start the user import job.",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "type": "object"
    },
    "StatusType": {
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "type": "string"
    },
    "StopUserImportJobRequest": {
      "description": "Represents the request to stop the user import job.",
      "properties": {
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "required": [
        "UserPoolId",
        "JobId"
      ],
      "type": "object"
    },
    "StopUserImportJobResponse": {
      "description": "Represents the response from the server to the request to stop the user import job.",
      "properties": {
        "UserImportJob": {
          "$ref": "#/definitions/UserImportJobType",
          "description": "The job object that represents the user import job."
        }
      },
      "type": "object"
    },
    "StringAttributeConstraintsType": {
      "description": "The type of constraints associated with an attribute of the string type.",
      "properties": {
        "MaxLength": {
          "$ref": "#/definitions/StringType",
          "description": "The maximum length of an attribute value of the string type."
        },
        "MinLength": {
          "$ref": "#/definitions/StringType",
          "description": "The minimum length of an attribute value of the string type."
        }
      },
      "type": "object"
    },
    "StringType": {
      "type": "string"
    },
    "TokenModelType": {
      "format": "password",
      "pattern": "[A-Za-z0-9-_=.]+",
      "type": "string"
    },
    "TooManyFailedAttemptsException": {
      "description": "This exception gets thrown when the user has made too many failed attempts for a given action (e.g., sign in).",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a too many failed attempts exception."
        }
      },
      "type": "object"
    },
    "TooManyRequestsException": {
      "description": "This exception gets thrown when the user has made too many requests for a given operation.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a too many requests exception."
        }
      },
      "type": "object"
    },
    "UnexpectedLambdaException": {
      "description": "This exception gets thrown when the Amazon Cognito service encounters an unexpected exception with the AWS Lambda service.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns an unexpected AWS Lambda exception."
        }
      },
      "type": "object"
    },
    "UnsupportedUserStateException": {
      "description": "The request failed because the user is in an unsupported state.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the user is in an unsupported state."
        }
      },
      "type": "object"
    },
    "UpdateDeviceStatusRequest": {
      "description": "Represents the request to update the device status.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token."
        },
        "DeviceKey": {
          "$ref": "#/definitions/DeviceKeyType",
          "description": "The device key."
        },
        "DeviceRememberedStatus": {
          "$ref": "#/definitions/DeviceRememberedStatusType",
          "description": "The status of whether a device is remembered."
        }
      },
      "required": [
        "AccessToken",
        "DeviceKey"
      ],
      "type": "object"
    },
    "UpdateDeviceStatusResponse": {
      "description": "The response to the request to update the device status.",
      "properties": {},
      "type": "object"
    },
    "UpdateGroupRequest": {
      "properties": {
        "Description": {
          "$ref": "#/definitions/DescriptionType",
          "description": "A string containing the new description of the group."
        },
        "GroupName": {
          "$ref": "#/definitions/GroupNameType",
          "description": "The name of the group."
        },
        "Precedence": {
          "$ref": "#/definitions/PrecedenceType",
          "description": "The new precedence value for the group. For more information about this parameter, see <a href=\"API_CreateGroupRequeste.html\">CreateGroupRequest</a>."
        },
        "RoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool."
        }
      },
      "required": [
        "GroupName",
        "UserPoolId"
      ],
      "type": "object"
    },
    "UpdateGroupResponse": {
      "properties": {
        "Group": {
          "$ref": "#/definitions/GroupType",
          "description": "The group object for the group."
        }
      },
      "type": "object"
    },
    "UpdateUserAttributesRequest": {
      "description": "Represents the request to update user attributes.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "The access token for the request to update user attributes."
        },
        "UserAttributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "An array of name-value pairs representing user attributes."
        }
      },
      "required": [
        "UserAttributes"
      ],
      "type": "object"
    },
    "UpdateUserAttributesResponse": {
      "description": "Represents the response from the server for the request to update user attributes.",
      "properties": {
        "CodeDeliveryDetailsList": {
          "$ref": "#/definitions/CodeDeliveryDetailsListType",
          "description": "The code delivery details list from the server for the request to update user attributes."
        }
      },
      "type": "object"
    },
    "UpdateUserPoolClientRequest": {
      "description": "Represents the request to update the user pool client.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the update user pool client request."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "Explicit authentication flows."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The read-only attributes of the user pool."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "The validity of the refresh token, in days."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to update the user pool client."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The writeable attributes of the user pool."
        }
      },
      "required": [
        "UserPoolId",
        "ClientId"
      ],
      "type": "object"
    },
    "UpdateUserPoolClientResponse": {
      "description": "Represents the response from the server to the request to update the user pool client.",
      "properties": {
        "UserPoolClient": {
          "$ref": "#/definitions/UserPoolClientType",
          "description": "The user pool client value from the response from the server when an update user pool client request is made."
        }
      },
      "type": "object"
    },
    "UpdateUserPoolRequest": {
      "description": "Represents the request to update the user pool.",
      "properties": {
        "AdminCreateUserConfig": {
          "$ref": "#/definitions/AdminCreateUserConfigType",
          "description": "The configuration for AdminCreateUser requests."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools."
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "Device configuration."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "Email configuration."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "The contents of the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "The subject of the email verfication message."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The AWS Lambda configuration information from the request to update the user pool."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>"
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "A container with the policies you wish to update in a user pool."
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS authentication message."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "SMS configuration."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "A container with information about the SMS verification message."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool you want to update."
        },
        "UserPoolTags": {
          "$ref": "#/definitions/UserPoolTagsType",
          "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> "
        }
      },
      "required": [
        "UserPoolId"
      ],
      "type": "object"
    },
    "UpdateUserPoolResponse": {
      "description": "Represents the response from the server when you make a request to update the user pool.",
      "properties": {},
      "type": "object"
    },
    "UserFilterType": {
      "maxLength": 256,
      "type": "string"
    },
    "UserImportInProgressException": {
      "description": "This exception is thrown when you are trying to modify a user pool while a user import job is in progress for that pool.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the user pool has an import job running."
        }
      },
      "type": "object"
    },
    "UserImportJobIdType": {
      "maxLength": 55,
      "minLength": 1,
      "pattern": "import-[0-9a-zA-Z-]+",
      "type": "string"
    },
    "UserImportJobNameType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w\\s+=,.@-]+",
      "type": "string"
    },
    "UserImportJobStatusType": {
      "enum": [
        "Created",
        "Pending",
        "InProgress",
        "Stopping",
        "Expired",
        "Stopped",
        "Failed",
        "Succeeded"
      ],
      "type": "string"
    },
    "UserImportJobType": {
      "description": "The user import job type.",
      "properties": {
        "CloudWatchLogsRoleArn": {
          "$ref": "#/definitions/ArnType",
          "description": "The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see \"Creating the CloudWatch Logs IAM Role\" in the Amazon Cognito Developer Guide."
        },
        "CompletionDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user imoprt job was completed."
        },
        "CompletionMessage": {
          "$ref": "#/definitions/CompletionMessageType",
          "description": "The message returned when the user import job is completed."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user import job was created."
        },
        "FailedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that could not be imported."
        },
        "ImportedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that were successfully imported."
        },
        "JobId": {
          "$ref": "#/definitions/UserImportJobIdType",
          "description": "The job ID for the user import job."
        },
        "JobName": {
          "$ref": "#/definitions/UserImportJobNameType",
          "description": "The job name for the user import job."
        },
        "PreSignedUrl": {
          "$ref": "#/definitions/PreSignedUrlType",
          "description": "The pre-signed URL to be used to upload the .csv file."
        },
        "SkippedUsers": {
          "$ref": "#/definitions/LongType",
          "description": "The number of users that were skipped."
        },
        "StartDate": {
          "$ref": "#/definitions/DateType",
          "description": "The date when the user import job was started."
        },
        "Status": {
          "$ref": "#/definitions/UserImportJobStatusType",
          "description": "<p>The status of the user import job. One of the following:</p> <ul> <li> <p>Created - The job was created but not started.</p> </li> <li> <p>Pending - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p>InProgress - The job has started, and users are being imported.</p> </li> <li> <p>Stopping - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p>Stopped - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p>Succeeded - The job has completed successfully.</p> </li> <li> <p>Failed - The job has stopped due to an error.</p> </li> <li> <p>Expired - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>"
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool that the users are being imported into."
        }
      },
      "type": "object"
    },
    "UserImportJobsListType": {
      "items": {
        "$ref": "#/definitions/UserImportJobType"
      },
      "maxItems": 50,
      "minItems": 1,
      "type": "array"
    },
    "UserLambdaValidationException": {
      "description": "This exception gets thrown when the Amazon Cognito service encounters a user validation exception with the AWS Lambda service.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when the Amazon Cognito service returns a user validation exception with the AWS Lambda service."
        }
      },
      "type": "object"
    },
    "UserNotConfirmedException": {
      "description": "This exception is thrown when a user is not confirmed successfully.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a user is not confirmed successfully."
        }
      },
      "type": "object"
    },
    "UserNotFoundException": {
      "description": "This exception is thrown when a user is not found.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when a user is not found."
        }
      },
      "type": "object"
    },
    "UserPoolClientDescription": {
      "description": "The description of the user pool client.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the user pool client description."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool where you want to describe the user pool client."
        }
      },
      "type": "object"
    },
    "UserPoolClientListType": {
      "items": {
        "$ref": "#/definitions/UserPoolClientDescription"
      },
      "type": "array"
    },
    "UserPoolClientType": {
      "description": "A user pool of the client type.",
      "properties": {
        "ClientId": {
          "$ref": "#/definitions/ClientIdType",
          "description": "The ID of the client associated with the user pool."
        },
        "ClientName": {
          "$ref": "#/definitions/ClientNameType",
          "description": "The client name from the user pool request of the client type."
        },
        "ClientSecret": {
          "$ref": "#/definitions/ClientSecretType",
          "description": "The client secret from the user pool request of the client type."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date from the user pool request of the client type."
        },
        "ExplicitAuthFlows": {
          "$ref": "#/definitions/ExplicitAuthFlowsListType",
          "description": "The explicit authentication flows."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date from the user pool request of the client type."
        },
        "ReadAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The Read-only attributes."
        },
        "RefreshTokenValidity": {
          "$ref": "#/definitions/RefreshTokenValidityType",
          "description": "The validity of the refresh token, in days."
        },
        "UserPoolId": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The user pool ID for the user pool client."
        },
        "WriteAttributes": {
          "$ref": "#/definitions/ClientPermissionListType",
          "description": "The writeable attributes."
        }
      },
      "type": "object"
    },
    "UserPoolDescriptionType": {
      "description": "A user pool description.",
      "properties": {
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date in a user pool description."
        },
        "Id": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID in a user pool description."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "The AWS Lambda configuration information in a user pool description."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date in a user pool description."
        },
        "Name": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "The name in a user pool description."
        },
        "Status": {
          "$ref": "#/definitions/StatusType",
          "description": "The user pool status in a user pool description."
        }
      },
      "type": "object"
    },
    "UserPoolIdType": {
      "maxLength": 55,
      "minLength": 1,
      "pattern": "[\\w-]+_[0-9a-zA-Z]+",
      "type": "string"
    },
    "UserPoolListType": {
      "items": {
        "$ref": "#/definitions/UserPoolDescriptionType"
      },
      "type": "array"
    },
    "UserPoolMfaType": {
      "enum": [
        "OFF",
        "ON",
        "OPTIONAL"
      ],
      "type": "string"
    },
    "UserPoolNameType": {
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\w\\s+=,.@-]+",
      "type": "string"
    },
    "UserPoolPolicyType": {
      "description": "The type of policy in a user pool.",
      "properties": {
        "PasswordPolicy": {
          "$ref": "#/definitions/PasswordPolicyType",
          "description": "A container with information about the user pool password policy."
        }
      },
      "type": "object"
    },
    "UserPoolTaggingException": {
      "description": "This exception gets thrown when a user pool tag cannot be set or updated.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType"
        }
      },
      "type": "object"
    },
    "UserPoolTagsType": {
      "items": {
        "properties": {
          "key": {
            "$ref": "#/definitions/StringType"
          },
          "value": {
            "$ref": "#/definitions/StringType"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "UserPoolType": {
      "description": "A container with information about the user pool type.",
      "properties": {
        "AdminCreateUserConfig": {
          "$ref": "#/definitions/AdminCreateUserConfigType",
          "description": "The configuration for AdminCreateUser requests."
        },
        "AliasAttributes": {
          "$ref": "#/definitions/AliasAttributesListType",
          "description": "Specifies the attributes that are aliased in a user pool."
        },
        "AutoVerifiedAttributes": {
          "$ref": "#/definitions/VerifiedAttributesListType",
          "description": "Specifies the attributes that are auto-verified in a user pool."
        },
        "CreationDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of a user pool."
        },
        "DeviceConfiguration": {
          "$ref": "#/definitions/DeviceConfigurationType",
          "description": "The device configuration."
        },
        "EmailConfiguration": {
          "$ref": "#/definitions/EmailConfigurationType",
          "description": "The email configuration."
        },
        "EmailConfigurationFailure": {
          "$ref": "#/definitions/StringType",
          "description": "The reason why the email configuration cannot send the messages to your users."
        },
        "EmailVerificationMessage": {
          "$ref": "#/definitions/EmailVerificationMessageType",
          "description": "The contents of the email verification message."
        },
        "EmailVerificationSubject": {
          "$ref": "#/definitions/EmailVerificationSubjectType",
          "description": "The subject of the email verification message."
        },
        "EstimatedNumberOfUsers": {
          "$ref": "#/definitions/IntegerType",
          "description": "A number estimating the size of the user pool."
        },
        "Id": {
          "$ref": "#/definitions/UserPoolIdType",
          "description": "The ID of the user pool."
        },
        "LambdaConfig": {
          "$ref": "#/definitions/LambdaConfigType",
          "description": "A container describing the AWS Lambda triggers associated with a user pool."
        },
        "LastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of a user pool."
        },
        "MfaConfiguration": {
          "$ref": "#/definitions/UserPoolMfaType",
          "description": "<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>"
        },
        "Name": {
          "$ref": "#/definitions/UserPoolNameType",
          "description": "The name of the user pool."
        },
        "Policies": {
          "$ref": "#/definitions/UserPoolPolicyType",
          "description": "A container describing the policies associated with a user pool."
        },
        "SchemaAttributes": {
          "$ref": "#/definitions/SchemaAttributesListType",
          "description": "A container with the schema attributes of a user pool."
        },
        "SmsAuthenticationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS authentication message."
        },
        "SmsConfiguration": {
          "$ref": "#/definitions/SmsConfigurationType",
          "description": "The SMS configuration."
        },
        "SmsConfigurationFailure": {
          "$ref": "#/definitions/StringType",
          "description": "The reason why the SMS configuration cannot send the message(s) to your users."
        },
        "SmsVerificationMessage": {
          "$ref": "#/definitions/SmsVerificationMessageType",
          "description": "The contents of the SMS verification message."
        },
        "Status": {
          "$ref": "#/definitions/StatusType",
          "description": "The status of a user pool."
        },
        "UserPoolTags": {
          "$ref": "#/definitions/UserPoolTagsType",
          "description": "The cost allocation tags for the user pool. For more information, see <a href=\"http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html\">Adding Cost Allocation Tags to Your User Pool</a> "
        }
      },
      "type": "object"
    },
    "UserStatusType": {
      "enum": [
        "UNCONFIRMED",
        "CONFIRMED",
        "ARCHIVED",
        "COMPROMISED",
        "UNKNOWN",
        "RESET_REQUIRED",
        "FORCE_CHANGE_PASSWORD"
      ],
      "type": "string"
    },
    "UserType": {
      "description": "The user type.",
      "properties": {
        "Attributes": {
          "$ref": "#/definitions/AttributeListType",
          "description": "A container with information about the user type attributes."
        },
        "Enabled": {
          "$ref": "#/definitions/BooleanType",
          "description": "Specifies whether the user is enabled."
        },
        "MFAOptions": {
          "$ref": "#/definitions/MFAOptionListType",
          "description": "The MFA options for the user."
        },
        "UserCreateDate": {
          "$ref": "#/definitions/DateType",
          "description": "The creation date of the user."
        },
        "UserLastModifiedDate": {
          "$ref": "#/definitions/DateType",
          "description": "The last modified date of the user."
        },
        "UserStatus": {
          "$ref": "#/definitions/UserStatusType",
          "description": "<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>"
        },
        "Username": {
          "$ref": "#/definitions/UsernameType",
          "description": "The user name of the user you wish to describe."
        }
      },
      "type": "object"
    },
    "UsernameExistsException": {
      "description": "This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.",
      "properties": {
        "message": {
          "$ref": "#/definitions/MessageType",
          "description": "The message returned when Amazon Cognito throws a user name exists exception."
        }
      },
      "type": "object"
    },
    "UsernameType": {
      "format": "password",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+",
      "type": "string"
    },
    "UsersListType": {
      "items": {
        "$ref": "#/definitions/UserType"
      },
      "type": "array"
    },
    "VerifiedAttributeType": {
      "enum": [
        "phone_number",
        "email"
      ],
      "type": "string"
    },
    "VerifiedAttributesListType": {
      "items": {
        "$ref": "#/definitions/VerifiedAttributeType"
      },
      "type": "array"
    },
    "VerifyUserAttributeRequest": {
      "description": "Represents the request to verify user attributes.",
      "properties": {
        "AccessToken": {
          "$ref": "#/definitions/TokenModelType",
          "description": "Represents the access token of the request to verify user attributes."
        },
        "AttributeName": {
          "$ref": "#/definitions/AttributeNameType",
          "description": "The attribute name in the request to verify user attributes."
        },
        "Code": {
          "$ref": "#/definitions/ConfirmationCodeType",
          "description": "The verification code in the request to verify user attributes."
        }
      },
      "required": [
        "AttributeName",
        "Code"
      ],
      "type": "object"
    },
    "VerifyUserAttributeResponse": {
      "description": "A container representing the response from the server from the request to verify user attributes.",
      "properties": {},
      "type": "object"
    }
  }
}